
Climat.elf:     формат файла elf32-avr

Разделы:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00002712  000027c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002712  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000212  00800106  00800106  000027cc  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  000027cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000040a4  00000000  00000000  000027d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00001b7b  00000000  00000000  00006874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000083ef  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008400  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00008440  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00008a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  00008fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  00008ff0  2**0
                  CONTENTS, READONLY, DEBUGGING

Дизассемблирование раздела .text:

00000000 <__vectors>:
       0:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__ctors_end>
       4:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
       8:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
       c:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__vector_3>
      10:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
      14:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
      18:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
      1c:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
      20:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
      24:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
      28:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
      2c:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
      30:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
      34:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__vector_13>
      38:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
      3c:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
      40:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
      44:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
      48:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__vector_18>
      4c:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
      50:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
      54:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
      58:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
      5c:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
      60:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>
      64:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 5f       	subi	r16, 0xF0	; 240
      70:	00 00       	nop
      72:	00 07       	cpc	r16, r16
      74:	00 07       	cpc	r16, r16
      76:	00 14       	cp	r0, r0
      78:	7f 14       	cp	r7, r15
      7a:	7f 14       	cp	r7, r15
      7c:	24 2a       	or	r2, r20
      7e:	7f 2a       	or	r7, r31
      80:	12 4c       	sbci	r17, 0xC2	; 194
      82:	2c 10       	cpse	r2, r12
      84:	68 64       	ori	r22, 0x48	; 72
      86:	36 49       	sbci	r19, 0x96	; 150
      88:	55 22       	and	r5, r21
      8a:	50 00       	.word	0x0050	; ????
      8c:	05 03       	mulsu	r16, r21
      8e:	00 00       	nop
      90:	00 1c       	adc	r0, r0
      92:	22 41       	sbci	r18, 0x12	; 18
      94:	00 00       	nop
      96:	41 22       	and	r4, r17
      98:	1c 00       	.word	0x001c	; ????
      9a:	14 08       	sbc	r1, r4
      9c:	3e 08       	sbc	r3, r14
      9e:	14 08       	sbc	r1, r4
      a0:	08 3e       	cpi	r16, 0xE8	; 232
      a2:	08 08       	sbc	r0, r8
      a4:	00 00       	nop
      a6:	50 30       	cpi	r21, 0x00	; 0
      a8:	00 10       	cpse	r0, r0
      aa:	10 10       	cpse	r1, r0
      ac:	10 10       	cpse	r1, r0
      ae:	00 60       	ori	r16, 0x00	; 0
      b0:	60 00       	.word	0x0060	; ????
      b2:	00 20       	and	r0, r0
      b4:	10 08       	sbc	r1, r0
      b6:	04 02       	muls	r16, r20
      b8:	3e 51       	subi	r19, 0x1E	; 30
      ba:	49 45       	sbci	r20, 0x59	; 89
      bc:	3e 00       	.word	0x003e	; ????
      be:	42 7f       	andi	r20, 0xF2	; 242
      c0:	40 00       	.word	0x0040	; ????
      c2:	42 61       	ori	r20, 0x12	; 18
      c4:	51 49       	sbci	r21, 0x91	; 145
      c6:	46 21       	and	r20, r6
      c8:	41 45       	sbci	r20, 0x51	; 81
      ca:	4b 31       	cpi	r20, 0x1B	; 27
      cc:	18 14       	cp	r1, r8
      ce:	12 7f       	andi	r17, 0xF2	; 242
      d0:	10 27       	eor	r17, r16
      d2:	45 45       	sbci	r20, 0x55	; 85
      d4:	45 39       	cpi	r20, 0x95	; 149
      d6:	3c 4a       	sbci	r19, 0xAC	; 172
      d8:	49 49       	sbci	r20, 0x99	; 153
      da:	30 01       	movw	r6, r0
      dc:	71 09       	sbc	r23, r1
      de:	05 03       	mulsu	r16, r21
      e0:	36 49       	sbci	r19, 0x96	; 150
      e2:	49 49       	sbci	r20, 0x99	; 153
      e4:	36 06       	cpc	r3, r22
      e6:	49 49       	sbci	r20, 0x99	; 153
      e8:	29 1e       	adc	r2, r25
      ea:	00 36       	cpi	r16, 0x60	; 96
      ec:	36 00       	.word	0x0036	; ????
      ee:	00 00       	nop
      f0:	56 36       	cpi	r21, 0x66	; 102
      f2:	00 00       	nop
      f4:	08 14       	cp	r0, r8
      f6:	22 41       	sbci	r18, 0x12	; 18
      f8:	00 14       	cp	r0, r0
      fa:	14 14       	cp	r1, r4
      fc:	14 14       	cp	r1, r4
      fe:	00 41       	sbci	r16, 0x10	; 16
     100:	22 14       	cp	r2, r2
     102:	08 02       	muls	r16, r24
     104:	01 51       	subi	r16, 0x11	; 17
     106:	09 06       	cpc	r0, r25
     108:	32 49       	sbci	r19, 0x92	; 146
     10a:	79 41       	sbci	r23, 0x19	; 25
     10c:	3e 7e       	andi	r19, 0xEE	; 238
     10e:	11 11       	cpse	r17, r1
     110:	11 7e       	andi	r17, 0xE1	; 225
     112:	7f 49       	sbci	r23, 0x9F	; 159
     114:	49 49       	sbci	r20, 0x99	; 153
     116:	36 3e       	cpi	r19, 0xE6	; 230
     118:	41 41       	sbci	r20, 0x11	; 17
     11a:	41 22       	and	r4, r17
     11c:	7f 41       	sbci	r23, 0x1F	; 31
     11e:	41 22       	and	r4, r17
     120:	1c 7f       	andi	r17, 0xFC	; 252
     122:	49 49       	sbci	r20, 0x99	; 153
     124:	49 41       	sbci	r20, 0x19	; 25
     126:	7f 09       	sbc	r23, r15
     128:	09 09       	sbc	r16, r9
     12a:	01 3e       	cpi	r16, 0xE1	; 225
     12c:	41 49       	sbci	r20, 0x91	; 145
     12e:	49 7a       	andi	r20, 0xA9	; 169
     130:	7f 08       	sbc	r7, r15
     132:	08 08       	sbc	r0, r8
     134:	7f 00       	.word	0x007f	; ????
     136:	41 7f       	andi	r20, 0xF1	; 241
     138:	41 00       	.word	0x0041	; ????
     13a:	20 40       	sbci	r18, 0x00	; 0
     13c:	41 3f       	cpi	r20, 0xF1	; 241
     13e:	01 7f       	andi	r16, 0xF1	; 241
     140:	08 14       	cp	r0, r8
     142:	22 41       	sbci	r18, 0x12	; 18
     144:	7f 40       	sbci	r23, 0x0F	; 15
     146:	40 40       	sbci	r20, 0x00	; 0
     148:	40 7f       	andi	r20, 0xF0	; 240
     14a:	02 0c       	add	r0, r2
     14c:	02 7f       	andi	r16, 0xF2	; 242
     14e:	7f 04       	cpc	r7, r15
     150:	08 10       	cpse	r0, r8
     152:	7f 3e       	cpi	r23, 0xEF	; 239
     154:	41 41       	sbci	r20, 0x11	; 17
     156:	41 3e       	cpi	r20, 0xE1	; 225
     158:	7f 09       	sbc	r23, r15
     15a:	09 09       	sbc	r16, r9
     15c:	06 3e       	cpi	r16, 0xE6	; 230
     15e:	41 51       	subi	r20, 0x11	; 17
     160:	21 5e       	subi	r18, 0xE1	; 225
     162:	7f 09       	sbc	r23, r15
     164:	19 29       	or	r17, r9
     166:	46 46       	sbci	r20, 0x66	; 102
     168:	49 49       	sbci	r20, 0x99	; 153
     16a:	49 31       	cpi	r20, 0x19	; 25
     16c:	01 01       	movw	r0, r2
     16e:	7f 01       	movw	r14, r30
     170:	01 3f       	cpi	r16, 0xF1	; 241
     172:	40 40       	sbci	r20, 0x00	; 0
     174:	40 3f       	cpi	r20, 0xF0	; 240
     176:	1f 20       	and	r1, r15
     178:	40 20       	and	r4, r0
     17a:	1f 3f       	cpi	r17, 0xFF	; 255
     17c:	40 38       	cpi	r20, 0x80	; 128
     17e:	40 3f       	cpi	r20, 0xF0	; 240
     180:	63 14       	cp	r6, r3
     182:	08 14       	cp	r0, r8
     184:	63 07       	cpc	r22, r19
     186:	08 70       	andi	r16, 0x08	; 8
     188:	08 07       	cpc	r16, r24
     18a:	61 51       	subi	r22, 0x11	; 17
     18c:	49 45       	sbci	r20, 0x59	; 89
     18e:	43 00       	.word	0x0043	; ????
     190:	7f 41       	sbci	r23, 0x1F	; 31
     192:	41 00       	.word	0x0041	; ????
     194:	02 04       	cpc	r0, r2
     196:	08 10       	cpse	r0, r8
     198:	20 00       	.word	0x0020	; ????
     19a:	41 41       	sbci	r20, 0x11	; 17
     19c:	7f 00       	.word	0x007f	; ????
     19e:	04 02       	muls	r16, r20
     1a0:	01 02       	muls	r16, r17
     1a2:	04 40       	sbci	r16, 0x04	; 4
     1a4:	40 40       	sbci	r20, 0x00	; 0
     1a6:	40 40       	sbci	r20, 0x00	; 0
     1a8:	00 01       	movw	r0, r0
     1aa:	02 04       	cpc	r0, r2
     1ac:	00 20       	and	r0, r0
     1ae:	54 54       	subi	r21, 0x44	; 68
     1b0:	54 78       	andi	r21, 0x84	; 132
     1b2:	7f 48       	sbci	r23, 0x8F	; 143
     1b4:	44 44       	sbci	r20, 0x44	; 68
     1b6:	38 38       	cpi	r19, 0x88	; 136
     1b8:	44 44       	sbci	r20, 0x44	; 68
     1ba:	44 20       	and	r4, r4
     1bc:	38 44       	sbci	r19, 0x48	; 72
     1be:	44 48       	sbci	r20, 0x84	; 132
     1c0:	7f 38       	cpi	r23, 0x8F	; 143
     1c2:	54 54       	subi	r21, 0x44	; 68
     1c4:	54 18       	sub	r5, r4
     1c6:	08 7e       	andi	r16, 0xE8	; 232
     1c8:	09 01       	movw	r0, r18
     1ca:	02 0c       	add	r0, r2
     1cc:	52 52       	subi	r21, 0x22	; 34
     1ce:	52 3e       	cpi	r21, 0xE2	; 226
     1d0:	7f 08       	sbc	r7, r15
     1d2:	04 04       	cpc	r0, r4
     1d4:	78 00       	.word	0x0078	; ????
     1d6:	44 7d       	andi	r20, 0xD4	; 212
     1d8:	40 00       	.word	0x0040	; ????
     1da:	20 40       	sbci	r18, 0x00	; 0
     1dc:	44 3d       	cpi	r20, 0xD4	; 212
     1de:	00 7f       	andi	r16, 0xF0	; 240
     1e0:	10 28       	or	r1, r0
     1e2:	44 00       	.word	0x0044	; ????
     1e4:	00 41       	sbci	r16, 0x10	; 16
     1e6:	7f 40       	sbci	r23, 0x0F	; 15
     1e8:	00 7c       	andi	r16, 0xC0	; 192
     1ea:	04 18       	sub	r0, r4
     1ec:	04 78       	andi	r16, 0x84	; 132
     1ee:	7c 08       	sbc	r7, r12
     1f0:	04 04       	cpc	r0, r4
     1f2:	78 38       	cpi	r23, 0x88	; 136
     1f4:	44 44       	sbci	r20, 0x44	; 68
     1f6:	44 38       	cpi	r20, 0x84	; 132
     1f8:	7c 14       	cp	r7, r12
     1fa:	14 14       	cp	r1, r4
     1fc:	08 08       	sbc	r0, r8
     1fe:	14 14       	cp	r1, r4
     200:	18 7c       	andi	r17, 0xC8	; 200
     202:	7c 08       	sbc	r7, r12
     204:	04 04       	cpc	r0, r4
     206:	08 48       	sbci	r16, 0x88	; 136
     208:	54 54       	subi	r21, 0x44	; 68
     20a:	54 20       	and	r5, r4
     20c:	04 3f       	cpi	r16, 0xF4	; 244
     20e:	44 40       	sbci	r20, 0x04	; 4
     210:	20 3c       	cpi	r18, 0xC0	; 192
     212:	40 40       	sbci	r20, 0x00	; 0
     214:	20 7c       	andi	r18, 0xC0	; 192
     216:	1c 20       	and	r1, r12
     218:	40 20       	and	r4, r0
     21a:	1c 3c       	cpi	r17, 0xCC	; 204
     21c:	40 30       	cpi	r20, 0x00	; 0
     21e:	40 3c       	cpi	r20, 0xC0	; 192
     220:	44 28       	or	r4, r4
     222:	10 28       	or	r1, r0
     224:	44 0c       	add	r4, r4
     226:	50 50       	subi	r21, 0x00	; 0
     228:	50 3c       	cpi	r21, 0xC0	; 192
     22a:	44 64       	ori	r20, 0x44	; 68
     22c:	54 4c       	sbci	r21, 0xC4	; 196
     22e:	44 00       	.word	0x0044	; ????
     230:	08 36       	cpi	r16, 0x68	; 104
     232:	41 00       	.word	0x0041	; ????
     234:	00 00       	nop
     236:	7f 00       	.word	0x007f	; ????
     238:	00 00       	nop
     23a:	41 36       	cpi	r20, 0x61	; 97
     23c:	08 00       	.word	0x0008	; ????
     23e:	08 04       	cpc	r0, r8
     240:	08 10       	cpse	r0, r8
     242:	08 ff       	.word	0xff08	; ????
     244:	ff ff       	.word	0xffff	; ????
     246:	ff ff       	.word	0xffff	; ????
     248:	04 06       	cpc	r0, r20
     24a:	07 06       	cpc	r0, r23
     24c:	04 10       	cpse	r0, r4
     24e:	30 70       	andi	r19, 0x00	; 0
     250:	30 10       	cpse	r3, r0
     252:	7c 12       	cpse	r7, r28
     254:	11 12       	cpse	r1, r17
     256:	7c 7f       	andi	r23, 0xFC	; 252
     258:	49 49       	sbci	r20, 0x99	; 153
     25a:	49 31       	cpi	r20, 0x19	; 25
     25c:	7f 49       	sbci	r23, 0x9F	; 159
     25e:	49 49       	sbci	r20, 0x99	; 153
     260:	36 7f       	andi	r19, 0xF6	; 246
     262:	01 01       	movw	r0, r2
     264:	01 01       	movw	r0, r2
     266:	60 3f       	cpi	r22, 0xF0	; 240
     268:	21 3f       	cpi	r18, 0xF1	; 241
     26a:	60 7f       	andi	r22, 0xF0	; 240
     26c:	49 49       	sbci	r20, 0x99	; 153
     26e:	49 41       	sbci	r20, 0x19	; 25
     270:	77 08       	sbc	r7, r7
     272:	7f 08       	sbc	r7, r15
     274:	77 22       	and	r7, r23
     276:	41 49       	sbci	r20, 0x91	; 145
     278:	49 36       	cpi	r20, 0x69	; 105
     27a:	7f 10       	cpse	r7, r15
     27c:	08 04       	cpc	r0, r8
     27e:	7f 7e       	andi	r23, 0xEF	; 239
     280:	10 09       	sbc	r17, r0
     282:	04 7e       	andi	r16, 0xE4	; 228
     284:	7f 08       	sbc	r7, r15
     286:	14 22       	and	r1, r20
     288:	41 40       	sbci	r20, 0x01	; 1
     28a:	3e 01       	movw	r6, r28
     28c:	01 7f       	andi	r16, 0xF1	; 241
     28e:	7f 02       	muls	r23, r31
     290:	0c 02       	muls	r16, r28
     292:	7f 7f       	andi	r23, 0xFF	; 255
     294:	08 08       	sbc	r0, r8
     296:	08 7f       	andi	r16, 0xF8	; 248
     298:	3e 41       	sbci	r19, 0x1E	; 30
     29a:	41 41       	sbci	r20, 0x11	; 17
     29c:	3e 7f       	andi	r19, 0xFE	; 254
     29e:	01 01       	movw	r0, r2
     2a0:	01 7f       	andi	r16, 0xF1	; 241
     2a2:	7f 09       	sbc	r23, r15
     2a4:	09 09       	sbc	r16, r9
     2a6:	06 3e       	cpi	r16, 0xE6	; 230
     2a8:	41 41       	sbci	r20, 0x11	; 17
     2aa:	41 22       	and	r4, r17
     2ac:	01 01       	movw	r0, r2
     2ae:	7f 01       	movw	r14, r30
     2b0:	01 07       	cpc	r16, r17
     2b2:	48 48       	sbci	r20, 0x88	; 136
     2b4:	48 3f       	cpi	r20, 0xF8	; 248
     2b6:	0e 11       	cpse	r16, r14
     2b8:	7f 11       	cpse	r23, r15
     2ba:	0e 63       	ori	r16, 0x3E	; 62
     2bc:	14 08       	sbc	r1, r4
     2be:	14 63       	ori	r17, 0x34	; 52
     2c0:	3f 20       	and	r3, r15
     2c2:	20 3f       	cpi	r18, 0xF0	; 240
     2c4:	60 07       	cpc	r22, r16
     2c6:	08 08       	sbc	r0, r8
     2c8:	08 7f       	andi	r16, 0xF8	; 248
     2ca:	7f 40       	sbci	r23, 0x0F	; 15
     2cc:	7e 40       	sbci	r23, 0x0E	; 14
     2ce:	7f 3f       	cpi	r23, 0xFF	; 255
     2d0:	20 3f       	cpi	r18, 0xF0	; 240
     2d2:	20 7f       	andi	r18, 0xF0	; 240
     2d4:	01 7f       	andi	r16, 0xF1	; 241
     2d6:	48 48       	sbci	r20, 0x88	; 136
     2d8:	30 7f       	andi	r19, 0xF0	; 240
     2da:	48 30       	cpi	r20, 0x08	; 8
     2dc:	00 7f       	andi	r16, 0xF0	; 240
     2de:	00 7f       	andi	r16, 0xF0	; 240
     2e0:	48 48       	sbci	r20, 0x88	; 136
     2e2:	30 22       	and	r3, r16
     2e4:	41 49       	sbci	r20, 0x91	; 145
     2e6:	49 3e       	cpi	r20, 0xE9	; 233
     2e8:	7f 08       	sbc	r7, r15
     2ea:	3e 41       	sbci	r19, 0x1E	; 30
     2ec:	3e 46       	sbci	r19, 0x6E	; 110
     2ee:	29 19       	sub	r18, r9
     2f0:	09 7f       	andi	r16, 0xF9	; 249
     2f2:	20 54       	subi	r18, 0x40	; 64
     2f4:	54 54       	subi	r21, 0x44	; 68
     2f6:	78 3c       	cpi	r23, 0xC8	; 200
     2f8:	4a 4a       	sbci	r20, 0xAA	; 170
     2fa:	4a 31       	cpi	r20, 0x1A	; 26
     2fc:	7c 54       	subi	r23, 0x4C	; 76
     2fe:	54 28       	or	r5, r4
     300:	00 7c       	andi	r16, 0xC0	; 192
     302:	04 04       	cpc	r0, r4
     304:	0c 00       	.word	0x000c	; ????
     306:	60 3c       	cpi	r22, 0xC0	; 192
     308:	24 3c       	cpi	r18, 0xC4	; 196
     30a:	60 38       	cpi	r22, 0x80	; 128
     30c:	54 54       	subi	r21, 0x44	; 68
     30e:	54 18       	sub	r5, r4
     310:	6c 10       	cpse	r6, r12
     312:	7c 10       	cpse	r7, r12
     314:	6c 00       	.word	0x006c	; ????
     316:	44 54       	subi	r20, 0x44	; 68
     318:	54 28       	or	r5, r4
     31a:	7c 20       	and	r7, r12
     31c:	10 08       	sbc	r1, r0
     31e:	7c 7c       	andi	r23, 0xCC	; 204
     320:	21 12       	cpse	r2, r17
     322:	09 7c       	andi	r16, 0xC9	; 201
     324:	7c 10       	cpse	r7, r12
     326:	28 44       	sbci	r18, 0x48	; 72
     328:	00 40       	sbci	r16, 0x00	; 0
     32a:	38 04       	cpc	r3, r8
     32c:	04 7c       	andi	r16, 0xC4	; 196
     32e:	7c 08       	sbc	r7, r12
     330:	10 08       	sbc	r1, r0
     332:	7c 7c       	andi	r23, 0xCC	; 204
     334:	10 10       	cpse	r1, r0
     336:	10 7c       	andi	r17, 0xC0	; 192
     338:	38 44       	sbci	r19, 0x48	; 72
     33a:	44 44       	sbci	r20, 0x44	; 68
     33c:	38 7c       	andi	r19, 0xC8	; 200
     33e:	04 04       	cpc	r0, r4
     340:	04 7c       	andi	r16, 0xC4	; 196
     342:	7c 14       	cp	r7, r12
     344:	14 14       	cp	r1, r4
     346:	08 38       	cpi	r16, 0x88	; 136
     348:	44 44       	sbci	r20, 0x44	; 68
     34a:	44 00       	.word	0x0044	; ????
     34c:	04 04       	cpc	r0, r4
     34e:	7c 04       	cpc	r7, r12
     350:	04 0c       	add	r0, r4
     352:	50 50       	subi	r21, 0x00	; 0
     354:	50 3c       	cpi	r21, 0xC0	; 192
     356:	08 14       	cp	r0, r8
     358:	7c 14       	cp	r7, r12
     35a:	08 44       	sbci	r16, 0x48	; 72
     35c:	28 10       	cpse	r2, r8
     35e:	28 44       	sbci	r18, 0x48	; 72
     360:	3c 20       	and	r3, r12
     362:	20 3c       	cpi	r18, 0xC0	; 192
     364:	60 0c       	add	r6, r0
     366:	10 10       	cpse	r1, r0
     368:	10 7c       	andi	r17, 0xC0	; 192
     36a:	7c 40       	sbci	r23, 0x0C	; 12
     36c:	7c 40       	sbci	r23, 0x0C	; 12
     36e:	7c 3c       	cpi	r23, 0xCC	; 204
     370:	20 3c       	cpi	r18, 0xC0	; 192
     372:	20 7c       	andi	r18, 0xC0	; 192
     374:	04 7c       	andi	r16, 0xC4	; 196
     376:	50 50       	subi	r21, 0x00	; 0
     378:	20 7c       	andi	r18, 0xC0	; 192
     37a:	50 20       	and	r5, r0
     37c:	00 7c       	andi	r16, 0xC0	; 192
     37e:	00 7c       	andi	r16, 0xC0	; 192
     380:	50 50       	subi	r21, 0x00	; 0
     382:	20 28       	or	r2, r0
     384:	44 54       	subi	r20, 0x44	; 68
     386:	54 38       	cpi	r21, 0x84	; 132
     388:	7c 10       	cpse	r7, r12
     38a:	38 44       	sbci	r19, 0x48	; 72
     38c:	38 48       	sbci	r19, 0x88	; 136
     38e:	54 34       	cpi	r21, 0x44	; 68
     390:	14 7c       	andi	r17, 0xC4	; 196

00000392 <FontLookup>:
     392:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     3a2:	7f 14 7f 14 24 2a 7f 2a 12 4c 2c 10 68 64 36 49     ....$*.*.L,.hd6I
     3b2:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     3c2:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
     3d2:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     3e2:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     3f2:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     402:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     412:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     422:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     432:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     442:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     452:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     462:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     472:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     482:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     492:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     4a2:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     4b2:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     4c2:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     4d2:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     4e2:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     4f2:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     502:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     512:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     522:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     532:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     542:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     552:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     562:	00 00 41 36 08 00 08 04 08 10 08 ff ff ff ff ff     ..A6............
     572:	04 06 07 06 04 10 30 70 30 10 7c 12 11 12 7c 7f     ......0p0.|...|.
     582:	49 49 49 31 7f 49 49 49 36 7f 01 01 01 01 60 3f     III1.III6.....`?
     592:	21 3f 60 7f 49 49 49 41 77 08 7f 08 77 22 41 49     !?`.IIIAw...w"AI
     5a2:	49 36 7f 10 08 04 7f 7e 10 09 04 7e 7f 08 14 22     I6.....~...~..."
     5b2:	41 40 3e 01 01 7f 7f 02 0c 02 7f 7f 08 08 08 7f     A@>.............
     5c2:	3e 41 41 41 3e 7f 01 01 01 7f 7f 09 09 09 06 3e     >AAA>..........>
     5d2:	41 41 41 22 01 01 7f 01 01 07 48 48 48 3f 0e 11     AAA"......HHH?..
     5e2:	7f 11 0e 63 14 08 14 63 3f 20 20 3f 60 07 08 08     ...c...c?  ?`...
     5f2:	08 7f 7f 40 7e 40 7f 3f 20 3f 20 7f 01 7f 48 48     ...@~@.? ? ...HH
     602:	30 7f 48 30 00 7f 00 7f 48 48 30 22 41 49 49 3e     0.H0....HH0"AII>
     612:	7f 08 3e 41 3e 46 29 19 09 7f 20 54 54 54 78 3c     ..>A>F)... TTTx<
     622:	4a 4a 4a 31 7c 54 54 28 00 7c 04 04 0c 00 60 3c     JJJ1|TT(.|....`<
     632:	24 3c 60 38 54 54 54 18 6c 10 7c 10 6c 00 44 54     $<`8TTT.l.|.l.DT
     642:	54 28 7c 20 10 08 7c 7c 21 12 09 7c 7c 10 28 44     T(| ..||!..||.(D
     652:	00 40 38 04 04 7c 7c 08 10 08 7c 7c 10 10 10 7c     .@8..||...||...|
     662:	38 44 44 44 38 7c 04 04 04 7c 7c 14 14 14 08 38     8DDD8|...||....8
     672:	44 44 44 00 04 04 7c 04 04 0c 50 50 50 3c 08 14     DDD...|...PPP<..
     682:	7c 14 08 44 28 10 28 44 3c 20 20 3c 60 0c 10 10     |..D(.(D<  <`...
     692:	10 7c 7c 40 7c 40 7c 3c 20 3c 20 7c 04 7c 50 50     .||@|@|< < |.|PP
     6a2:	20 7c 50 20 00 7c 00 7c 50 50 20 28 44 54 54 38      |P .|.|PP (DTT8
     6b2:	7c 10 38 44 38 48 54 34 14 7c                       |.8D8HT4.|

000006bc <str_nasos>:
     6bc:	d0 9d d0 b0 d1 81 00                                .......

000006c3 <str_temp>:
     6c3:	d0 a2 d0 bc d0 bf 00                                .......

000006ca <str_tn>:
     6ca:	d0 a2 d0 9d 00                                      .....

000006cf <str_vlaz>:
     6cf:	d0 92 d0 bb 00                                      .....

000006d4 <FontLookup>:
     6d4:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     6e4:	7f 14 7f 14 24 2a 7f 2a 12 4c 2c 10 68 64 36 49     ....$*.*.L,.hd6I
     6f4:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     704:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
     714:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     724:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     734:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     744:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     754:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     764:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     774:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     784:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     794:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     7a4:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     7b4:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     7c4:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     7d4:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     7e4:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     7f4:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     804:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     814:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     824:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     834:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     844:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     854:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     864:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     874:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     884:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     894:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     8a4:	00 00 41 36 08 00 08 04 08 10 08 ff ff ff ff ff     ..A6............
     8b4:	04 06 07 06 04 10 30 70 30 10 7c 12 11 12 7c 7f     ......0p0.|...|.
     8c4:	49 49 49 31 7f 49 49 49 36 7f 01 01 01 01 60 3f     III1.III6.....`?
     8d4:	21 3f 60 7f 49 49 49 41 77 08 7f 08 77 22 41 49     !?`.IIIAw...w"AI
     8e4:	49 36 7f 10 08 04 7f 7e 10 09 04 7e 7f 08 14 22     I6.....~...~..."
     8f4:	41 40 3e 01 01 7f 7f 02 0c 02 7f 7f 08 08 08 7f     A@>.............
     904:	3e 41 41 41 3e 7f 01 01 01 7f 7f 09 09 09 06 3e     >AAA>..........>
     914:	41 41 41 22 01 01 7f 01 01 07 48 48 48 3f 0e 11     AAA"......HHH?..
     924:	7f 11 0e 63 14 08 14 63 3f 20 20 3f 60 07 08 08     ...c...c?  ?`...
     934:	08 7f 7f 40 7e 40 7f 3f 20 3f 20 7f 01 7f 48 48     ...@~@.? ? ...HH
     944:	30 7f 48 30 00 7f 00 7f 48 48 30 22 41 49 49 3e     0.H0....HH0"AII>
     954:	7f 08 3e 41 3e 46 29 19 09 7f 20 54 54 54 78 3c     ..>A>F)... TTTx<
     964:	4a 4a 4a 31 7c 54 54 28 00 7c 04 04 0c 00 60 3c     JJJ1|TT(.|....`<
     974:	24 3c 60 38 54 54 54 18 6c 10 7c 10 6c 00 44 54     $<`8TTT.l.|.l.DT
     984:	54 28 7c 20 10 08 7c 7c 21 12 09 7c 7c 10 28 44     T(| ..||!..||.(D
     994:	00 40 38 04 04 7c 7c 08 10 08 7c 7c 10 10 10 7c     .@8..||...||...|
     9a4:	38 44 44 44 38 7c 04 04 04 7c 7c 14 14 14 08 38     8DDD8|...||....8
     9b4:	44 44 44 00 04 04 7c 04 04 0c 50 50 50 3c 08 14     DDD...|...PPP<..
     9c4:	7c 14 08 44 28 10 28 44 3c 20 20 3c 60 0c 10 10     |..D(.(D<  <`...
     9d4:	10 7c 7c 40 7c 40 7c 3c 20 3c 20 7c 04 7c 50 50     .||@|@|< < |.|PP
     9e4:	20 7c 50 20 00 7c 00 7c 50 50 20 28 44 54 54 38      |P .|.|PP (DTT8
     9f4:	7c 10 38 44 38 48 54 34 14 7c                       |.8D8HT4.|

000009fe <__ctors_end>:
     9fe:	11 24       	eor	r1, r1
     a00:	1f be       	out	0x3f, r1	; 63
     a02:	cf ef       	ldi	r28, 0xFF	; 255
     a04:	d8 e0       	ldi	r29, 0x08	; 8
     a06:	de bf       	out	0x3e, r29	; 62
     a08:	cd bf       	out	0x3d, r28	; 61

00000a0a <__do_copy_data>:
     a0a:	11 e0       	ldi	r17, 0x01	; 1
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b1 e0       	ldi	r27, 0x01	; 1
     a10:	e2 e1       	ldi	r30, 0x12	; 18
     a12:	f7 e2       	ldi	r31, 0x27	; 39
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <__do_copy_data+0x10>
     a16:	05 90       	lpm	r0, Z+
     a18:	0d 92       	st	X+, r0
     a1a:	a6 30       	cpi	r26, 0x06	; 6
     a1c:	b1 07       	cpc	r27, r17
     a1e:	d9 f7       	brne	.-10     	; 0xa16 <__do_copy_data+0xc>

00000a20 <__do_clear_bss>:
     a20:	23 e0       	ldi	r18, 0x03	; 3
     a22:	a6 e0       	ldi	r26, 0x06	; 6
     a24:	b1 e0       	ldi	r27, 0x01	; 1
     a26:	01 c0       	rjmp	.+2      	; 0xa2a <.do_clear_bss_start>

00000a28 <.do_clear_bss_loop>:
     a28:	1d 92       	st	X+, r1

00000a2a <.do_clear_bss_start>:
     a2a:	a8 31       	cpi	r26, 0x18	; 24
     a2c:	b2 07       	cpc	r27, r18
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <.do_clear_bss_loop>
     a30:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <main>
     a34:	0c 94 87 13 	jmp	0x270e	; 0x270e <_exit>

00000a38 <__bad_interrupt>:
     a38:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000a3c <_delayFourCycles>:

/*************************************************************************
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	00 d0       	rcall	.+0      	; 0xa42 <_delayFourCycles+0x6>
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
     a46:	9a 83       	std	Y+2, r25	; 0x02
     a48:	89 83       	std	Y+1, r24	; 0x01
    if ( __count == 0 )    
     a4a:	89 81       	ldd	r24, Y+1	; 0x01
     a4c:	9a 81       	ldd	r25, Y+2	; 0x02
     a4e:	89 2b       	or	r24, r25
     a50:	11 f4       	brne	.+4      	; 0xa56 <_delayFourCycles+0x1a>
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
     a52:	00 c0       	rjmp	.+0      	; 0xa54 <_delayFourCycles+0x18>
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
   
}
     a54:	06 c0       	rjmp	.+12     	; 0xa62 <_delayFourCycles+0x26>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     a56:	89 81       	ldd	r24, Y+1	; 0x01
     a58:	9a 81       	ldd	r25, Y+2	; 0x02
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	f1 f7       	brne	.-4      	; 0xa5a <_delayFourCycles+0x1e>
     a5e:	9a 83       	std	Y+2, r25	; 0x02
     a60:	89 83       	std	Y+1, r24	; 0x01
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
   
}
     a62:	00 00       	nop
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	08 95       	ret

00000a6e <micros>:
#include <avr/io.h>
#include "subs.h"
#include "dht11.h"

uint8_t micros(uint8_t init)
{
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	1f 92       	push	r1
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
     a78:	89 83       	std	Y+1, r24	; 0x01
    if (init) {
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	88 23       	and	r24, r24
     a7e:	51 f0       	breq	.+20     	; 0xa94 <micros+0x26>
	TCNT0 = 0;
     a80:	86 e4       	ldi	r24, 0x46	; 70
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	fc 01       	movw	r30, r24
     a86:	10 82       	st	Z, r1
	TCCR0B = 3;	// CK/64 4us
     a88:	85 e4       	ldi	r24, 0x45	; 69
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	23 e0       	ldi	r18, 0x03	; 3
     a8e:	fc 01       	movw	r30, r24
     a90:	20 83       	st	Z, r18
     a92:	04 c0       	rjmp	.+8      	; 0xa9c <micros+0x2e>
    } else
	TCCR0B = 0;	// timer off
     a94:	85 e4       	ldi	r24, 0x45	; 69
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	fc 01       	movw	r30, r24
     a9a:	10 82       	st	Z, r1
    return TCNT0;
     a9c:	86 e4       	ldi	r24, 0x46	; 70
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	fc 01       	movw	r30, r24
     aa2:	80 81       	ld	r24, Z
}
     aa4:	0f 90       	pop	r0
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	08 95       	ret

00000aac <dht11_read>:
// Return values:
// DHTLIB_OK
// DHTLIB_ERROR_CHECKSUM
// DHTLIB_ERROR_TIMEOUT
uint8_t dht11_read(uint8_t *humidity, uint8_t *temperature)
{
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
     ab4:	61 97       	sbiw	r28, 0x11	; 17
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	cd bf       	out	0x3d, r28	; 61
     ac0:	9f 87       	std	Y+15, r25	; 0x0f
     ac2:	8e 87       	std	Y+14, r24	; 0x0e
     ac4:	79 8b       	std	Y+17, r23	; 0x11
     ac6:	68 8b       	std	Y+16, r22	; 0x10
    // BUFFER TO RECEIVE
    uint8_t bits[5];
    uint8_t cnt = 7;
     ac8:	87 e0       	ldi	r24, 0x07	; 7
     aca:	89 83       	std	Y+1, r24	; 0x01
    uint8_t idx = 0;
     acc:	1a 82       	std	Y+2, r1	; 0x02

    // EMPTY BUFFER
    for (int i = 0; i < 5; i++)
     ace:	1c 82       	std	Y+4, r1	; 0x04
     ad0:	1b 82       	std	Y+3, r1	; 0x03
     ad2:	0e c0       	rjmp	.+28     	; 0xaf0 <dht11_read+0x44>
	bits[i] = 0;
     ad4:	9e 01       	movw	r18, r28
     ad6:	27 5f       	subi	r18, 0xF7	; 247
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	8b 81       	ldd	r24, Y+3	; 0x03
     adc:	9c 81       	ldd	r25, Y+4	; 0x04
     ade:	82 0f       	add	r24, r18
     ae0:	93 1f       	adc	r25, r19
     ae2:	fc 01       	movw	r30, r24
     ae4:	10 82       	st	Z, r1
    uint8_t bits[5];
    uint8_t cnt = 7;
    uint8_t idx = 0;

    // EMPTY BUFFER
    for (int i = 0; i < 5; i++)
     ae6:	8b 81       	ldd	r24, Y+3	; 0x03
     ae8:	9c 81       	ldd	r25, Y+4	; 0x04
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	9c 83       	std	Y+4, r25	; 0x04
     aee:	8b 83       	std	Y+3, r24	; 0x03
     af0:	8b 81       	ldd	r24, Y+3	; 0x03
     af2:	9c 81       	ldd	r25, Y+4	; 0x04
     af4:	05 97       	sbiw	r24, 0x05	; 5
     af6:	74 f3       	brlt	.-36     	; 0xad4 <dht11_read+0x28>
	bits[i] = 0;

    // REQUEST SAMPLE
    DHT11_PORT &= ~(1 << DHT11_BIT);	//digitalWrite(pin, LOW);
     af8:	8b e2       	ldi	r24, 0x2B	; 43
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	2b e2       	ldi	r18, 0x2B	; 43
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	f9 01       	movw	r30, r18
     b02:	20 81       	ld	r18, Z
     b04:	2f 7d       	andi	r18, 0xDF	; 223
     b06:	fc 01       	movw	r30, r24
     b08:	20 83       	st	Z, r18
//		DHT11_DDR &= ~(1<<DHT11_BIT); // _/-
    DHT11_DDR |= 1 << DHT11_BIT;		// -\_
     b0a:	8a e2       	ldi	r24, 0x2A	; 42
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	2a e2       	ldi	r18, 0x2A	; 42
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	f9 01       	movw	r30, r18
     b14:	20 81       	ld	r18, Z
     b16:	20 62       	ori	r18, 0x20	; 32
     b18:	fc 01       	movw	r30, r24
     b1a:	20 83       	st	Z, r18
    delay(9000);
     b1c:	80 e5       	ldi	r24, 0x50	; 80
     b1e:	96 e4       	ldi	r25, 0x46	; 70
     b20:	0e 94 1e 05 	call	0xa3c	; 0xa3c <_delayFourCycles>
    delay(9000);
     b24:	80 e5       	ldi	r24, 0x50	; 80
     b26:	96 e4       	ldi	r25, 0x46	; 70
     b28:	0e 94 1e 05 	call	0xa3c	; 0xa3c <_delayFourCycles>
    DHT11_DDR &= ~(1 << DHT11_BIT);	//  _/-
     b2c:	8a e2       	ldi	r24, 0x2A	; 42
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	2a e2       	ldi	r18, 0x2A	; 42
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	f9 01       	movw	r30, r18
     b36:	20 81       	ld	r18, Z
     b38:	2f 7d       	andi	r18, 0xDF	; 223
     b3a:	fc 01       	movw	r30, r24
     b3c:	20 83       	st	Z, r18
    delay(10);
     b3e:	84 e1       	ldi	r24, 0x14	; 20
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 1e 05 	call	0xa3c	; 0xa3c <_delayFourCycles>

    // ACKNOWLEDGE or TIMEOUT
    uint8_t loopCnt = 250;
     b46:	8a ef       	ldi	r24, 0xFA	; 250
     b48:	8d 83       	std	Y+5, r24	; 0x05
    while ((DHT11_PIN & (1 << DHT11_BIT))) {	// _/- wait (20us-1ms)-\_
     b4a:	0c c0       	rjmp	.+24     	; 0xb64 <dht11_read+0xb8>
	if (loopCnt-- == 0)
     b4c:	8d 81       	ldd	r24, Y+5	; 0x05
     b4e:	9f ef       	ldi	r25, 0xFF	; 255
     b50:	98 0f       	add	r25, r24
     b52:	9d 83       	std	Y+5, r25	; 0x05
     b54:	88 23       	and	r24, r24
     b56:	11 f4       	brne	.+4      	; 0xb5c <dht11_read+0xb0>
	    return DHTLIB_ERROR_TIMEOUT;
     b58:	8e ef       	ldi	r24, 0xFE	; 254
     b5a:	cd c0       	rjmp	.+410    	; 0xcf6 <dht11_read+0x24a>
	delay(5);
     b5c:	8a e0       	ldi	r24, 0x0A	; 10
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 1e 05 	call	0xa3c	; 0xa3c <_delayFourCycles>
    DHT11_DDR &= ~(1 << DHT11_BIT);	//  _/-
    delay(10);

    // ACKNOWLEDGE or TIMEOUT
    uint8_t loopCnt = 250;
    while ((DHT11_PIN & (1 << DHT11_BIT))) {	// _/- wait (20us-1ms)-\_
     b64:	89 e2       	ldi	r24, 0x29	; 41
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	fc 01       	movw	r30, r24
     b6a:	80 81       	ld	r24, Z
     b6c:	88 2f       	mov	r24, r24
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	80 72       	andi	r24, 0x20	; 32
     b72:	99 27       	eor	r25, r25
     b74:	89 2b       	or	r24, r25
     b76:	51 f7       	brne	.-44     	; 0xb4c <dht11_read+0xa0>
	if (loopCnt-- == 0)
	    return DHTLIB_ERROR_TIMEOUT;
	delay(5);
    }
    loopCnt = 200;
     b78:	88 ec       	ldi	r24, 0xC8	; 200
     b7a:	8d 83       	std	Y+5, r24	; 0x05
    while (!(DHT11_PIN & (1 << DHT11_BIT))) {	// -\_ wait 80us_/-
     b7c:	0c c0       	rjmp	.+24     	; 0xb96 <dht11_read+0xea>
	if (loopCnt-- == 0)
     b7e:	8d 81       	ldd	r24, Y+5	; 0x05
     b80:	9f ef       	ldi	r25, 0xFF	; 255
     b82:	98 0f       	add	r25, r24
     b84:	9d 83       	std	Y+5, r25	; 0x05
     b86:	88 23       	and	r24, r24
     b88:	11 f4       	brne	.+4      	; 0xb8e <dht11_read+0xe2>
	    return DHTLIB_ERROR_TIMEOUT;
     b8a:	8e ef       	ldi	r24, 0xFE	; 254
     b8c:	b4 c0       	rjmp	.+360    	; 0xcf6 <dht11_read+0x24a>
	delay(1);
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 1e 05 	call	0xa3c	; 0xa3c <_delayFourCycles>
	if (loopCnt-- == 0)
	    return DHTLIB_ERROR_TIMEOUT;
	delay(5);
    }
    loopCnt = 200;
    while (!(DHT11_PIN & (1 << DHT11_BIT))) {	// -\_ wait 80us_/-
     b96:	89 e2       	ldi	r24, 0x29	; 41
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	fc 01       	movw	r30, r24
     b9c:	80 81       	ld	r24, Z
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	80 72       	andi	r24, 0x20	; 32
     ba4:	99 27       	eor	r25, r25
     ba6:	89 2b       	or	r24, r25
     ba8:	51 f3       	breq	.-44     	; 0xb7e <dht11_read+0xd2>
	if (loopCnt-- == 0)
	    return DHTLIB_ERROR_TIMEOUT;
	delay(1);
    }
    loopCnt = 200;
     baa:	88 ec       	ldi	r24, 0xC8	; 200
     bac:	8d 83       	std	Y+5, r24	; 0x05
    while ((DHT11_PIN & (1 << DHT11_BIT))) {	// _/- wait 80us-\_
     bae:	0c c0       	rjmp	.+24     	; 0xbc8 <dht11_read+0x11c>
	if (loopCnt-- == 0)
     bb0:	8d 81       	ldd	r24, Y+5	; 0x05
     bb2:	9f ef       	ldi	r25, 0xFF	; 255
     bb4:	98 0f       	add	r25, r24
     bb6:	9d 83       	std	Y+5, r25	; 0x05
     bb8:	88 23       	and	r24, r24
     bba:	11 f4       	brne	.+4      	; 0xbc0 <dht11_read+0x114>
	    return DHTLIB_ERROR_TIMEOUT;
     bbc:	8e ef       	ldi	r24, 0xFE	; 254
     bbe:	9b c0       	rjmp	.+310    	; 0xcf6 <dht11_read+0x24a>
	delay(1);
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <_delayFourCycles>
	if (loopCnt-- == 0)
	    return DHTLIB_ERROR_TIMEOUT;
	delay(1);
    }
    loopCnt = 200;
    while ((DHT11_PIN & (1 << DHT11_BIT))) {	// _/- wait 80us-\_
     bc8:	89 e2       	ldi	r24, 0x29	; 41
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	fc 01       	movw	r30, r24
     bce:	80 81       	ld	r24, Z
     bd0:	88 2f       	mov	r24, r24
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	80 72       	andi	r24, 0x20	; 32
     bd6:	99 27       	eor	r25, r25
     bd8:	89 2b       	or	r24, r25
     bda:	51 f7       	brne	.-44     	; 0xbb0 <dht11_read+0x104>
	if (loopCnt-- == 0)
	    return DHTLIB_ERROR_TIMEOUT;
	delay(1);
    }
    // READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
    for (int i = 0; i < 40; i++) {
     bdc:	1f 82       	std	Y+7, r1	; 0x07
     bde:	1e 82       	std	Y+6, r1	; 0x06
     be0:	6c c0       	rjmp	.+216    	; 0xcba <dht11_read+0x20e>
	loopCnt = 200;
     be2:	88 ec       	ldi	r24, 0xC8	; 200
     be4:	8d 83       	std	Y+5, r24	; 0x05
	while (!(DHT11_PIN & (1 << DHT11_BIT))) { // wait 50us
     be6:	0c c0       	rjmp	.+24     	; 0xc00 <dht11_read+0x154>
	    if (loopCnt-- == 0)
     be8:	8d 81       	ldd	r24, Y+5	; 0x05
     bea:	9f ef       	ldi	r25, 0xFF	; 255
     bec:	98 0f       	add	r25, r24
     bee:	9d 83       	std	Y+5, r25	; 0x05
     bf0:	88 23       	and	r24, r24
     bf2:	11 f4       	brne	.+4      	; 0xbf8 <dht11_read+0x14c>
		return DHTLIB_ERROR_TIMEOUT;
     bf4:	8e ef       	ldi	r24, 0xFE	; 254
     bf6:	7f c0       	rjmp	.+254    	; 0xcf6 <dht11_read+0x24a>
	    delay(1);
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 1e 05 	call	0xa3c	; 0xa3c <_delayFourCycles>
	delay(1);
    }
    // READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
    for (int i = 0; i < 40; i++) {
	loopCnt = 200;
	while (!(DHT11_PIN & (1 << DHT11_BIT))) { // wait 50us
     c00:	89 e2       	ldi	r24, 0x29	; 41
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	fc 01       	movw	r30, r24
     c06:	80 81       	ld	r24, Z
     c08:	88 2f       	mov	r24, r24
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	80 72       	andi	r24, 0x20	; 32
     c0e:	99 27       	eor	r25, r25
     c10:	89 2b       	or	r24, r25
     c12:	51 f3       	breq	.-44     	; 0xbe8 <dht11_read+0x13c>
	    if (loopCnt-- == 0)
		return DHTLIB_ERROR_TIMEOUT;
	    delay(1);
	}

	micros(1);
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	0e 94 37 05 	call	0xa6e	; 0xa6e <micros>
	loopCnt = 200;
     c1a:	88 ec       	ldi	r24, 0xC8	; 200
     c1c:	8d 83       	std	Y+5, r24	; 0x05
	while ((DHT11_PIN & (1 << DHT11_BIT))) {
     c1e:	0c c0       	rjmp	.+24     	; 0xc38 <dht11_read+0x18c>
	    if (loopCnt-- == 0)
     c20:	8d 81       	ldd	r24, Y+5	; 0x05
     c22:	9f ef       	ldi	r25, 0xFF	; 255
     c24:	98 0f       	add	r25, r24
     c26:	9d 83       	std	Y+5, r25	; 0x05
     c28:	88 23       	and	r24, r24
     c2a:	11 f4       	brne	.+4      	; 0xc30 <dht11_read+0x184>
		return DHTLIB_ERROR_TIMEOUT;
     c2c:	8e ef       	ldi	r24, 0xFE	; 254
     c2e:	63 c0       	rjmp	.+198    	; 0xcf6 <dht11_read+0x24a>
	    delay(1);
     c30:	82 e0       	ldi	r24, 0x02	; 2
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 1e 05 	call	0xa3c	; 0xa3c <_delayFourCycles>
	    delay(1);
	}

	micros(1);
	loopCnt = 200;
	while ((DHT11_PIN & (1 << DHT11_BIT))) {
     c38:	89 e2       	ldi	r24, 0x29	; 41
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	fc 01       	movw	r30, r24
     c3e:	80 81       	ld	r24, Z
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	80 72       	andi	r24, 0x20	; 32
     c46:	99 27       	eor	r25, r25
     c48:	89 2b       	or	r24, r25
     c4a:	51 f7       	brne	.-44     	; 0xc20 <dht11_read+0x174>
	    if (loopCnt-- == 0)
		return DHTLIB_ERROR_TIMEOUT;
	    delay(1);
	}

	if (micros(0) > 12) // 12*4us= 48 us
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	0e 94 37 05 	call	0xa6e	; 0xa6e <micros>
     c52:	8d 30       	cpi	r24, 0x0D	; 13
     c54:	08 f1       	brcs	.+66     	; 0xc98 <dht11_read+0x1ec>
	    bits[idx] |= (1 << cnt);
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	88 2f       	mov	r24, r24
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	2a 81       	ldd	r18, Y+2	; 0x02
     c5e:	22 2f       	mov	r18, r18
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	ae 01       	movw	r20, r28
     c64:	47 5f       	subi	r20, 0xF7	; 247
     c66:	5f 4f       	sbci	r21, 0xFF	; 255
     c68:	24 0f       	add	r18, r20
     c6a:	35 1f       	adc	r19, r21
     c6c:	f9 01       	movw	r30, r18
     c6e:	20 81       	ld	r18, Z
     c70:	62 2f       	mov	r22, r18
     c72:	29 81       	ldd	r18, Y+1	; 0x01
     c74:	42 2f       	mov	r20, r18
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	21 e0       	ldi	r18, 0x01	; 1
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <dht11_read+0x1d6>
     c7e:	22 0f       	add	r18, r18
     c80:	33 1f       	adc	r19, r19
     c82:	4a 95       	dec	r20
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <dht11_read+0x1d2>
     c86:	26 2b       	or	r18, r22
     c88:	42 2f       	mov	r20, r18
     c8a:	9e 01       	movw	r18, r28
     c8c:	27 5f       	subi	r18, 0xF7	; 247
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	82 0f       	add	r24, r18
     c92:	93 1f       	adc	r25, r19
     c94:	fc 01       	movw	r30, r24
     c96:	40 83       	st	Z, r20
	if (cnt == 0)   // next byte?
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	88 23       	and	r24, r24
     c9c:	31 f4       	brne	.+12     	; 0xcaa <dht11_read+0x1fe>
	{
	    cnt = 7;    // restart at MSB
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	89 83       	std	Y+1, r24	; 0x01
	    idx++;      // next byte!
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	8f 5f       	subi	r24, 0xFF	; 255
     ca6:	8a 83       	std	Y+2, r24	; 0x02
     ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <dht11_read+0x204>
	} else
	    cnt--;
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	81 50       	subi	r24, 0x01	; 1
     cae:	89 83       	std	Y+1, r24	; 0x01
	if (loopCnt-- == 0)
	    return DHTLIB_ERROR_TIMEOUT;
	delay(1);
    }
    // READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
    for (int i = 0; i < 40; i++) {
     cb0:	8e 81       	ldd	r24, Y+6	; 0x06
     cb2:	9f 81       	ldd	r25, Y+7	; 0x07
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	9f 83       	std	Y+7, r25	; 0x07
     cb8:	8e 83       	std	Y+6, r24	; 0x06
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	9f 81       	ldd	r25, Y+7	; 0x07
     cbe:	88 97       	sbiw	r24, 0x28	; 40
     cc0:	0c f4       	brge	.+2      	; 0xcc4 <dht11_read+0x218>
     cc2:	8f cf       	rjmp	.-226    	; 0xbe2 <dht11_read+0x136>
	    cnt--;
    }
//PORTC =bits[0];
    // WRITE TO RIGHT VARS
    // as bits[1] and bits[3] are allways zero they are omitted in formulas.
    *humidity = bits[0];
     cc4:	29 85       	ldd	r18, Y+9	; 0x09
     cc6:	8e 85       	ldd	r24, Y+14	; 0x0e
     cc8:	9f 85       	ldd	r25, Y+15	; 0x0f
     cca:	fc 01       	movw	r30, r24
     ccc:	20 83       	st	Z, r18
    *temperature = bits[2];
     cce:	2b 85       	ldd	r18, Y+11	; 0x0b
     cd0:	88 89       	ldd	r24, Y+16	; 0x10
     cd2:	99 89       	ldd	r25, Y+17	; 0x11
     cd4:	fc 01       	movw	r30, r24
     cd6:	20 83       	st	Z, r18

    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
     cd8:	99 85       	ldd	r25, Y+9	; 0x09
     cda:	8a 85       	ldd	r24, Y+10	; 0x0a
     cdc:	98 0f       	add	r25, r24
     cde:	8b 85       	ldd	r24, Y+11	; 0x0b
     ce0:	98 0f       	add	r25, r24
     ce2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ce4:	89 0f       	add	r24, r25
     ce6:	88 87       	std	Y+8, r24	; 0x08

    if (bits[4] != sum)
     ce8:	9d 85       	ldd	r25, Y+13	; 0x0d
     cea:	88 85       	ldd	r24, Y+8	; 0x08
     cec:	98 17       	cp	r25, r24
     cee:	11 f0       	breq	.+4      	; 0xcf4 <dht11_read+0x248>
	return DHTLIB_ERROR_CHECKSUM;
     cf0:	8f ef       	ldi	r24, 0xFF	; 255
     cf2:	01 c0       	rjmp	.+2      	; 0xcf6 <dht11_read+0x24a>
    return DHTLIB_OK;
     cf4:	80 e0       	ldi	r24, 0x00	; 0
}
     cf6:	61 96       	adiw	r28, 0x11	; 17
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	08 95       	ret

00000d08 <_delayFourCycles>:

/*************************************************************************
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <_delayFourCycles+0x6>
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	9a 83       	std	Y+2, r25	; 0x02
     d14:	89 83       	std	Y+1, r24	; 0x01
    if ( __count == 0 )    
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	9a 81       	ldd	r25, Y+2	; 0x02
     d1a:	89 2b       	or	r24, r25
     d1c:	11 f4       	brne	.+4      	; 0xd22 <_delayFourCycles+0x1a>
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
     d1e:	00 c0       	rjmp	.+0      	; 0xd20 <_delayFourCycles+0x18>
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
   
}
     d20:	06 c0       	rjmp	.+12     	; 0xd2e <_delayFourCycles+0x26>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	9a 81       	ldd	r25, Y+2	; 0x02
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <_delayFourCycles+0x1e>
     d2a:	9a 83       	std	Y+2, r25	; 0x02
     d2c:	89 83       	std	Y+1, r24	; 0x01
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
   
}
     d2e:	00 00       	nop
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	08 95       	ret

00000d3a <LcdInit>:
 * Описание              :  Производит инициализацию порта и SPI МК, контроллера LCD
 * Аргумент(ы)           :  Нет
 * Возвращаемое значение :  Нет
 */
void LcdInit ( void )
{
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
    // Pull-up на вывод подключенный к reset дисплея
//    LCD_PORT |= _BV ( LCD_RST_PIN );

    // Устанавливаем нужные биты порта на выход
    LCD_DDR |= /*_BV( LCD_RST_PIN ) |*/ _BV( LCD_DC_PIN ) | _BV( LCD_CE_PIN ) | _BV( SPI_MOSI_PIN ) | _BV( SPI_CLK_PIN );
     d42:	84 e2       	ldi	r24, 0x24	; 36
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	24 e2       	ldi	r18, 0x24	; 36
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	f9 01       	movw	r30, r18
     d4c:	20 81       	ld	r18, Z
     d4e:	2e 62       	ori	r18, 0x2E	; 46
     d50:	fc 01       	movw	r30, r24
     d52:	20 83       	st	Z, r18

    // Некалиброванная задержка
    Delay();
     d54:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Delay>
*/
    // Активируем SPI:
 //   SPCR = SPI_MODE;

    // Отключаем LCD контроллер - высокий уровень на SCE
    LCD_PORT |= _BV( LCD_CE_PIN );
     d58:	85 e2       	ldi	r24, 0x25	; 37
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	25 e2       	ldi	r18, 0x25	; 37
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	f9 01       	movw	r30, r18
     d62:	20 81       	ld	r18, Z
     d64:	24 60       	ori	r18, 0x04	; 4
     d66:	fc 01       	movw	r30, r24
     d68:	20 83       	st	Z, r18

    // Отправляем команды дисплею
    LcdSend( 0x21, LCD_CMD ); // Включаем расширенный набор команд (LCD Extended Commands)
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	81 e2       	ldi	r24, 0x21	; 33
     d6e:	0e 94 72 07 	call	0xee4	; 0xee4 <LcdSend>
    LcdSend( 0xc8, LCD_CMD ); // Установка контрастности (LCD Vop)-c8
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	88 ec       	ldi	r24, 0xC8	; 200
     d76:	0e 94 72 07 	call	0xee4	; 0xee4 <LcdSend>
    LcdSend( 0x06, LCD_CMD ); // Установка температурного коэффициента (Temp coefficent)
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	86 e0       	ldi	r24, 0x06	; 6
     d7e:	0e 94 72 07 	call	0xee4	; 0xee4 <LcdSend>
    LcdSend( 0x13, LCD_CMD ); // Настройка питания (LCD bias mode 1:48)-13
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	83 e1       	ldi	r24, 0x13	; 19
     d86:	0e 94 72 07 	call	0xee4	; 0xee4 <LcdSend>
    LcdSend( 0x20, LCD_CMD ); // Включаем стандартный набор команд и горизонтальную адресацию (LCD Standard Commands,Horizontal addressing mode)
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	80 e2       	ldi	r24, 0x20	; 32
     d8e:	0e 94 72 07 	call	0xee4	; 0xee4 <LcdSend>
    LcdSend( 0x0C, LCD_CMD ); // Нормальный режим (LCD in normal mode)
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	8c e0       	ldi	r24, 0x0C	; 12
     d96:	0e 94 72 07 	call	0xee4	; 0xee4 <LcdSend>

    // Первичная очистка дисплея
    LcdClear();
     d9a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <LcdClear>
    LcdUpdate();
     d9e:	0e 94 f2 06 	call	0xde4	; 0xde4 <LcdUpdate>
}
     da2:	00 00       	nop
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	08 95       	ret

00000daa <LcdClear>:
 * Описание              :  Очищает дисплей. Далее необходимо выполнить LcdUpdate
 * Аргумент(ы)           :  Нет
 * Возвращаемое значение :  Нет
 */
void LcdClear ( void )
{
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
//    {
//        LcdCache[i] = 0x00;
//    }

    // Оптимизация от Jakub Lasinski (March 14 2009)
    memset( LcdCache, 0x00, LCD_CACHE_SIZE );
     db2:	48 ef       	ldi	r20, 0xF8	; 248
     db4:	51 e0       	ldi	r21, 0x01	; 1
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	86 e0       	ldi	r24, 0x06	; 6
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	0e 94 80 13 	call	0x2700	; 0x2700 <memset>
    
    // Сброс указателей границ в максимальное значение
    LoWaterMark = 0;
     dc2:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <LoWaterMark+0x1>
     dc6:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <LoWaterMark>
    HiWaterMark = LCD_CACHE_SIZE - 1;
     dca:	87 ef       	ldi	r24, 0xF7	; 247
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <HiWaterMark+0x1>
     dd2:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <HiWaterMark>

    // Установка флага изменений кэша
    UpdateLcd = TRUE;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <UpdateLcd>
}
     ddc:	00 00       	nop
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	08 95       	ret

00000de4 <LcdUpdate>:
 * Описание              :  Копирует кэш в ОЗУ дисплея
 * Аргумент(ы)           :  Нет
 * Возвращаемое значение :  Нет
 */
void LcdUpdate (void)
{
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	00 d0       	rcall	.+0      	; 0xdea <LcdUpdate+0x6>
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
    int i;

    if ( LoWaterMark < 0 )
     dee:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <LoWaterMark>
     df2:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <LoWaterMark+0x1>
     df6:	99 23       	and	r25, r25
     df8:	2c f4       	brge	.+10     	; 0xe04 <LcdUpdate+0x20>
        LoWaterMark = 0;
     dfa:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <LoWaterMark+0x1>
     dfe:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <LoWaterMark>
     e02:	0d c0       	rjmp	.+26     	; 0xe1e <LcdUpdate+0x3a>
    else if ( LoWaterMark >= LCD_CACHE_SIZE )
     e04:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <LoWaterMark>
     e08:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <LoWaterMark+0x1>
     e0c:	88 3f       	cpi	r24, 0xF8	; 248
     e0e:	91 40       	sbci	r25, 0x01	; 1
     e10:	34 f0       	brlt	.+12     	; 0xe1e <LcdUpdate+0x3a>
        LoWaterMark = LCD_CACHE_SIZE - 1;
     e12:	87 ef       	ldi	r24, 0xF7	; 247
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <LoWaterMark+0x1>
     e1a:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <LoWaterMark>

    if ( HiWaterMark < 0 )
     e1e:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <HiWaterMark>
     e22:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <HiWaterMark+0x1>
     e26:	99 23       	and	r25, r25
     e28:	2c f4       	brge	.+10     	; 0xe34 <LcdUpdate+0x50>
        HiWaterMark = 0;
     e2a:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <HiWaterMark+0x1>
     e2e:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <HiWaterMark>
     e32:	0d c0       	rjmp	.+26     	; 0xe4e <LcdUpdate+0x6a>
    else if ( HiWaterMark >= LCD_CACHE_SIZE )
     e34:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <HiWaterMark>
     e38:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <HiWaterMark+0x1>
     e3c:	88 3f       	cpi	r24, 0xF8	; 248
     e3e:	91 40       	sbci	r25, 0x01	; 1
     e40:	34 f0       	brlt	.+12     	; 0xe4e <LcdUpdate+0x6a>
        HiWaterMark = LCD_CACHE_SIZE - 1;
     e42:	87 ef       	ldi	r24, 0xF7	; 247
     e44:	91 e0       	ldi	r25, 0x01	; 1
     e46:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <HiWaterMark+0x1>
     e4a:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <HiWaterMark>
        LcdSend( 0x20, LCD_CMD );    // Включаем стандартный набор команд и горизонтальную адресацию

    #else  // Алгоритм для оригинального дисплея

        // Устанавливаем начальный адрес в соответствии к LoWaterMark
        LcdSend( 0x80 | ( LoWaterMark % LCD_X_RES ), LCD_CMD );
     e4e:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <LoWaterMark>
     e52:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <LoWaterMark+0x1>
     e56:	24 e5       	ldi	r18, 0x54	; 84
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	b9 01       	movw	r22, r18
     e5c:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
     e60:	80 68       	ori	r24, 0x80	; 128
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	0e 94 72 07 	call	0xee4	; 0xee4 <LcdSend>
        LcdSend( 0x40 | ( LoWaterMark / LCD_X_RES ), LCD_CMD );
     e68:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <LoWaterMark>
     e6c:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <LoWaterMark+0x1>
     e70:	24 e5       	ldi	r18, 0x54	; 84
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	b9 01       	movw	r22, r18
     e76:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
     e7a:	cb 01       	movw	r24, r22
     e7c:	80 64       	ori	r24, 0x40	; 64
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	0e 94 72 07 	call	0xee4	; 0xee4 <LcdSend>

        // Обновляем необходимую часть буфера дисплея
        for ( i = LoWaterMark; i <= HiWaterMark; i++ )
     e84:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <LoWaterMark>
     e88:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <LoWaterMark+0x1>
     e8c:	9a 83       	std	Y+2, r25	; 0x02
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	0e c0       	rjmp	.+28     	; 0xeae <LcdUpdate+0xca>
        {
            // Для оригинального дисплея не нужно следить за адресом в буфере,
            // можно просто последовательно выводить данные
            LcdSend( LcdCache[i], LCD_DATA );
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	8a 5f       	subi	r24, 0xFA	; 250
     e98:	9e 4f       	sbci	r25, 0xFE	; 254
     e9a:	fc 01       	movw	r30, r24
     e9c:	80 81       	ld	r24, Z
     e9e:	61 e0       	ldi	r22, 0x01	; 1
     ea0:	0e 94 72 07 	call	0xee4	; 0xee4 <LcdSend>
        // Устанавливаем начальный адрес в соответствии к LoWaterMark
        LcdSend( 0x80 | ( LoWaterMark % LCD_X_RES ), LCD_CMD );
        LcdSend( 0x40 | ( LoWaterMark / LCD_X_RES ), LCD_CMD );

        // Обновляем необходимую часть буфера дисплея
        for ( i = LoWaterMark; i <= HiWaterMark; i++ )
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	9a 81       	ldd	r25, Y+2	; 0x02
     ea8:	01 96       	adiw	r24, 0x01	; 1
     eaa:	9a 83       	std	Y+2, r25	; 0x02
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <HiWaterMark>
     eb2:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <HiWaterMark+0x1>
     eb6:	29 81       	ldd	r18, Y+1	; 0x01
     eb8:	3a 81       	ldd	r19, Y+2	; 0x02
     eba:	82 17       	cp	r24, r18
     ebc:	93 07       	cpc	r25, r19
     ebe:	4c f7       	brge	.-46     	; 0xe92 <LcdUpdate+0xae>
        }

    #endif

    // Сброс указателей границ в пустоту
    LoWaterMark = LCD_CACHE_SIZE - 1;
     ec0:	87 ef       	ldi	r24, 0xF7	; 247
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <LoWaterMark+0x1>
     ec8:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <LoWaterMark>
    HiWaterMark = 0;
     ecc:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <HiWaterMark+0x1>
     ed0:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <HiWaterMark>

    // Сброс флага изменений кэша
    UpdateLcd = FALSE;
     ed4:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <UpdateLcd>
}
     ed8:	00 00       	nop
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	08 95       	ret

00000ee4 <LcdSend>:
 * Аргумент(ы)           :  data -> данные для отправки
 *                          cd   -> команда или данные (смотри enum в n3310.h)
 * Возвращаемое значение :  Нет
 */
static void LcdSend ( byte data, LcdCmdData cd )
{
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	00 d0       	rcall	.+0      	; 0xeea <LcdSend+0x6>
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	89 83       	std	Y+1, r24	; 0x01
     ef0:	6a 83       	std	Y+2, r22	; 0x02
// Активируем SPI:
	SPCR = SPI_MODE;
     ef2:	8c e4       	ldi	r24, 0x4C	; 76
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	20 e5       	ldi	r18, 0x50	; 80
     ef8:	fc 01       	movw	r30, r24
     efa:	20 83       	st	Z, r18
    // Включаем контроллер дисплея (низкий уровень активный)
    LCD_PORT &= ~( _BV( LCD_CE_PIN ) );
     efc:	85 e2       	ldi	r24, 0x25	; 37
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	25 e2       	ldi	r18, 0x25	; 37
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	f9 01       	movw	r30, r18
     f06:	20 81       	ld	r18, Z
     f08:	2b 7f       	andi	r18, 0xFB	; 251
     f0a:	fc 01       	movw	r30, r24
     f0c:	20 83       	st	Z, r18

    if ( cd == LCD_DATA )
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	51 f4       	brne	.+20     	; 0xf28 <LcdSend+0x44>
    {
        LCD_PORT |= _BV( LCD_DC_PIN );
     f14:	85 e2       	ldi	r24, 0x25	; 37
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	25 e2       	ldi	r18, 0x25	; 37
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	f9 01       	movw	r30, r18
     f1e:	20 81       	ld	r18, Z
     f20:	22 60       	ori	r18, 0x02	; 2
     f22:	fc 01       	movw	r30, r24
     f24:	20 83       	st	Z, r18
     f26:	09 c0       	rjmp	.+18     	; 0xf3a <LcdSend+0x56>
    }
    else
    {
        LCD_PORT &= ~( _BV( LCD_DC_PIN ) );
     f28:	85 e2       	ldi	r24, 0x25	; 37
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	25 e2       	ldi	r18, 0x25	; 37
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	f9 01       	movw	r30, r18
     f32:	20 81       	ld	r18, Z
     f34:	2d 7f       	andi	r18, 0xFD	; 253
     f36:	fc 01       	movw	r30, r24
     f38:	20 83       	st	Z, r18
    }

    // Отправка данных в контроллер дисплея
    SPDR = data;
     f3a:	8e e4       	ldi	r24, 0x4E	; 78
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	29 81       	ldd	r18, Y+1	; 0x01
     f40:	fc 01       	movw	r30, r24
     f42:	20 83       	st	Z, r18

    // Ждем окончания передачи
    while(!(SPSR & (1<<SPIF)));
     f44:	00 00       	nop
     f46:	8d e4       	ldi	r24, 0x4D	; 77
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	fc 01       	movw	r30, r24
     f4c:	80 81       	ld	r24, Z
     f4e:	88 23       	and	r24, r24
     f50:	d4 f7       	brge	.-12     	; 0xf46 <LcdSend+0x62>

    // Отключаем контроллер дисплея
    LCD_PORT |= _BV( LCD_CE_PIN );
     f52:	85 e2       	ldi	r24, 0x25	; 37
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	25 e2       	ldi	r18, 0x25	; 37
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	f9 01       	movw	r30, r18
     f5c:	20 81       	ld	r18, Z
     f5e:	24 60       	ori	r18, 0x04	; 4
     f60:	fc 01       	movw	r30, r24
     f62:	20 83       	st	Z, r18
	SPCR = 0;
     f64:	8c e4       	ldi	r24, 0x4C	; 76
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	fc 01       	movw	r30, r24
     f6a:	10 82       	st	Z, r1
}
     f6c:	00 00       	nop
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	08 95       	ret

00000f78 <LcdContrast>:
 * Описание              :  Устанавливает контрастность дисплея
 * Аргумент(ы)           :  контраст -> значение от 0x00 к 0x7F
 * Возвращаемое значение :  Нет
 */
void LcdContrast ( byte contrast )
{
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	1f 92       	push	r1
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	89 83       	std	Y+1, r24	; 0x01
    LcdSend( 0x21, LCD_CMD );              // Расширенный набор команд
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	81 e2       	ldi	r24, 0x21	; 33
     f88:	0e 94 72 07 	call	0xee4	; 0xee4 <LcdSend>
    LcdSend( 0x80 | contrast, LCD_CMD );   // Установка уровня контрастности
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	80 68       	ori	r24, 0x80	; 128
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	0e 94 72 07 	call	0xee4	; 0xee4 <LcdSend>
    LcdSend( 0x20, LCD_CMD );              // Стандартный набор команд, горизонтальная адресация
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	80 e2       	ldi	r24, 0x20	; 32
     f9a:	0e 94 72 07 	call	0xee4	; 0xee4 <LcdSend>
}
     f9e:	00 00       	nop
     fa0:	0f 90       	pop	r0
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	08 95       	ret

00000fa8 <Delay>:
 * Описание              :  Некалиброванная задержка для процедуры инициализации LCD
 * Аргумент(ы)           :  Нет
 * Возвращаемое значение :  Нет
 */
static void Delay ( void )
{
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
 delay(1);
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 84 06 	call	0xd08	; 0xd08 <_delayFourCycles>
 /*   int i;

    for ( i = -32000; i < 32000; i++ );
*/
}
     fb8:	00 00       	nop
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	08 95       	ret

00000fc0 <LcdGotoXYFont>:
 * Описание              :  Устанавливает курсор в позицию x,y относительно стандартного размера шрифта
 * Аргумент(ы)           :  x,y -> координаты новой позиции курсора. Значения: 0,0 .. 13,5
 * Возвращаемое значение :  смотри возвращаемое значение в n3310.h
 */
byte LcdGotoXYFont ( byte x, byte y )
{
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <LcdGotoXYFont+0x6>
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	6a 83       	std	Y+2, r22	; 0x02
    // Проверка границ
    if( x > 13 || y > 5 ) return OUT_OF_BORDER;
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	8e 30       	cpi	r24, 0x0E	; 14
     fd2:	18 f4       	brcc	.+6      	; 0xfda <LcdGotoXYFont+0x1a>
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	86 30       	cpi	r24, 0x06	; 6
     fd8:	10 f0       	brcs	.+4      	; 0xfde <LcdGotoXYFont+0x1e>
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	1b c0       	rjmp	.+54     	; 0x1014 <LcdGotoXYFont+0x54>

    //  Вычисление указателя. Определен как адрес в пределах 504 байт
    LcdCacheIdx = x * 6 + y * 84;
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	c9 01       	movw	r24, r18
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	82 0f       	add	r24, r18
     fec:	93 1f       	adc	r25, r19
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	ac 01       	movw	r20, r24
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	64 e5       	ldi	r22, 0x54	; 84
     ffc:	62 9f       	mul	r22, r18
     ffe:	c0 01       	movw	r24, r0
    1000:	63 9f       	mul	r22, r19
    1002:	90 0d       	add	r25, r0
    1004:	11 24       	eor	r1, r1
    1006:	84 0f       	add	r24, r20
    1008:	95 1f       	adc	r25, r21
    100a:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <LcdCacheIdx+0x1>
    100e:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <LcdCacheIdx>
    return OK;
    1012:	80 e0       	ldi	r24, 0x00	; 0
}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	08 95       	ret

0000101e <LcdChr>:
 * Аргумент(ы)           :  size -> размер шрифта. Смотри enum в n3310.h
 *                          ch   -> символ для вывода
 * Возвращаемое значение :  смотри возвращаемое значение в n3310lcd.h
 */
byte LcdChr ( LcdFontSize size, byte ch, LcdPixelMode mode)
{
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	2f 97       	sbiw	r28, 0x0f	; 15
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	8d 87       	std	Y+13, r24	; 0x0d
    1034:	6e 87       	std	Y+14, r22	; 0x0e
    1036:	4f 87       	std	Y+15, r20	; 0x0f
    byte i, c;
    byte b1, b2;
    int  tmpIdx;

    if ( LcdCacheIdx < LoWaterMark )
    1038:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <LcdCacheIdx>
    103c:	30 91 03 03 	lds	r19, 0x0303	; 0x800303 <LcdCacheIdx+0x1>
    1040:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <LoWaterMark>
    1044:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <LoWaterMark+0x1>
    1048:	28 17       	cp	r18, r24
    104a:	39 07       	cpc	r19, r25
    104c:	44 f4       	brge	.+16     	; 0x105e <LcdChr+0x40>
    {
        // Обновляем нижнюю границу
        LoWaterMark = LcdCacheIdx;
    104e:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <LcdCacheIdx>
    1052:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <LcdCacheIdx+0x1>
    1056:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <LoWaterMark+0x1>
    105a:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <LoWaterMark>
    }

	if ( (ch >= 0x20) && (ch <= 0x81) )
    105e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1060:	80 32       	cpi	r24, 0x20	; 32
    1062:	38 f0       	brcs	.+14     	; 0x1072 <LcdChr+0x54>
    1064:	8e 85       	ldd	r24, Y+14	; 0x0e
    1066:	82 38       	cpi	r24, 0x82	; 130
    1068:	20 f4       	brcc	.+8      	; 0x1072 <LcdChr+0x54>
    {
        // Смещение в таблице для символов ASCII[0x20-0x7F]
        ch -= 32;
    106a:	8e 85       	ldd	r24, Y+14	; 0x0e
    106c:	80 52       	subi	r24, 0x20	; 32
    106e:	8e 87       	std	Y+14, r24	; 0x0e
    1070:	09 c0       	rjmp	.+18     	; 0x1084 <LcdChr+0x66>
    }
    else if ( ch >= 0xC0 )
    1072:	8e 85       	ldd	r24, Y+14	; 0x0e
    1074:	80 3c       	cpi	r24, 0xC0	; 192
    1076:	20 f0       	brcs	.+8      	; 0x1080 <LcdChr+0x62>
    {
        // Смещение в таблице для символов CP1251[0xC0-0xFF]
        ch -= 94;
    1078:	8e 85       	ldd	r24, Y+14	; 0x0e
    107a:	8e 55       	subi	r24, 0x5E	; 94
    107c:	8e 87       	std	Y+14, r24	; 0x0e
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <LcdChr+0x66>
    }
    else
    {
        // Остальные игнорируем (их просто нет в таблице для экономии памяти)
        ch = 95;
    1080:	8f e5       	ldi	r24, 0x5F	; 95
    1082:	8e 87       	std	Y+14, r24	; 0x0e
    }

    if ( size == FONT_1X )
    1084:	8d 85       	ldd	r24, Y+13	; 0x0d
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	d1 f5       	brne	.+116    	; 0x10fe <LcdChr+0xe0>
    {
        for ( i = 0; i < 5; i++ )
    108a:	19 82       	std	Y+1, r1	; 0x01
    108c:	34 c0       	rjmp	.+104    	; 0x10f6 <LcdChr+0xd8>
        {
            // Копируем вид символа из таблицы в кэш
			c = pgm_read_byte( &(FontLookup[ch][i]) ) << 1;
    108e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	48 2f       	mov	r20, r24
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	c9 01       	movw	r24, r18
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	82 0f       	add	r24, r18
    10a6:	93 1f       	adc	r25, r19
    10a8:	84 0f       	add	r24, r20
    10aa:	95 1f       	adc	r25, r21
    10ac:	88 59       	subi	r24, 0x98	; 152
    10ae:	9f 4f       	sbci	r25, 0xFF	; 255
    10b0:	9b 87       	std	Y+11, r25	; 0x0b
    10b2:	8a 87       	std	Y+10, r24	; 0x0a
    10b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    10b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    10b8:	fc 01       	movw	r30, r24
    10ba:	84 91       	lpm	r24, Z
    10bc:	8c 87       	std	Y+12, r24	; 0x0c
    10be:	8c 85       	ldd	r24, Y+12	; 0x0c
    10c0:	88 0f       	add	r24, r24
    10c2:	8a 83       	std	Y+2, r24	; 0x02
			if(mode) c = ~c;
    10c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c6:	88 23       	and	r24, r24
    10c8:	19 f0       	breq	.+6      	; 0x10d0 <LcdChr+0xb2>
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	80 95       	com	r24
    10ce:	8a 83       	std	Y+2, r24	; 0x02
            LcdCache[LcdCacheIdx++] = c;
    10d0:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <LcdCacheIdx>
    10d4:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <LcdCacheIdx+0x1>
    10d8:	9c 01       	movw	r18, r24
    10da:	2f 5f       	subi	r18, 0xFF	; 255
    10dc:	3f 4f       	sbci	r19, 0xFF	; 255
    10de:	30 93 03 03 	sts	0x0303, r19	; 0x800303 <LcdCacheIdx+0x1>
    10e2:	20 93 02 03 	sts	0x0302, r18	; 0x800302 <LcdCacheIdx>
    10e6:	8a 5f       	subi	r24, 0xFA	; 250
    10e8:	9e 4f       	sbci	r25, 0xFE	; 254
    10ea:	2a 81       	ldd	r18, Y+2	; 0x02
    10ec:	fc 01       	movw	r30, r24
    10ee:	20 83       	st	Z, r18
        ch = 95;
    }

    if ( size == FONT_1X )
    {
        for ( i = 0; i < 5; i++ )
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	8f 5f       	subi	r24, 0xFF	; 255
    10f4:	89 83       	std	Y+1, r24	; 0x01
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	85 30       	cpi	r24, 0x05	; 5
    10fa:	48 f2       	brcs	.-110    	; 0x108e <LcdChr+0x70>
    10fc:	d9 c0       	rjmp	.+434    	; 0x12b0 <LcdChr+0x292>
			c = pgm_read_byte( &(FontLookup[ch][i]) ) << 1;
			if(mode) c = ~c;
            LcdCache[LcdCacheIdx++] = c;
        }
    }
    else if ( size == FONT_2X )
    10fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1100:	82 30       	cpi	r24, 0x02	; 2
    1102:	09 f0       	breq	.+2      	; 0x1106 <LcdChr+0xe8>
    1104:	d5 c0       	rjmp	.+426    	; 0x12b0 <LcdChr+0x292>
    {
        tmpIdx = LcdCacheIdx - 84;
    1106:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <LcdCacheIdx>
    110a:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <LcdCacheIdx+0x1>
    110e:	84 55       	subi	r24, 0x54	; 84
    1110:	91 09       	sbc	r25, r1
    1112:	9c 83       	std	Y+4, r25	; 0x04
    1114:	8b 83       	std	Y+3, r24	; 0x03

        if ( tmpIdx < LoWaterMark )
    1116:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <LoWaterMark>
    111a:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <LoWaterMark+0x1>
    111e:	2b 81       	ldd	r18, Y+3	; 0x03
    1120:	3c 81       	ldd	r19, Y+4	; 0x04
    1122:	28 17       	cp	r18, r24
    1124:	39 07       	cpc	r19, r25
    1126:	34 f4       	brge	.+12     	; 0x1134 <LcdChr+0x116>
        {
            LoWaterMark = tmpIdx;
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	9c 81       	ldd	r25, Y+4	; 0x04
    112c:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <LoWaterMark+0x1>
    1130:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <LoWaterMark>
        }

        if ( tmpIdx < 0 ) return OUT_OF_BORDER;
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	9c 81       	ldd	r25, Y+4	; 0x04
    1138:	99 23       	and	r25, r25
    113a:	14 f4       	brge	.+4      	; 0x1140 <LcdChr+0x122>
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	f2 c0       	rjmp	.+484    	; 0x1324 <LcdChr+0x306>

        for ( i = 0; i < 5; i++ )
    1140:	19 82       	std	Y+1, r1	; 0x01
    1142:	a4 c0       	rjmp	.+328    	; 0x128c <LcdChr+0x26e>
        {
            // Копируем вид символа из таблицы у временную переменную
            c = pgm_read_byte(&(FontLookup[ch][i])) << 1;
    1144:	8e 85       	ldd	r24, Y+14	; 0x0e
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	48 2f       	mov	r20, r24
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	c9 01       	movw	r24, r18
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	82 0f       	add	r24, r18
    115c:	93 1f       	adc	r25, r19
    115e:	84 0f       	add	r24, r20
    1160:	95 1f       	adc	r25, r21
    1162:	88 59       	subi	r24, 0x98	; 152
    1164:	9f 4f       	sbci	r25, 0xFF	; 255
    1166:	9e 83       	std	Y+6, r25	; 0x06
    1168:	8d 83       	std	Y+5, r24	; 0x05
    116a:	8d 81       	ldd	r24, Y+5	; 0x05
    116c:	9e 81       	ldd	r25, Y+6	; 0x06
    116e:	fc 01       	movw	r30, r24
    1170:	84 91       	lpm	r24, Z
    1172:	8f 83       	std	Y+7, r24	; 0x07
    1174:	8f 81       	ldd	r24, Y+7	; 0x07
    1176:	88 0f       	add	r24, r24
    1178:	8a 83       	std	Y+2, r24	; 0x02
			if(mode) c = ~c;
    117a:	8f 85       	ldd	r24, Y+15	; 0x0f
    117c:	88 23       	and	r24, r24
    117e:	19 f0       	breq	.+6      	; 0x1186 <LcdChr+0x168>
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	80 95       	com	r24
    1184:	8a 83       	std	Y+2, r24	; 0x02
            // Увеличиваем картинку
            // Первую часть
            b1 =  (c & 0x01) * 3;
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	98 2f       	mov	r25, r24
    118a:	91 70       	andi	r25, 0x01	; 1
    118c:	89 2f       	mov	r24, r25
    118e:	88 0f       	add	r24, r24
    1190:	89 0f       	add	r24, r25
    1192:	88 87       	std	Y+8, r24	; 0x08
            b1 |= (c & 0x02) * 6;
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	98 2f       	mov	r25, r24
    1198:	92 70       	andi	r25, 0x02	; 2
    119a:	89 2f       	mov	r24, r25
    119c:	88 0f       	add	r24, r24
    119e:	89 0f       	add	r24, r25
    11a0:	88 0f       	add	r24, r24
    11a2:	98 2f       	mov	r25, r24
    11a4:	88 85       	ldd	r24, Y+8	; 0x08
    11a6:	89 2b       	or	r24, r25
    11a8:	88 87       	std	Y+8, r24	; 0x08
            b1 |= (c & 0x04) * 12;
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	98 2f       	mov	r25, r24
    11ae:	94 70       	andi	r25, 0x04	; 4
    11b0:	89 2f       	mov	r24, r25
    11b2:	88 0f       	add	r24, r24
    11b4:	89 0f       	add	r24, r25
    11b6:	88 0f       	add	r24, r24
    11b8:	88 0f       	add	r24, r24
    11ba:	98 2f       	mov	r25, r24
    11bc:	88 85       	ldd	r24, Y+8	; 0x08
    11be:	89 2b       	or	r24, r25
    11c0:	88 87       	std	Y+8, r24	; 0x08
            b1 |= (c & 0x08) * 24;
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	98 2f       	mov	r25, r24
    11c6:	98 70       	andi	r25, 0x08	; 8
    11c8:	88 e1       	ldi	r24, 0x18	; 24
    11ca:	98 9f       	mul	r25, r24
    11cc:	80 2d       	mov	r24, r0
    11ce:	11 24       	eor	r1, r1
    11d0:	98 2f       	mov	r25, r24
    11d2:	88 85       	ldd	r24, Y+8	; 0x08
    11d4:	89 2b       	or	r24, r25
    11d6:	88 87       	std	Y+8, r24	; 0x08

            c >>= 4;
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	82 95       	swap	r24
    11dc:	8f 70       	andi	r24, 0x0F	; 15
    11de:	8a 83       	std	Y+2, r24	; 0x02
            // Вторую часть
            b2 =  (c & 0x01) * 3;
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	98 2f       	mov	r25, r24
    11e4:	91 70       	andi	r25, 0x01	; 1
    11e6:	89 2f       	mov	r24, r25
    11e8:	88 0f       	add	r24, r24
    11ea:	89 0f       	add	r24, r25
    11ec:	89 87       	std	Y+9, r24	; 0x09
            b2 |= (c & 0x02) * 6;
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	98 2f       	mov	r25, r24
    11f2:	92 70       	andi	r25, 0x02	; 2
    11f4:	89 2f       	mov	r24, r25
    11f6:	88 0f       	add	r24, r24
    11f8:	89 0f       	add	r24, r25
    11fa:	88 0f       	add	r24, r24
    11fc:	98 2f       	mov	r25, r24
    11fe:	89 85       	ldd	r24, Y+9	; 0x09
    1200:	89 2b       	or	r24, r25
    1202:	89 87       	std	Y+9, r24	; 0x09
            b2 |= (c & 0x04) * 12;
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	98 2f       	mov	r25, r24
    1208:	94 70       	andi	r25, 0x04	; 4
    120a:	89 2f       	mov	r24, r25
    120c:	88 0f       	add	r24, r24
    120e:	89 0f       	add	r24, r25
    1210:	88 0f       	add	r24, r24
    1212:	88 0f       	add	r24, r24
    1214:	98 2f       	mov	r25, r24
    1216:	89 85       	ldd	r24, Y+9	; 0x09
    1218:	89 2b       	or	r24, r25
    121a:	89 87       	std	Y+9, r24	; 0x09
            b2 |= (c & 0x08) * 24;
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	98 2f       	mov	r25, r24
    1220:	98 70       	andi	r25, 0x08	; 8
    1222:	88 e1       	ldi	r24, 0x18	; 24
    1224:	98 9f       	mul	r25, r24
    1226:	80 2d       	mov	r24, r0
    1228:	11 24       	eor	r1, r1
    122a:	98 2f       	mov	r25, r24
    122c:	89 85       	ldd	r24, Y+9	; 0x09
    122e:	89 2b       	or	r24, r25
    1230:	89 87       	std	Y+9, r24	; 0x09

            // Копируем две части в кэш
            LcdCache[tmpIdx++] = b1;
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	9c 81       	ldd	r25, Y+4	; 0x04
    1236:	9c 01       	movw	r18, r24
    1238:	2f 5f       	subi	r18, 0xFF	; 255
    123a:	3f 4f       	sbci	r19, 0xFF	; 255
    123c:	3c 83       	std	Y+4, r19	; 0x04
    123e:	2b 83       	std	Y+3, r18	; 0x03
    1240:	8a 5f       	subi	r24, 0xFA	; 250
    1242:	9e 4f       	sbci	r25, 0xFE	; 254
    1244:	28 85       	ldd	r18, Y+8	; 0x08
    1246:	fc 01       	movw	r30, r24
    1248:	20 83       	st	Z, r18
            LcdCache[tmpIdx++] = b1;
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	9c 01       	movw	r18, r24
    1250:	2f 5f       	subi	r18, 0xFF	; 255
    1252:	3f 4f       	sbci	r19, 0xFF	; 255
    1254:	3c 83       	std	Y+4, r19	; 0x04
    1256:	2b 83       	std	Y+3, r18	; 0x03
    1258:	8a 5f       	subi	r24, 0xFA	; 250
    125a:	9e 4f       	sbci	r25, 0xFE	; 254
    125c:	28 85       	ldd	r18, Y+8	; 0x08
    125e:	fc 01       	movw	r30, r24
    1260:	20 83       	st	Z, r18
            LcdCache[tmpIdx + 82] = b2;
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	8e 5a       	subi	r24, 0xAE	; 174
    1268:	9f 4f       	sbci	r25, 0xFF	; 255
    126a:	8a 5f       	subi	r24, 0xFA	; 250
    126c:	9e 4f       	sbci	r25, 0xFE	; 254
    126e:	29 85       	ldd	r18, Y+9	; 0x09
    1270:	fc 01       	movw	r30, r24
    1272:	20 83       	st	Z, r18
            LcdCache[tmpIdx + 83] = b2;
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	8d 5a       	subi	r24, 0xAD	; 173
    127a:	9f 4f       	sbci	r25, 0xFF	; 255
    127c:	8a 5f       	subi	r24, 0xFA	; 250
    127e:	9e 4f       	sbci	r25, 0xFE	; 254
    1280:	29 85       	ldd	r18, Y+9	; 0x09
    1282:	fc 01       	movw	r30, r24
    1284:	20 83       	st	Z, r18
            LoWaterMark = tmpIdx;
        }

        if ( tmpIdx < 0 ) return OUT_OF_BORDER;

        for ( i = 0; i < 5; i++ )
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	8f 5f       	subi	r24, 0xFF	; 255
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	85 30       	cpi	r24, 0x05	; 5
    1290:	08 f4       	brcc	.+2      	; 0x1294 <LcdChr+0x276>
    1292:	58 cf       	rjmp	.-336    	; 0x1144 <LcdChr+0x126>
            LcdCache[tmpIdx + 82] = b2;
            LcdCache[tmpIdx + 83] = b2;
        }

        // Обновляем x координату курсора
        LcdCacheIdx = (LcdCacheIdx + 11) % LCD_CACHE_SIZE;
    1294:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <LcdCacheIdx>
    1298:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <LcdCacheIdx+0x1>
    129c:	0b 96       	adiw	r24, 0x0b	; 11
    129e:	28 ef       	ldi	r18, 0xF8	; 248
    12a0:	31 e0       	ldi	r19, 0x01	; 1
    12a2:	b9 01       	movw	r22, r18
    12a4:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodhi4>
    12a8:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <LcdCacheIdx+0x1>
    12ac:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <LcdCacheIdx>
    }

    if ( LcdCacheIdx > HiWaterMark )
    12b0:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <LcdCacheIdx>
    12b4:	30 91 03 03 	lds	r19, 0x0303	; 0x800303 <LcdCacheIdx+0x1>
    12b8:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <HiWaterMark>
    12bc:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <HiWaterMark+0x1>
    12c0:	82 17       	cp	r24, r18
    12c2:	93 07       	cpc	r25, r19
    12c4:	44 f4       	brge	.+16     	; 0x12d6 <LcdChr+0x2b8>
    {
        // Обновляем верхнюю границу
        HiWaterMark = LcdCacheIdx;
    12c6:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <LcdCacheIdx>
    12ca:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <LcdCacheIdx+0x1>
    12ce:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <HiWaterMark+0x1>
    12d2:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <HiWaterMark>
    }

    // Горизонтальный разрыв между символами
	c = 0;
    12d6:	1a 82       	std	Y+2, r1	; 0x02
	if(mode) c = ~c;
    12d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12da:	88 23       	and	r24, r24
    12dc:	19 f0       	breq	.+6      	; 0x12e4 <LcdChr+0x2c6>
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	80 95       	com	r24
    12e2:	8a 83       	std	Y+2, r24	; 0x02
    LcdCache[LcdCacheIdx] = c;
    12e4:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <LcdCacheIdx>
    12e8:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <LcdCacheIdx+0x1>
    12ec:	8a 5f       	subi	r24, 0xFA	; 250
    12ee:	9e 4f       	sbci	r25, 0xFE	; 254
    12f0:	2a 81       	ldd	r18, Y+2	; 0x02
    12f2:	fc 01       	movw	r30, r24
    12f4:	20 83       	st	Z, r18
    // Если достигли позицию указателя LCD_CACHE_SIZE - 1, переходим в начало
    if(LcdCacheIdx == (LCD_CACHE_SIZE - 1) )
    12f6:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <LcdCacheIdx>
    12fa:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <LcdCacheIdx+0x1>
    12fe:	87 3f       	cpi	r24, 0xF7	; 247
    1300:	91 40       	sbci	r25, 0x01	; 1
    1302:	31 f4       	brne	.+12     	; 0x1310 <LcdChr+0x2f2>
    {
        LcdCacheIdx = 0;
    1304:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <LcdCacheIdx+0x1>
    1308:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <LcdCacheIdx>
        return OK_WITH_WRAP;
    130c:	82 e0       	ldi	r24, 0x02	; 2
    130e:	0a c0       	rjmp	.+20     	; 0x1324 <LcdChr+0x306>
    }
    // Иначе просто инкрементируем указатель
    LcdCacheIdx++;
    1310:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <LcdCacheIdx>
    1314:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <LcdCacheIdx+0x1>
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <LcdCacheIdx+0x1>
    131e:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <LcdCacheIdx>
    return OK;
    1322:	80 e0       	ldi	r24, 0x00	; 0
}
    1324:	2f 96       	adiw	r28, 0x0f	; 15
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	08 95       	ret

00001336 <LcdStr>:
 * Аргумент(ы)           :  size      -> размер шрифта. Смотри enum в n3310.h
 *                          dataArray -> массив содержащий строку которую нужно напечатать
 * Возвращаемое значение :  смотри возвращаемое значение в n3310lcd.h
 */
byte LcdStr ( LcdFontSize size, const char *s, LcdPixelMode mode )
{
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	00 d0       	rcall	.+0      	; 0x133e <LcdStr+0x8>
    133e:	00 d0       	rcall	.+0      	; 0x1340 <LcdStr+0xa>
    1340:	00 d0       	rcall	.+0      	; 0x1342 <LcdStr+0xc>
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	8b 83       	std	Y+3, r24	; 0x03
    1348:	7d 83       	std	Y+5, r23	; 0x05
    134a:	6c 83       	std	Y+4, r22	; 0x04
    134c:	4e 83       	std	Y+6, r20	; 0x06
    byte tmpIdx=0;
    134e:	19 82       	std	Y+1, r1	; 0x01
    byte response;
	register char c;
    while( (c = *s++) )
    1350:	0e c0       	rjmp	.+28     	; 0x136e <LcdStr+0x38>
	{
        /* Send char */
		response = LcdChr( size, c, mode );
    1352:	4e 81       	ldd	r20, Y+6	; 0x06
    1354:	61 2f       	mov	r22, r17
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	0e 94 0f 08 	call	0x101e	; 0x101e <LcdChr>
    135c:	8a 83       	std	Y+2, r24	; 0x02
        /* Just in case OUT_OF_BORDER occured */
        /* Dont worry if the signal == OK_WITH_WRAP, the string will
        be wrapped to starting point */
        if( response == OUT_OF_BORDER)
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	11 f4       	brne	.+4      	; 0x1368 <LcdStr+0x32>
            return OUT_OF_BORDER;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	0f c0       	rjmp	.+30     	; 0x1386 <LcdStr+0x50>
        /* Increase index */
		tmpIdx++;
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	8f 5f       	subi	r24, 0xFF	; 255
    136c:	89 83       	std	Y+1, r24	; 0x01
byte LcdStr ( LcdFontSize size, const char *s, LcdPixelMode mode )
{
    byte tmpIdx=0;
    byte response;
	register char c;
    while( (c = *s++) )
    136e:	8c 81       	ldd	r24, Y+4	; 0x04
    1370:	9d 81       	ldd	r25, Y+5	; 0x05
    1372:	9c 01       	movw	r18, r24
    1374:	2f 5f       	subi	r18, 0xFF	; 255
    1376:	3f 4f       	sbci	r19, 0xFF	; 255
    1378:	3d 83       	std	Y+5, r19	; 0x05
    137a:	2c 83       	std	Y+4, r18	; 0x04
    137c:	fc 01       	movw	r30, r24
    137e:	10 81       	ld	r17, Z
    1380:	11 23       	and	r17, r17
    1382:	39 f7       	brne	.-50     	; 0x1352 <LcdStr+0x1c>
        if( response == OUT_OF_BORDER)
            return OUT_OF_BORDER;
        /* Increase index */
		tmpIdx++;
	}
    return OK;
    1384:	80 e0       	ldi	r24, 0x00	; 0
}
    1386:	26 96       	adiw	r28, 0x06	; 6
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	08 95       	ret

0000139a <LcdFStr>:
 * Возвращаемое значение :  смотри возвращаемое значение в n3310lcd.h
 * Пример                :  LcdFStr(FONT_1X, PSTR("Hello World"));
 *                          LcdFStr(FONT_1X, &name_of_string_as_array);
 */
byte LcdFStr ( LcdFontSize size, const byte *dataPtr, LcdPixelMode mode )
{
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	2c 97       	sbiw	r28, 0x0c	; 12
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	89 87       	std	Y+9, r24	; 0x09
    13b0:	7b 87       	std	Y+11, r23	; 0x0b
    13b2:	6a 87       	std	Y+10, r22	; 0x0a
    13b4:	4c 87       	std	Y+12, r20	; 0x0c
    byte c;
    byte response;
    for ( c = pgm_read_byte( dataPtr ); c; ++dataPtr, c = pgm_read_byte( dataPtr ) )
    13b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    13b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    13ba:	9b 83       	std	Y+3, r25	; 0x03
    13bc:	8a 83       	std	Y+2, r24	; 0x02
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	9b 81       	ldd	r25, Y+3	; 0x03
    13c2:	fc 01       	movw	r30, r24
    13c4:	84 91       	lpm	r24, Z
    13c6:	8c 83       	std	Y+4, r24	; 0x04
    13c8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	1b c0       	rjmp	.+54     	; 0x1404 <LcdFStr+0x6a>
    {
        /* Put char */
        response = LcdChr( size, c, mode );
    13ce:	4c 85       	ldd	r20, Y+12	; 0x0c
    13d0:	69 81       	ldd	r22, Y+1	; 0x01
    13d2:	89 85       	ldd	r24, Y+9	; 0x09
    13d4:	0e 94 0f 08 	call	0x101e	; 0x101e <LcdChr>
    13d8:	8d 83       	std	Y+5, r24	; 0x05
        if(response == OUT_OF_BORDER)
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	11 f4       	brne	.+4      	; 0x13e4 <LcdFStr+0x4a>
            return OUT_OF_BORDER;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	14 c0       	rjmp	.+40     	; 0x140c <LcdFStr+0x72>
 */
byte LcdFStr ( LcdFontSize size, const byte *dataPtr, LcdPixelMode mode )
{
    byte c;
    byte response;
    for ( c = pgm_read_byte( dataPtr ); c; ++dataPtr, c = pgm_read_byte( dataPtr ) )
    13e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    13e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	9b 87       	std	Y+11, r25	; 0x0b
    13ec:	8a 87       	std	Y+10, r24	; 0x0a
    13ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    13f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    13f2:	9f 83       	std	Y+7, r25	; 0x07
    13f4:	8e 83       	std	Y+6, r24	; 0x06
    13f6:	8e 81       	ldd	r24, Y+6	; 0x06
    13f8:	9f 81       	ldd	r25, Y+7	; 0x07
    13fa:	fc 01       	movw	r30, r24
    13fc:	84 91       	lpm	r24, Z
    13fe:	88 87       	std	Y+8, r24	; 0x08
    1400:	88 85       	ldd	r24, Y+8	; 0x08
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	88 23       	and	r24, r24
    1408:	11 f7       	brne	.-60     	; 0x13ce <LcdFStr+0x34>
        response = LcdChr( size, c, mode );
        if(response == OUT_OF_BORDER)
            return OUT_OF_BORDER;
    }
	/* Fixed by Jakub Lasinski. Version 0.2.6, March 14, 2009 */
    return OK;
    140a:	80 e0       	ldi	r24, 0x00	; 0
}
    140c:	2c 96       	adiw	r28, 0x0c	; 12
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	08 95       	ret

0000141e <LcdPixel>:
 * Аргумент(ы)           :  x,y  -> абсолютные координаты пикселя
 *                          mode -> Off, On или Xor. Смотри enum в n3310.h
 * Возвращаемое значение :  смотри возвращаемое значение в n3310lcd.h
 */
byte LcdPixel ( byte x, byte y, LcdPixelMode mode )
{
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	27 97       	sbiw	r28, 0x07	; 7
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	8d 83       	std	Y+5, r24	; 0x05
    1434:	6e 83       	std	Y+6, r22	; 0x06
    1436:	4f 83       	std	Y+7, r20	; 0x07
    int  index;
    byte  offset;
    byte  data;

    // Защита от выхода за пределы
    if ( x >= LCD_X_RES || y >= LCD_Y_RES) return OUT_OF_BORDER;
    1438:	8d 81       	ldd	r24, Y+5	; 0x05
    143a:	84 35       	cpi	r24, 0x54	; 84
    143c:	18 f4       	brcc	.+6      	; 0x1444 <LcdPixel+0x26>
    143e:	8e 81       	ldd	r24, Y+6	; 0x06
    1440:	80 33       	cpi	r24, 0x30	; 48
    1442:	10 f0       	brcs	.+4      	; 0x1448 <LcdPixel+0x2a>
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	82 c0       	rjmp	.+260    	; 0x154c <LcdPixel+0x12e>

    // Пересчет индекса и смещения
    index = ( ( y / 8 ) * 84 ) + x;
    1448:	8e 81       	ldd	r24, Y+6	; 0x06
    144a:	86 95       	lsr	r24
    144c:	86 95       	lsr	r24
    144e:	86 95       	lsr	r24
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	44 e5       	ldi	r20, 0x54	; 84
    1456:	48 9f       	mul	r20, r24
    1458:	90 01       	movw	r18, r0
    145a:	49 9f       	mul	r20, r25
    145c:	30 0d       	add	r19, r0
    145e:	11 24       	eor	r1, r1
    1460:	8d 81       	ldd	r24, Y+5	; 0x05
    1462:	88 2f       	mov	r24, r24
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	82 0f       	add	r24, r18
    1468:	93 1f       	adc	r25, r19
    146a:	9b 83       	std	Y+3, r25	; 0x03
    146c:	8a 83       	std	Y+2, r24	; 0x02
    offset  = y - ( ( y / 8 ) * 8 );
    146e:	8e 81       	ldd	r24, Y+6	; 0x06
    1470:	86 95       	lsr	r24
    1472:	86 95       	lsr	r24
    1474:	86 95       	lsr	r24
    1476:	88 0f       	add	r24, r24
    1478:	88 0f       	add	r24, r24
    147a:	88 0f       	add	r24, r24
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	29 2f       	mov	r18, r25
    1480:	28 1b       	sub	r18, r24
    1482:	82 2f       	mov	r24, r18
    1484:	8c 83       	std	Y+4, r24	; 0x04

    data = LcdCache[ index ];
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	9b 81       	ldd	r25, Y+3	; 0x03
    148a:	8a 5f       	subi	r24, 0xFA	; 250
    148c:	9e 4f       	sbci	r25, 0xFE	; 254
    148e:	fc 01       	movw	r30, r24
    1490:	80 81       	ld	r24, Z
    1492:	89 83       	std	Y+1, r24	; 0x01

    // Обработка битов

    // Режим PIXEL_OFF
    if ( mode == PIXEL_OFF )
    1494:	8f 81       	ldd	r24, Y+7	; 0x07
    1496:	88 23       	and	r24, r24
    1498:	81 f4       	brne	.+32     	; 0x14ba <LcdPixel+0x9c>
    {
        data &= ( ~( 0x01 << offset ) );
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <LcdPixel+0x8c>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	2a 95       	dec	r18
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <LcdPixel+0x88>
    14ae:	98 2f       	mov	r25, r24
    14b0:	90 95       	com	r25
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	89 23       	and	r24, r25
    14b6:	89 83       	std	Y+1, r24	; 0x01
    14b8:	23 c0       	rjmp	.+70     	; 0x1500 <LcdPixel+0xe2>
    }
    // Режим PIXEL_ON
    else if ( mode == PIXEL_ON )
    14ba:	8f 81       	ldd	r24, Y+7	; 0x07
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	79 f4       	brne	.+30     	; 0x14de <LcdPixel+0xc0>
    {
        data |= ( 0x01 << offset );
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <LcdPixel+0xb2>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	2a 95       	dec	r18
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <LcdPixel+0xae>
    14d4:	98 2f       	mov	r25, r24
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	89 2b       	or	r24, r25
    14da:	89 83       	std	Y+1, r24	; 0x01
    14dc:	11 c0       	rjmp	.+34     	; 0x1500 <LcdPixel+0xe2>
    }
    // Режим PIXEL_XOR
    else if ( mode  == PIXEL_XOR )
    14de:	8f 81       	ldd	r24, Y+7	; 0x07
    14e0:	82 30       	cpi	r24, 0x02	; 2
    14e2:	71 f4       	brne	.+28     	; 0x1500 <LcdPixel+0xe2>
    {
        data ^= ( 0x01 << offset );
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <LcdPixel+0xd6>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	2a 95       	dec	r18
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <LcdPixel+0xd2>
    14f8:	98 2f       	mov	r25, r24
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	89 27       	eor	r24, r25
    14fe:	89 83       	std	Y+1, r24	; 0x01
    }

    // Окончательный результат копируем в кэш
    LcdCache[ index ] = data;
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	9b 81       	ldd	r25, Y+3	; 0x03
    1504:	8a 5f       	subi	r24, 0xFA	; 250
    1506:	9e 4f       	sbci	r25, 0xFE	; 254
    1508:	29 81       	ldd	r18, Y+1	; 0x01
    150a:	fc 01       	movw	r30, r24
    150c:	20 83       	st	Z, r18

    if ( index < LoWaterMark )
    150e:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <LoWaterMark>
    1512:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <LoWaterMark+0x1>
    1516:	2a 81       	ldd	r18, Y+2	; 0x02
    1518:	3b 81       	ldd	r19, Y+3	; 0x03
    151a:	28 17       	cp	r18, r24
    151c:	39 07       	cpc	r19, r25
    151e:	34 f4       	brge	.+12     	; 0x152c <LcdPixel+0x10e>
    {
        // Обновляем нижнюю границу
        LoWaterMark = index;
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	9b 81       	ldd	r25, Y+3	; 0x03
    1524:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <LoWaterMark+0x1>
    1528:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <LoWaterMark>
    }

    if ( index > HiWaterMark )
    152c:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <HiWaterMark>
    1530:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <HiWaterMark+0x1>
    1534:	2a 81       	ldd	r18, Y+2	; 0x02
    1536:	3b 81       	ldd	r19, Y+3	; 0x03
    1538:	82 17       	cp	r24, r18
    153a:	93 07       	cpc	r25, r19
    153c:	34 f4       	brge	.+12     	; 0x154a <LcdPixel+0x12c>
    {
        // Обновляем верхнюю границу
        HiWaterMark = index;
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	9b 81       	ldd	r25, Y+3	; 0x03
    1542:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <HiWaterMark+0x1>
    1546:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <HiWaterMark>
    }
    return OK;
    154a:	80 e0       	ldi	r24, 0x00	; 0
}
    154c:	27 96       	adiw	r28, 0x07	; 7
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	08 95       	ret

0000155e <LcdLine>:
 *                          x2, y2  -> абсолютные координаты конца линии
 *                          mode    -> Off, On или Xor. Смотри enum в n3310.h
 * Возвращаемое значение :  смотри возвращаемое значение в n3310lcd.h
 */
byte LcdLine ( byte x1, byte y1, byte x2, byte y2, LcdPixelMode mode )
{
    155e:	0f 93       	push	r16
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	60 97       	sbiw	r28, 0x10	; 16
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	8c 87       	std	Y+12, r24	; 0x0c
    1576:	6d 87       	std	Y+13, r22	; 0x0d
    1578:	4e 87       	std	Y+14, r20	; 0x0e
    157a:	2f 87       	std	Y+15, r18	; 0x0f
    157c:	08 8b       	std	Y+16, r16	; 0x10

    // dy   y2 - y1
    // -- = -------
    // dx   x2 - x1

    dy = y2 - y1;
    157e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	8d 85       	ldd	r24, Y+13	; 0x0d
    1586:	88 2f       	mov	r24, r24
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	a9 01       	movw	r20, r18
    158c:	48 1b       	sub	r20, r24
    158e:	59 0b       	sbc	r21, r25
    1590:	ca 01       	movw	r24, r20
    1592:	9c 83       	std	Y+4, r25	; 0x04
    1594:	8b 83       	std	Y+3, r24	; 0x03
    dx = x2 - x1;
    1596:	8e 85       	ldd	r24, Y+14	; 0x0e
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	8c 85       	ldd	r24, Y+12	; 0x0c
    159e:	88 2f       	mov	r24, r24
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	a9 01       	movw	r20, r18
    15a4:	48 1b       	sub	r20, r24
    15a6:	59 0b       	sbc	r21, r25
    15a8:	ca 01       	movw	r24, r20
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	89 83       	std	Y+1, r24	; 0x01

    // dy отрицательное
    if ( dy < 0 )
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	99 23       	and	r25, r25
    15b4:	64 f4       	brge	.+24     	; 0x15ce <LcdLine+0x70>
    {
        dy    = -dy;
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	91 95       	neg	r25
    15bc:	81 95       	neg	r24
    15be:	91 09       	sbc	r25, r1
    15c0:	9c 83       	std	Y+4, r25	; 0x04
    15c2:	8b 83       	std	Y+3, r24	; 0x03
        stepy = -1;
    15c4:	8f ef       	ldi	r24, 0xFF	; 255
    15c6:	9f ef       	ldi	r25, 0xFF	; 255
    15c8:	98 87       	std	Y+8, r25	; 0x08
    15ca:	8f 83       	std	Y+7, r24	; 0x07
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <LcdLine+0x78>
    }
    else
    {
        stepy = 1;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	98 87       	std	Y+8, r25	; 0x08
    15d4:	8f 83       	std	Y+7, r24	; 0x07
    }

    // dx отрицательное
    if ( dx < 0 )
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	99 23       	and	r25, r25
    15dc:	64 f4       	brge	.+24     	; 0x15f6 <LcdLine+0x98>
    {
        dx    = -dx;
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	9a 81       	ldd	r25, Y+2	; 0x02
    15e2:	91 95       	neg	r25
    15e4:	81 95       	neg	r24
    15e6:	91 09       	sbc	r25, r1
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	89 83       	std	Y+1, r24	; 0x01
        stepx = -1;
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	9f ef       	ldi	r25, 0xFF	; 255
    15f0:	9e 83       	std	Y+6, r25	; 0x06
    15f2:	8d 83       	std	Y+5, r24	; 0x05
    15f4:	04 c0       	rjmp	.+8      	; 0x15fe <LcdLine+0xa0>
    }
    else
    {
        stepx = 1;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	9e 83       	std	Y+6, r25	; 0x06
    15fc:	8d 83       	std	Y+5, r24	; 0x05
    }

    dx <<= 1;
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	9a 81       	ldd	r25, Y+2	; 0x02
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	9a 83       	std	Y+2, r25	; 0x02
    1608:	89 83       	std	Y+1, r24	; 0x01
    dy <<= 1;
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	9c 81       	ldd	r25, Y+4	; 0x04
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	9c 83       	std	Y+4, r25	; 0x04
    1614:	8b 83       	std	Y+3, r24	; 0x03

    // Рисуем начальную точку
    response = LcdPixel( x1, y1, mode );
    1616:	48 89       	ldd	r20, Y+16	; 0x10
    1618:	6d 85       	ldd	r22, Y+13	; 0x0d
    161a:	8c 85       	ldd	r24, Y+12	; 0x0c
    161c:	0e 94 0f 0a 	call	0x141e	; 0x141e <LcdPixel>
    1620:	8b 87       	std	Y+11, r24	; 0x0b
    if(response)
    1622:	8b 85       	ldd	r24, Y+11	; 0x0b
    1624:	88 23       	and	r24, r24
    1626:	11 f0       	breq	.+4      	; 0x162c <LcdLine+0xce>
        return response;
    1628:	8b 85       	ldd	r24, Y+11	; 0x0b
    162a:	80 c0       	rjmp	.+256    	; 0x172c <LcdLine+0x1ce>

    // Рисуем следующие точки до конца
    if ( dx > dy )
    162c:	29 81       	ldd	r18, Y+1	; 0x01
    162e:	3a 81       	ldd	r19, Y+2	; 0x02
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	82 17       	cp	r24, r18
    1636:	93 07       	cpc	r25, r19
    1638:	dc f5       	brge	.+118    	; 0x16b0 <LcdLine+0x152>
    {
        fraction = dy - ( dx >> 1);
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	9a 81       	ldd	r25, Y+2	; 0x02
    163e:	95 95       	asr	r25
    1640:	87 95       	ror	r24
    1642:	2b 81       	ldd	r18, Y+3	; 0x03
    1644:	3c 81       	ldd	r19, Y+4	; 0x04
    1646:	a9 01       	movw	r20, r18
    1648:	48 1b       	sub	r20, r24
    164a:	59 0b       	sbc	r21, r25
    164c:	ca 01       	movw	r24, r20
    164e:	9a 87       	std	Y+10, r25	; 0x0a
    1650:	89 87       	std	Y+9, r24	; 0x09
        while ( x1 != x2 )
    1652:	29 c0       	rjmp	.+82     	; 0x16a6 <LcdLine+0x148>
        {
            if ( fraction >= 0 )
    1654:	89 85       	ldd	r24, Y+9	; 0x09
    1656:	9a 85       	ldd	r25, Y+10	; 0x0a
    1658:	99 23       	and	r25, r25
    165a:	74 f0       	brlt	.+28     	; 0x1678 <LcdLine+0x11a>
            {
                y1 += stepy;
    165c:	8f 81       	ldd	r24, Y+7	; 0x07
    165e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1660:	89 0f       	add	r24, r25
    1662:	8d 87       	std	Y+13, r24	; 0x0d
                fraction -= dx;
    1664:	29 85       	ldd	r18, Y+9	; 0x09
    1666:	3a 85       	ldd	r19, Y+10	; 0x0a
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	9a 81       	ldd	r25, Y+2	; 0x02
    166c:	a9 01       	movw	r20, r18
    166e:	48 1b       	sub	r20, r24
    1670:	59 0b       	sbc	r21, r25
    1672:	ca 01       	movw	r24, r20
    1674:	9a 87       	std	Y+10, r25	; 0x0a
    1676:	89 87       	std	Y+9, r24	; 0x09
            }
            x1 += stepx;
    1678:	8d 81       	ldd	r24, Y+5	; 0x05
    167a:	9c 85       	ldd	r25, Y+12	; 0x0c
    167c:	89 0f       	add	r24, r25
    167e:	8c 87       	std	Y+12, r24	; 0x0c
            fraction += dy;
    1680:	29 85       	ldd	r18, Y+9	; 0x09
    1682:	3a 85       	ldd	r19, Y+10	; 0x0a
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	82 0f       	add	r24, r18
    168a:	93 1f       	adc	r25, r19
    168c:	9a 87       	std	Y+10, r25	; 0x0a
    168e:	89 87       	std	Y+9, r24	; 0x09

            response = LcdPixel( x1, y1, mode );
    1690:	48 89       	ldd	r20, Y+16	; 0x10
    1692:	6d 85       	ldd	r22, Y+13	; 0x0d
    1694:	8c 85       	ldd	r24, Y+12	; 0x0c
    1696:	0e 94 0f 0a 	call	0x141e	; 0x141e <LcdPixel>
    169a:	8b 87       	std	Y+11, r24	; 0x0b
            if(response)
    169c:	8b 85       	ldd	r24, Y+11	; 0x0b
    169e:	88 23       	and	r24, r24
    16a0:	11 f0       	breq	.+4      	; 0x16a6 <LcdLine+0x148>
                return response;
    16a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    16a4:	43 c0       	rjmp	.+134    	; 0x172c <LcdLine+0x1ce>

    // Рисуем следующие точки до конца
    if ( dx > dy )
    {
        fraction = dy - ( dx >> 1);
        while ( x1 != x2 )
    16a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    16a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    16aa:	98 17       	cp	r25, r24
    16ac:	99 f6       	brne	.-90     	; 0x1654 <LcdLine+0xf6>
    16ae:	3a c0       	rjmp	.+116    	; 0x1724 <LcdLine+0x1c6>

        }
    }
    else
    {
        fraction = dx - ( dy >> 1);
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	95 95       	asr	r25
    16b6:	87 95       	ror	r24
    16b8:	29 81       	ldd	r18, Y+1	; 0x01
    16ba:	3a 81       	ldd	r19, Y+2	; 0x02
    16bc:	a9 01       	movw	r20, r18
    16be:	48 1b       	sub	r20, r24
    16c0:	59 0b       	sbc	r21, r25
    16c2:	ca 01       	movw	r24, r20
    16c4:	9a 87       	std	Y+10, r25	; 0x0a
    16c6:	89 87       	std	Y+9, r24	; 0x09
        while ( y1 != y2 )
    16c8:	29 c0       	rjmp	.+82     	; 0x171c <LcdLine+0x1be>
        {
            if ( fraction >= 0 )
    16ca:	89 85       	ldd	r24, Y+9	; 0x09
    16cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ce:	99 23       	and	r25, r25
    16d0:	74 f0       	brlt	.+28     	; 0x16ee <LcdLine+0x190>
            {
                x1 += stepx;
    16d2:	8d 81       	ldd	r24, Y+5	; 0x05
    16d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    16d6:	89 0f       	add	r24, r25
    16d8:	8c 87       	std	Y+12, r24	; 0x0c
                fraction -= dy;
    16da:	29 85       	ldd	r18, Y+9	; 0x09
    16dc:	3a 85       	ldd	r19, Y+10	; 0x0a
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	9c 81       	ldd	r25, Y+4	; 0x04
    16e2:	a9 01       	movw	r20, r18
    16e4:	48 1b       	sub	r20, r24
    16e6:	59 0b       	sbc	r21, r25
    16e8:	ca 01       	movw	r24, r20
    16ea:	9a 87       	std	Y+10, r25	; 0x0a
    16ec:	89 87       	std	Y+9, r24	; 0x09
            }
            y1 += stepy;
    16ee:	8f 81       	ldd	r24, Y+7	; 0x07
    16f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    16f2:	89 0f       	add	r24, r25
    16f4:	8d 87       	std	Y+13, r24	; 0x0d
            fraction += dx;
    16f6:	29 85       	ldd	r18, Y+9	; 0x09
    16f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	9a 81       	ldd	r25, Y+2	; 0x02
    16fe:	82 0f       	add	r24, r18
    1700:	93 1f       	adc	r25, r19
    1702:	9a 87       	std	Y+10, r25	; 0x0a
    1704:	89 87       	std	Y+9, r24	; 0x09

            response = LcdPixel( x1, y1, mode );
    1706:	48 89       	ldd	r20, Y+16	; 0x10
    1708:	6d 85       	ldd	r22, Y+13	; 0x0d
    170a:	8c 85       	ldd	r24, Y+12	; 0x0c
    170c:	0e 94 0f 0a 	call	0x141e	; 0x141e <LcdPixel>
    1710:	8b 87       	std	Y+11, r24	; 0x0b
            if(response)
    1712:	8b 85       	ldd	r24, Y+11	; 0x0b
    1714:	88 23       	and	r24, r24
    1716:	11 f0       	breq	.+4      	; 0x171c <LcdLine+0x1be>
                return response;
    1718:	8b 85       	ldd	r24, Y+11	; 0x0b
    171a:	08 c0       	rjmp	.+16     	; 0x172c <LcdLine+0x1ce>
        }
    }
    else
    {
        fraction = dx - ( dy >> 1);
        while ( y1 != y2 )
    171c:	9d 85       	ldd	r25, Y+13	; 0x0d
    171e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1720:	98 17       	cp	r25, r24
    1722:	99 f6       	brne	.-90     	; 0x16ca <LcdLine+0x16c>
                return response;
        }
    }

    // Установка флага изменений кэша
    UpdateLcd = TRUE;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <UpdateLcd>
    return OK;
    172a:	80 e0       	ldi	r24, 0x00	; 0
}
    172c:	60 96       	adiw	r28, 0x10	; 16
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	de bf       	out	0x3e, r29	; 62
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	cd bf       	out	0x3d, r28	; 61
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	0f 91       	pop	r16
    173e:	08 95       	ret

00001740 <LcdCircle>:
 *                          radius -> радиус окружности
 *                          mode   -> Off, On или Xor. Смотри enum в n3310.h
 * Возвращаемое значение :  смотри возвращаемое значение в n3310lcd.h
 */
byte LcdCircle(byte x, byte y, byte radius, LcdPixelMode mode)
{
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	27 97       	sbiw	r28, 0x07	; 7
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	8c 83       	std	Y+4, r24	; 0x04
    1756:	6d 83       	std	Y+5, r22	; 0x05
    1758:	4e 83       	std	Y+6, r20	; 0x06
    175a:	2f 83       	std	Y+7, r18	; 0x07
    signed char xc = 0;
    175c:	19 82       	std	Y+1, r1	; 0x01
    signed char yc = 0;
    175e:	1a 82       	std	Y+2, r1	; 0x02
    signed char p = 0;
    1760:	1b 82       	std	Y+3, r1	; 0x03

    if ( x >= LCD_X_RES || y >= LCD_Y_RES) return OUT_OF_BORDER;
    1762:	8c 81       	ldd	r24, Y+4	; 0x04
    1764:	84 35       	cpi	r24, 0x54	; 84
    1766:	18 f4       	brcc	.+6      	; 0x176e <LcdCircle+0x2e>
    1768:	8d 81       	ldd	r24, Y+5	; 0x05
    176a:	80 33       	cpi	r24, 0x30	; 48
    176c:	10 f0       	brcs	.+4      	; 0x1772 <LcdCircle+0x32>
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	a2 c0       	rjmp	.+324    	; 0x18b6 <LcdCircle+0x176>

    yc = radius;
    1772:	8e 81       	ldd	r24, Y+6	; 0x06
    1774:	8a 83       	std	Y+2, r24	; 0x02
    p = 3 - (radius<<1);
    1776:	8e 81       	ldd	r24, Y+6	; 0x06
    1778:	88 0f       	add	r24, r24
    177a:	93 e0       	ldi	r25, 0x03	; 3
    177c:	29 2f       	mov	r18, r25
    177e:	28 1b       	sub	r18, r24
    1780:	82 2f       	mov	r24, r18
    1782:	8b 83       	std	Y+3, r24	; 0x03
    while (xc <= yc)  
    1784:	8f c0       	rjmp	.+286    	; 0x18a4 <LcdCircle+0x164>
    {
        LcdPixel(x + xc, y + yc, mode);
    1786:	9a 81       	ldd	r25, Y+2	; 0x02
    1788:	8d 81       	ldd	r24, Y+5	; 0x05
    178a:	29 2f       	mov	r18, r25
    178c:	28 0f       	add	r18, r24
    178e:	99 81       	ldd	r25, Y+1	; 0x01
    1790:	8c 81       	ldd	r24, Y+4	; 0x04
    1792:	89 0f       	add	r24, r25
    1794:	4f 81       	ldd	r20, Y+7	; 0x07
    1796:	62 2f       	mov	r22, r18
    1798:	0e 94 0f 0a 	call	0x141e	; 0x141e <LcdPixel>
        LcdPixel(x + xc, y - yc, mode);
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	9d 81       	ldd	r25, Y+5	; 0x05
    17a0:	29 2f       	mov	r18, r25
    17a2:	28 1b       	sub	r18, r24
    17a4:	99 81       	ldd	r25, Y+1	; 0x01
    17a6:	8c 81       	ldd	r24, Y+4	; 0x04
    17a8:	89 0f       	add	r24, r25
    17aa:	4f 81       	ldd	r20, Y+7	; 0x07
    17ac:	62 2f       	mov	r22, r18
    17ae:	0e 94 0f 0a 	call	0x141e	; 0x141e <LcdPixel>
        LcdPixel(x - xc, y + yc, mode);
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	8d 81       	ldd	r24, Y+5	; 0x05
    17b6:	29 2f       	mov	r18, r25
    17b8:	28 0f       	add	r18, r24
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9c 81       	ldd	r25, Y+4	; 0x04
    17be:	39 2f       	mov	r19, r25
    17c0:	38 1b       	sub	r19, r24
    17c2:	83 2f       	mov	r24, r19
    17c4:	4f 81       	ldd	r20, Y+7	; 0x07
    17c6:	62 2f       	mov	r22, r18
    17c8:	0e 94 0f 0a 	call	0x141e	; 0x141e <LcdPixel>
        LcdPixel(x - xc, y - yc, mode);
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	9d 81       	ldd	r25, Y+5	; 0x05
    17d0:	29 2f       	mov	r18, r25
    17d2:	28 1b       	sub	r18, r24
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	9c 81       	ldd	r25, Y+4	; 0x04
    17d8:	49 2f       	mov	r20, r25
    17da:	48 1b       	sub	r20, r24
    17dc:	84 2f       	mov	r24, r20
    17de:	4f 81       	ldd	r20, Y+7	; 0x07
    17e0:	62 2f       	mov	r22, r18
    17e2:	0e 94 0f 0a 	call	0x141e	; 0x141e <LcdPixel>
        LcdPixel(x + yc, y + xc, mode);
    17e6:	99 81       	ldd	r25, Y+1	; 0x01
    17e8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ea:	29 2f       	mov	r18, r25
    17ec:	28 0f       	add	r18, r24
    17ee:	9a 81       	ldd	r25, Y+2	; 0x02
    17f0:	8c 81       	ldd	r24, Y+4	; 0x04
    17f2:	89 0f       	add	r24, r25
    17f4:	4f 81       	ldd	r20, Y+7	; 0x07
    17f6:	62 2f       	mov	r22, r18
    17f8:	0e 94 0f 0a 	call	0x141e	; 0x141e <LcdPixel>
        LcdPixel(x + yc, y - xc, mode);
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1800:	29 2f       	mov	r18, r25
    1802:	28 1b       	sub	r18, r24
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	8c 81       	ldd	r24, Y+4	; 0x04
    1808:	89 0f       	add	r24, r25
    180a:	4f 81       	ldd	r20, Y+7	; 0x07
    180c:	62 2f       	mov	r22, r18
    180e:	0e 94 0f 0a 	call	0x141e	; 0x141e <LcdPixel>
        LcdPixel(x - yc, y + xc, mode);
    1812:	99 81       	ldd	r25, Y+1	; 0x01
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
    1816:	29 2f       	mov	r18, r25
    1818:	28 0f       	add	r18, r24
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	9c 81       	ldd	r25, Y+4	; 0x04
    181e:	59 2f       	mov	r21, r25
    1820:	58 1b       	sub	r21, r24
    1822:	85 2f       	mov	r24, r21
    1824:	4f 81       	ldd	r20, Y+7	; 0x07
    1826:	62 2f       	mov	r22, r18
    1828:	0e 94 0f 0a 	call	0x141e	; 0x141e <LcdPixel>
        LcdPixel(x - yc, y - xc, mode);
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	9d 81       	ldd	r25, Y+5	; 0x05
    1830:	29 2f       	mov	r18, r25
    1832:	28 1b       	sub	r18, r24
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	9c 81       	ldd	r25, Y+4	; 0x04
    1838:	39 2f       	mov	r19, r25
    183a:	38 1b       	sub	r19, r24
    183c:	83 2f       	mov	r24, r19
    183e:	4f 81       	ldd	r20, Y+7	; 0x07
    1840:	62 2f       	mov	r22, r18
    1842:	0e 94 0f 0a 	call	0x141e	; 0x141e <LcdPixel>
        if (p < 0) p += (xc++ << 2) + 6;
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	88 23       	and	r24, r24
    184a:	8c f4       	brge	.+34     	; 0x186e <LcdCircle+0x12e>
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	98 2f       	mov	r25, r24
    1850:	9f 5f       	subi	r25, 0xFF	; 255
    1852:	99 83       	std	Y+1, r25	; 0x01
    1854:	08 2e       	mov	r0, r24
    1856:	00 0c       	add	r0, r0
    1858:	99 0b       	sbc	r25, r25
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	06 96       	adiw	r24, 0x06	; 6
    1864:	98 2f       	mov	r25, r24
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	89 0f       	add	r24, r25
    186a:	8b 83       	std	Y+3, r24	; 0x03
    186c:	1b c0       	rjmp	.+54     	; 0x18a4 <LcdCircle+0x164>
            else p += ((xc++ - yc--)<<2) + 10;
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	98 2f       	mov	r25, r24
    1872:	9f 5f       	subi	r25, 0xFF	; 255
    1874:	99 83       	std	Y+1, r25	; 0x01
    1876:	28 2f       	mov	r18, r24
    1878:	88 0f       	add	r24, r24
    187a:	33 0b       	sbc	r19, r19
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	98 2f       	mov	r25, r24
    1880:	91 50       	subi	r25, 0x01	; 1
    1882:	9a 83       	std	Y+2, r25	; 0x02
    1884:	08 2e       	mov	r0, r24
    1886:	00 0c       	add	r0, r0
    1888:	99 0b       	sbc	r25, r25
    188a:	a9 01       	movw	r20, r18
    188c:	48 1b       	sub	r20, r24
    188e:	59 0b       	sbc	r21, r25
    1890:	ca 01       	movw	r24, r20
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	0a 96       	adiw	r24, 0x0a	; 10
    189c:	98 2f       	mov	r25, r24
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	89 0f       	add	r24, r25
    18a2:	8b 83       	std	Y+3, r24	; 0x03

    if ( x >= LCD_X_RES || y >= LCD_Y_RES) return OUT_OF_BORDER;

    yc = radius;
    p = 3 - (radius<<1);
    while (xc <= yc)  
    18a4:	99 81       	ldd	r25, Y+1	; 0x01
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	89 17       	cp	r24, r25
    18aa:	0c f0       	brlt	.+2      	; 0x18ae <LcdCircle+0x16e>
    18ac:	6c cf       	rjmp	.-296    	; 0x1786 <LcdCircle+0x46>
        if (p < 0) p += (xc++ << 2) + 6;
            else p += ((xc++ - yc--)<<2) + 10;
    }

    // Установка флага изменений кэша
    UpdateLcd = TRUE;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <UpdateLcd>
    return OK;
    18b4:	80 e0       	ldi	r24, 0x00	; 0
}
    18b6:	27 96       	adiw	r28, 0x07	; 7
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	08 95       	ret

000018c8 <LcdSingleBar>:
 *                          width  -> ширина (в пикселях)
 *                          mode   -> Off, On или Xor. Смотри enum в n3310.h
 * Возвращаемое значение :  смотри возвращаемое значение в n3310lcd.h
 */
byte LcdSingleBar ( byte baseX, byte baseY, byte height, byte width, LcdPixelMode mode )
{
    18c8:	0f 93       	push	r16
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	29 97       	sbiw	r28, 0x09	; 9
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	8d 83       	std	Y+5, r24	; 0x05
    18e0:	6e 83       	std	Y+6, r22	; 0x06
    18e2:	4f 83       	std	Y+7, r20	; 0x07
    18e4:	28 87       	std	Y+8, r18	; 0x08
    18e6:	09 87       	std	Y+9, r16	; 0x09
    byte tmpIdxX,tmpIdxY,tmp;

    byte response;

    // Проверка границ
    if ( ( baseX >= LCD_X_RES) || ( baseY >= LCD_Y_RES) ) return OUT_OF_BORDER;
    18e8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ea:	84 35       	cpi	r24, 0x54	; 84
    18ec:	18 f4       	brcc	.+6      	; 0x18f4 <LcdSingleBar+0x2c>
    18ee:	8e 81       	ldd	r24, Y+6	; 0x06
    18f0:	80 33       	cpi	r24, 0x30	; 48
    18f2:	10 f0       	brcs	.+4      	; 0x18f8 <LcdSingleBar+0x30>
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	3a c0       	rjmp	.+116    	; 0x196c <LcdSingleBar+0xa4>

    if ( height > baseY )
    18f8:	9f 81       	ldd	r25, Y+7	; 0x07
    18fa:	8e 81       	ldd	r24, Y+6	; 0x06
    18fc:	89 17       	cp	r24, r25
    18fe:	10 f4       	brcc	.+4      	; 0x1904 <LcdSingleBar+0x3c>
        tmp = 0;
    1900:	1b 82       	std	Y+3, r1	; 0x03
    1902:	07 c0       	rjmp	.+14     	; 0x1912 <LcdSingleBar+0x4a>
    else
        tmp = baseY - height + 1;
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	8f 81       	ldd	r24, Y+7	; 0x07
    1908:	29 2f       	mov	r18, r25
    190a:	28 1b       	sub	r18, r24
    190c:	82 2f       	mov	r24, r18
    190e:	8f 5f       	subi	r24, 0xFF	; 255
    1910:	8b 83       	std	Y+3, r24	; 0x03

    // Рисование линий
    for ( tmpIdxY = tmp; tmpIdxY <= baseY; tmpIdxY++ )
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	8a 83       	std	Y+2, r24	; 0x02
    1916:	22 c0       	rjmp	.+68     	; 0x195c <LcdSingleBar+0x94>
    {
        for ( tmpIdxX = baseX; tmpIdxX < (baseX + width); tmpIdxX++ )
    1918:	8d 81       	ldd	r24, Y+5	; 0x05
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	0e c0       	rjmp	.+28     	; 0x193a <LcdSingleBar+0x72>
        {
            response = LcdPixel( tmpIdxX, tmpIdxY, mode );
    191e:	49 85       	ldd	r20, Y+9	; 0x09
    1920:	6a 81       	ldd	r22, Y+2	; 0x02
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	0e 94 0f 0a 	call	0x141e	; 0x141e <LcdPixel>
    1928:	8c 83       	std	Y+4, r24	; 0x04
            if(response)
    192a:	8c 81       	ldd	r24, Y+4	; 0x04
    192c:	88 23       	and	r24, r24
    192e:	11 f0       	breq	.+4      	; 0x1934 <LcdSingleBar+0x6c>
                return response;
    1930:	8c 81       	ldd	r24, Y+4	; 0x04
    1932:	1c c0       	rjmp	.+56     	; 0x196c <LcdSingleBar+0xa4>
        tmp = baseY - height + 1;

    // Рисование линий
    for ( tmpIdxY = tmp; tmpIdxY <= baseY; tmpIdxY++ )
    {
        for ( tmpIdxX = baseX; tmpIdxX < (baseX + width); tmpIdxX++ )
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	8f 5f       	subi	r24, 0xFF	; 255
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	8d 81       	ldd	r24, Y+5	; 0x05
    1942:	48 2f       	mov	r20, r24
    1944:	50 e0       	ldi	r21, 0x00	; 0
    1946:	88 85       	ldd	r24, Y+8	; 0x08
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	84 0f       	add	r24, r20
    194e:	95 1f       	adc	r25, r21
    1950:	28 17       	cp	r18, r24
    1952:	39 07       	cpc	r19, r25
    1954:	24 f3       	brlt	.-56     	; 0x191e <LcdSingleBar+0x56>
        tmp = 0;
    else
        tmp = baseY - height + 1;

    // Рисование линий
    for ( tmpIdxY = tmp; tmpIdxY <= baseY; tmpIdxY++ )
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	8f 5f       	subi	r24, 0xFF	; 255
    195a:	8a 83       	std	Y+2, r24	; 0x02
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	8e 81       	ldd	r24, Y+6	; 0x06
    1960:	89 17       	cp	r24, r25
    1962:	d0 f6       	brcc	.-76     	; 0x1918 <LcdSingleBar+0x50>

        }
    }

    // Установка флага изменений кэша
    UpdateLcd = TRUE;
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <UpdateLcd>
    return OK;
    196a:	80 e0       	ldi	r24, 0x00	; 0
}
    196c:	29 96       	adiw	r28, 0x09	; 9
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	de bf       	out	0x3e, r29	; 62
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	cd bf       	out	0x3d, r28	; 61
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	0f 91       	pop	r16
    197e:	08 95       	ret

00001980 <LcdBars>:
 * Примечание            :  Пожалуйста проверьте значения EMPTY_SPACE_BARS, BAR_X, BAR_Y в n3310.h
 * Пример                :  byte example[5] = {1, 2, 3, 4, 5};
 *                          LcdBars(example, 5, 3, 2);
 */
byte LcdBars ( byte data[], byte numbBars, byte width, byte multiplier )
{
    1980:	0f 93       	push	r16
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	28 97       	sbiw	r28, 0x08	; 8
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	9d 83       	std	Y+5, r25	; 0x05
    1998:	8c 83       	std	Y+4, r24	; 0x04
    199a:	6e 83       	std	Y+6, r22	; 0x06
    199c:	4f 83       	std	Y+7, r20	; 0x07
    199e:	28 87       	std	Y+8, r18	; 0x08
    byte b;
    byte tmpIdx = 0;
    19a0:	1a 82       	std	Y+2, r1	; 0x02
    byte response;

    for ( b = 0;  b < numbBars ; b++ )
    19a2:	19 82       	std	Y+1, r1	; 0x01
    19a4:	2d c0       	rjmp	.+90     	; 0x1a00 <LcdBars+0x80>
    {
        // Защита от выхода за пределы
        if ( tmpIdx > LCD_X_RES - 1 ) return OUT_OF_BORDER;
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	84 35       	cpi	r24, 0x54	; 84
    19aa:	10 f0       	brcs	.+4      	; 0x19b0 <LcdBars+0x30>
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	30 c0       	rjmp	.+96     	; 0x1a10 <LcdBars+0x90>

        // Расчет значения x
        tmpIdx = ((width + EMPTY_SPACE_BARS) * b) + BAR_X;
    19b0:	8f 81       	ldd	r24, Y+7	; 0x07
    19b2:	88 2f       	mov	r24, r24
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	02 96       	adiw	r24, 0x02	; 2
    19b8:	98 2f       	mov	r25, r24
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	98 9f       	mul	r25, r24
    19be:	80 2d       	mov	r24, r0
    19c0:	11 24       	eor	r1, r1
    19c2:	82 5e       	subi	r24, 0xE2	; 226
    19c4:	8a 83       	std	Y+2, r24	; 0x02

        // Рисуем один прямоугольник
        response = LcdSingleBar( tmpIdx, BAR_Y, data[b] * multiplier, width, PIXEL_ON);
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	88 2f       	mov	r24, r24
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	2c 81       	ldd	r18, Y+4	; 0x04
    19ce:	3d 81       	ldd	r19, Y+5	; 0x05
    19d0:	82 0f       	add	r24, r18
    19d2:	93 1f       	adc	r25, r19
    19d4:	fc 01       	movw	r30, r24
    19d6:	90 81       	ld	r25, Z
    19d8:	88 85       	ldd	r24, Y+8	; 0x08
    19da:	98 9f       	mul	r25, r24
    19dc:	80 2d       	mov	r24, r0
    19de:	11 24       	eor	r1, r1
    19e0:	01 e0       	ldi	r16, 0x01	; 1
    19e2:	2f 81       	ldd	r18, Y+7	; 0x07
    19e4:	48 2f       	mov	r20, r24
    19e6:	6f e2       	ldi	r22, 0x2F	; 47
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <LcdSingleBar>
    19ee:	8b 83       	std	Y+3, r24	; 0x03
        if(response == OUT_OF_BORDER)
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	81 30       	cpi	r24, 0x01	; 1
    19f4:	11 f4       	brne	.+4      	; 0x19fa <LcdBars+0x7a>
            return response;
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	0b c0       	rjmp	.+22     	; 0x1a10 <LcdBars+0x90>
{
    byte b;
    byte tmpIdx = 0;
    byte response;

    for ( b = 0;  b < numbBars ; b++ )
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	8f 5f       	subi	r24, 0xFF	; 255
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	99 81       	ldd	r25, Y+1	; 0x01
    1a02:	8e 81       	ldd	r24, Y+6	; 0x06
    1a04:	98 17       	cp	r25, r24
    1a06:	78 f2       	brcs	.-98     	; 0x19a6 <LcdBars+0x26>
        if(response == OUT_OF_BORDER)
            return response;
    }

    // Установка флага изменений кэша
    UpdateLcd = TRUE;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <UpdateLcd>
    return OK;
    1a0e:	80 e0       	ldi	r24, 0x00	; 0

}
    1a10:	28 96       	adiw	r28, 0x08	; 8
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	0f 91       	pop	r16
    1a22:	08 95       	ret

00001a24 <LcdRect>:
 *                          y2    -> абсолютная координата y правого нижнего угла
 *                          mode  -> Off, On или Xor. Смотри enum в n3310.h
 * Возвращаемое значение :  смотри возвращаемое значение в n3310lcd.h
 */
byte LcdRect ( byte x1, byte y1, byte x2, byte y2, LcdPixelMode mode )
{
    1a24:	0f 93       	push	r16
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <LcdRect+0x8>
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <LcdRect+0xa>
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <LcdRect+0xc>
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	8a 83       	std	Y+2, r24	; 0x02
    1a36:	6b 83       	std	Y+3, r22	; 0x03
    1a38:	4c 83       	std	Y+4, r20	; 0x04
    1a3a:	2d 83       	std	Y+5, r18	; 0x05
    1a3c:	0e 83       	std	Y+6, r16	; 0x06
    byte tmpIdx;

    // Проверка границ
    if ( ( x1 >= LCD_X_RES) ||  ( x2 >= LCD_X_RES) || ( y1 >= LCD_Y_RES) || ( y2 >= LCD_Y_RES) )
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	84 35       	cpi	r24, 0x54	; 84
    1a42:	48 f4       	brcc	.+18     	; 0x1a56 <LcdRect+0x32>
    1a44:	8c 81       	ldd	r24, Y+4	; 0x04
    1a46:	84 35       	cpi	r24, 0x54	; 84
    1a48:	30 f4       	brcc	.+12     	; 0x1a56 <LcdRect+0x32>
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	80 33       	cpi	r24, 0x30	; 48
    1a4e:	18 f4       	brcc	.+6      	; 0x1a56 <LcdRect+0x32>
    1a50:	8d 81       	ldd	r24, Y+5	; 0x05
    1a52:	80 33       	cpi	r24, 0x30	; 48
    1a54:	10 f0       	brcs	.+4      	; 0x1a5a <LcdRect+0x36>
        return OUT_OF_BORDER;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	34 c0       	rjmp	.+104    	; 0x1ac2 <LcdRect+0x9e>

    if ( ( x2 > x1 ) && ( y2 > y1 ) )
    1a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	89 17       	cp	r24, r25
    1a60:	78 f5       	brcc	.+94     	; 0x1ac0 <LcdRect+0x9c>
    1a62:	9d 81       	ldd	r25, Y+5	; 0x05
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	89 17       	cp	r24, r25
    1a68:	58 f5       	brcc	.+86     	; 0x1ac0 <LcdRect+0x9c>
    {
        // Рисуем горизонтальные линии
        for ( tmpIdx = x1; tmpIdx <= x2; tmpIdx++ )
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	0d c0       	rjmp	.+26     	; 0x1a8a <LcdRect+0x66>
        {
            LcdPixel( tmpIdx, y1, mode );
    1a70:	4e 81       	ldd	r20, Y+6	; 0x06
    1a72:	6b 81       	ldd	r22, Y+3	; 0x03
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	0e 94 0f 0a 	call	0x141e	; 0x141e <LcdPixel>
            LcdPixel( tmpIdx, y2, mode );
    1a7a:	4e 81       	ldd	r20, Y+6	; 0x06
    1a7c:	6d 81       	ldd	r22, Y+5	; 0x05
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	0e 94 0f 0a 	call	0x141e	; 0x141e <LcdPixel>
        return OUT_OF_BORDER;

    if ( ( x2 > x1 ) && ( y2 > y1 ) )
    {
        // Рисуем горизонтальные линии
        for ( tmpIdx = x1; tmpIdx <= x2; tmpIdx++ )
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	8f 5f       	subi	r24, 0xFF	; 255
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	99 81       	ldd	r25, Y+1	; 0x01
    1a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8e:	89 17       	cp	r24, r25
    1a90:	78 f7       	brcc	.-34     	; 0x1a70 <LcdRect+0x4c>
            LcdPixel( tmpIdx, y1, mode );
            LcdPixel( tmpIdx, y2, mode );
        }

        // Рисуем вертикальные линии
        for ( tmpIdx = y1; tmpIdx <= y2; tmpIdx++ )
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	0d c0       	rjmp	.+26     	; 0x1ab2 <LcdRect+0x8e>
        {
            LcdPixel( x1, tmpIdx, mode );
    1a98:	4e 81       	ldd	r20, Y+6	; 0x06
    1a9a:	69 81       	ldd	r22, Y+1	; 0x01
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	0e 94 0f 0a 	call	0x141e	; 0x141e <LcdPixel>
            LcdPixel( x2, tmpIdx, mode );
    1aa2:	4e 81       	ldd	r20, Y+6	; 0x06
    1aa4:	69 81       	ldd	r22, Y+1	; 0x01
    1aa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa8:	0e 94 0f 0a 	call	0x141e	; 0x141e <LcdPixel>
            LcdPixel( tmpIdx, y1, mode );
            LcdPixel( tmpIdx, y2, mode );
        }

        // Рисуем вертикальные линии
        for ( tmpIdx = y1; tmpIdx <= y2; tmpIdx++ )
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	8f 5f       	subi	r24, 0xFF	; 255
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	99 81       	ldd	r25, Y+1	; 0x01
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	89 17       	cp	r24, r25
    1ab8:	78 f7       	brcc	.-34     	; 0x1a98 <LcdRect+0x74>
            LcdPixel( x1, tmpIdx, mode );
            LcdPixel( x2, tmpIdx, mode );
        }

        // Установка флага изменений кэша
        UpdateLcd = TRUE;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <UpdateLcd>
    }
    return OK;
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
}
    1ac2:	26 96       	adiw	r28, 0x06	; 6
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	cd bf       	out	0x3d, r28	; 61
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	0f 91       	pop	r16
    1ad4:	08 95       	ret

00001ad6 <LcdImage>:
 * Описание              :  Рисует картинку из массива сохраненного в Flash ROM
 * Аргумент(ы)           :  Указатель на массив картинки
 * Возвращаемое значение :  Нет
 */
void LcdImage ( const byte *imageData )
{
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	00 d0       	rcall	.+0      	; 0x1adc <LcdImage+0x6>
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	9a 83       	std	Y+2, r25	; 0x02
    1ae2:	89 83       	std	Y+1, r24	; 0x01
//        // Копируем данные из массива в кэш
//        LcdCache[LcdCacheIdx] = pgm_read_byte( imageData++ );
//    }
    
    // Оптимизация от Jakub Lasinski (March 14 2009)
    memcpy_P( LcdCache, imageData, LCD_CACHE_SIZE );  // Тоже самое что и выше, но занимает меньше памяти и быстрее выполняется
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae8:	48 ef       	ldi	r20, 0xF8	; 248
    1aea:	51 e0       	ldi	r21, 0x01	; 1
    1aec:	bc 01       	movw	r22, r24
    1aee:	86 e0       	ldi	r24, 0x06	; 6
    1af0:	91 e0       	ldi	r25, 0x01	; 1
    1af2:	0e 94 77 13 	call	0x26ee	; 0x26ee <memcpy_P>
    
    // Сброс указателей границ в максимальное значение
    LoWaterMark = 0;
    1af6:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <LoWaterMark+0x1>
    1afa:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <LoWaterMark>
    HiWaterMark = LCD_CACHE_SIZE - 1;
    1afe:	87 ef       	ldi	r24, 0xF7	; 247
    1b00:	91 e0       	ldi	r25, 0x01	; 1
    1b02:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <HiWaterMark+0x1>
    1b06:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <HiWaterMark>

    // Установка флага изменений кэша
    UpdateLcd = TRUE;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <UpdateLcd>
}
    1b10:	00 00       	nop
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	08 95       	ret

00001b1c <to_uart>:
#include "subs.h"

//----------------------------------------------

void to_uart(unsigned char num)
{
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <to_uart+0x6>
    1b22:	1f 92       	push	r1
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	8b 83       	std	Y+3, r24	; 0x03
    struct m2bytes nbuf;

    USART_PutChar('\x0d');
    1b2a:	8d e0       	ldi	r24, 0x0D	; 13
    1b2c:	0e 94 60 12 	call	0x24c0	; 0x24c0 <USART_PutChar>
    USART_SendStr("num=");
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	91 e0       	ldi	r25, 0x01	; 1
    1b34:	0e 94 94 12 	call	0x2528	; 0x2528 <USART_SendStr>
    nbuf.one = num;
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    num_to_str(&nbuf);
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	01 96       	adiw	r24, 0x01	; 1
    1b40:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <num_to_str>
    USART_PutChar(nbuf.one);
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	0e 94 60 12 	call	0x24c0	; 0x24c0 <USART_PutChar>
    USART_PutChar(nbuf.two);
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	0e 94 60 12 	call	0x24c0	; 0x24c0 <USART_PutChar>
    USART_PutChar('\x0d');
    1b50:	8d e0       	ldi	r24, 0x0D	; 13
    1b52:	0e 94 60 12 	call	0x24c0	; 0x24c0 <USART_PutChar>
}
    1b56:	00 00       	nop
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	08 95       	ret

00001b64 <__vector_13>:

//-------------------- Timer on 0.5 sec -----------------------

ISR (TIMER1_OVF_vect)
{
    1b64:	1f 92       	push	r1
    1b66:	0f 92       	push	r0
    1b68:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1b6c:	0f 92       	push	r0
    1b6e:	11 24       	eor	r1, r1
    1b70:	2f 93       	push	r18
    1b72:	3f 93       	push	r19
    1b74:	8f 93       	push	r24
    1b76:	9f 93       	push	r25
    1b78:	ef 93       	push	r30
    1b7a:	ff 93       	push	r31
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    cli();
    1b84:	f8 94       	cli
    TCNT1 = 0x10000 - (F_CPU / 1024) + TCNT1; //TODO
    1b86:	84 e8       	ldi	r24, 0x84	; 132
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	24 e8       	ldi	r18, 0x84	; 132
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	f9 01       	movw	r30, r18
    1b90:	20 81       	ld	r18, Z
    1b92:	31 81       	ldd	r19, Z+1	; 0x01
    1b94:	24 58       	subi	r18, 0x84	; 132
    1b96:	3e 41       	sbci	r19, 0x1E	; 30
    1b98:	fc 01       	movw	r30, r24
    1b9a:	31 83       	std	Z+1, r19	; 0x01
    1b9c:	20 83       	st	Z, r18
    time_cnt++;
    1b9e:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <time_cnt>
    1ba2:	8f 5f       	subi	r24, 0xFF	; 255
    1ba4:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <time_cnt>

    if (time_cnt & 1) { // 1 sec
    1ba8:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <time_cnt>
    1bac:	88 2f       	mov	r24, r24
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	81 70       	andi	r24, 0x01	; 1
    1bb2:	99 27       	eor	r25, r25
    1bb4:	89 2b       	or	r24, r25
    1bb6:	51 f0       	breq	.+20     	; 0x1bcc <__vector_13+0x68>
	SET_BIT(time_flag, tf_e1sec);
    1bb8:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <time_flag>
    1bbc:	81 60       	ori	r24, 0x01	; 1
    1bbe:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <time_flag>
	powerUp_time_sec++;
    1bc2:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <powerUp_time_sec>
    1bc6:	8f 5f       	subi	r24, 0xFF	; 255
    1bc8:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <powerUp_time_sec>
    }

    if (time_cnt >= 10) { // 5 sec цикл
    1bcc:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <time_cnt>
    1bd0:	8a 30       	cpi	r24, 0x0A	; 10
    1bd2:	10 f0       	brcs	.+4      	; 0x1bd8 <__vector_13+0x74>
	time_cnt = 0;
    1bd4:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <time_cnt>
    }

    SET_BIT(time_flag, tf_dps_en);
    1bd8:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <time_flag>
    1bdc:	84 60       	ori	r24, 0x04	; 4
    1bde:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <time_flag>
    sei();
    1be2:	78 94       	sei
}
    1be4:	00 00       	nop
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	ff 91       	pop	r31
    1bec:	ef 91       	pop	r30
    1bee:	9f 91       	pop	r25
    1bf0:	8f 91       	pop	r24
    1bf2:	3f 91       	pop	r19
    1bf4:	2f 91       	pop	r18
    1bf6:	0f 90       	pop	r0
    1bf8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1bfc:	0f 90       	pop	r0
    1bfe:	1f 90       	pop	r1
    1c00:	18 95       	reti

00001c02 <__vector_3>:

ISR (PCINT0_vect)
{
    1c02:	1f 92       	push	r1
    1c04:	0f 92       	push	r0
    1c06:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c0a:	0f 92       	push	r0
    1c0c:	11 24       	eor	r1, r1
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    cli();
    1c16:	f8 94       	cli

    sei();
    1c18:	78 94       	sei
}
    1c1a:	00 00       	nop
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	0f 90       	pop	r0
    1c22:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c26:	0f 90       	pop	r0
    1c28:	1f 90       	pop	r1
    1c2a:	18 95       	reti

00001c2c <key_scan>:

uint8_t key_scan(void)
{
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
     tmo--;
     } while (tmo);
     PORTC &= ~8; // 3 bit to Low
     return ((tkey1 << 2) + tkey2);
     */
}
    1c34:	00 00       	nop
    1c36:	df 91       	pop	r29
    1c38:	cf 91       	pop	r28
    1c3a:	08 95       	ret

00001c3c <key_scan_w>:

uint8_t key_scan_w(uint8_t timeout)
{
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <key_scan_w+0x6>
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t tmp;

    while (timeout > 0) {
    1c48:	0c c0       	rjmp	.+24     	; 0x1c62 <key_scan_w+0x26>
	delay_ms0(10);
    1c4a:	8a e0       	ldi	r24, 0x0A	; 10
    1c4c:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <delay_ms0>
	tmp = key_scan();
    1c50:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <key_scan>
    1c54:	89 83       	std	Y+1, r24	; 0x01
	if (tmp)
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	88 23       	and	r24, r24
    1c5a:	39 f4       	brne	.+14     	; 0x1c6a <key_scan_w+0x2e>
	    break;
	timeout--;
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	81 50       	subi	r24, 0x01	; 1
    1c60:	8a 83       	std	Y+2, r24	; 0x02

uint8_t key_scan_w(uint8_t timeout)
{
    uint8_t tmp;

    while (timeout > 0) {
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	88 23       	and	r24, r24
    1c66:	89 f7       	brne	.-30     	; 0x1c4a <key_scan_w+0xe>
    1c68:	01 c0       	rjmp	.+2      	; 0x1c6c <key_scan_w+0x30>
	delay_ms0(10);
	tmp = key_scan();
	if (tmp)
	    break;
    1c6a:	00 00       	nop
	timeout--;
    }
    return (tmp);
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	08 95       	ret

00001c78 <main_scr>:
 }
 */

//========================================
void main_scr(void)
{
    1c78:	cf 93       	push	r28
    1c7a:	df 93       	push	r29
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
//1 str
    LcdGotoXYFont(0, 0);
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <LcdGotoXYFont>
    LcdFStr(FONT_1X, (unsigned char*) str_nasos, 0);
    1c88:	40 e0       	ldi	r20, 0x00	; 0
    1c8a:	6c eb       	ldi	r22, 0xBC	; 188
    1c8c:	76 e0       	ldi	r23, 0x06	; 6
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	0e 94 cd 09 	call	0x139a	; 0x139a <LcdFStr>
//    stf_to_str(2);
//	LcdStr(FONT_1X,"           ");
// clock
    LcdGotoXYFont(9, 0);
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	89 e0       	ldi	r24, 0x09	; 9
    1c98:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <LcdGotoXYFont>
     LcdStr(FONT_1X, "c ", 0);
     LcdFStr(FONT_1X, (unsigned char*) str_vlaz, 0);
     sts_to_str(3);
     LcdChr(FONT_1X, '%', 0);
     */
}
    1c9c:	00 00       	nop
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	08 95       	ret

00001ca4 <setup1_scr>:

//---------------------------------------------------
void setup1_scr(void)
{
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62

}
    1cac:	00 00       	nop
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	08 95       	ret

00001cb4 <setup2_scr>:

void setup2_scr(void)
{
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
}
    1cbc:	00 00       	nop
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	08 95       	ret

00001cc4 <myread_eeprom>:

void myread_eeprom(void)
{
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
     eeprom_read_block((uint8_t *) &trg_vitag[0], &trg_vitag_ee[0], sizeof(trg_vitag));
     eeprom_read_block((uint8_t *) &trg_vtag[0], &trg_vtag_ee[0], sizeof(trg_vtag));
     eeprom_read_block((uint8_t *) &trg_alrm[0], &trg_alrm_ee[0], sizeof(trg_alrm));
     trg_beep = eeprom_read_byte(&trg_beep_ee);
     */
}
    1ccc:	00 00       	nop
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	08 95       	ret

00001cd4 <myupdate_eeprom>:

void myupdate_eeprom(void)
{
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
     eeprom_update_block((uint8_t *) &trg_vitag[0], &trg_vitag_ee[0], sizeof(trg_vitag));
     eeprom_update_block((uint8_t *) &trg_vtag[0], &trg_vtag_ee[0], sizeof(trg_vtag));
     eeprom_update_block((uint8_t *) &trg_alrm[0], &trg_alrm_ee[0], sizeof(trg_alrm));
     eeprom_update_byte(&trg_beep_ee, trg_beep);
     */
}
    1cdc:	00 00       	nop
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	08 95       	ret

00001ce4 <main>:
 nbuf->two = num + '0';
 }
 */

void main(void)
{
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <main+0x6>
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <main+0x8>
    1cec:	1f 92       	push	r1
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    uint8_t tmp;
    uint8_t cikl_count;	//,scrclr_fl=0;
    uint8_t sens_upd;
    uint8_t Ti = 0;	//Т испаритель
    1cf2:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t Ts = 0;	//Т салон
    1cf4:	1c 82       	std	Y+4, r1	; 0x04
    uint8_t Vs = 0;	//влажность салон
    1cf6:	1d 82       	std	Y+5, r1	; 0x05

    powerUp_time_sec = 0;
    1cf8:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <powerUp_time_sec>
    time_cnt = 0;
    1cfc:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <time_cnt>
    time_flag = 0;
    1d00:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <time_flag>
    sens_upd = 0;
    1d04:	19 82       	std	Y+1, r1	; 0x01

    LcdInit();
    1d06:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LcdInit>
    LcdContrast(70);
    1d0a:	86 e4       	ldi	r24, 0x46	; 70
    1d0c:	0e 94 bc 07 	call	0xf78	; 0xf78 <LcdContrast>
    LcdClear();
    1d10:	0e 94 d5 06 	call	0xdaa	; 0xdaa <LcdClear>
    LcdUpdate();
    1d14:	0e 94 f2 06 	call	0xde4	; 0xde4 <LcdUpdate>

    USART_Init();
    1d18:	0e 94 30 12 	call	0x2460	; 0x2460 <USART_Init>
//sts_numb	//состояние датчиков 0-СО 1-темп.тн 2-темп 3-влаж
    cikl_count = 0;
    1d1c:	1b 82       	std	Y+3, r1	; 0x03

    myread_eeprom();
    1d1e:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <myread_eeprom>
//timer init
    TCCR1A = 0;  	//Т/С1 отсоединен от вывода ОС1, режим ШИМ отключен
    1d22:	80 e8       	ldi	r24, 0x80	; 128
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	fc 01       	movw	r30, r24
    1d28:	10 82       	st	Z, r1
    TCCR1B = 5;  	//Коэффициент деления частоты системной	синхронизации = 1024
    1d2a:	81 e8       	ldi	r24, 0x81	; 129
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	25 e0       	ldi	r18, 0x05	; 5
    1d30:	fc 01       	movw	r30, r24
    1d32:	20 83       	st	Z, r18
    TCNT1 = 0x10000 - (F_CPU / 1024); //Инициализируем счетный регистр значением 61630
    1d34:	84 e8       	ldi	r24, 0x84	; 132
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	2c e7       	ldi	r18, 0x7C	; 124
    1d3a:	31 ee       	ldi	r19, 0xE1	; 225
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	31 83       	std	Z+1, r19	; 0x01
    1d40:	20 83       	st	Z, r18

    TIFR1 = 0;       //Сбрасываем все флаги прерываний от Т/С1
    1d42:	86 e3       	ldi	r24, 0x36	; 54
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	fc 01       	movw	r30, r24
    1d48:	10 82       	st	Z, r1
    TIMSK1 = 1 << TOIE1;  	//Разрешаем прерывание при переполнении Т/С1
    1d4a:	8f e6       	ldi	r24, 0x6F	; 111
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	21 e0       	ldi	r18, 0x01	; 1
    1d50:	fc 01       	movw	r30, r24
    1d52:	20 83       	st	Z, r18

//todo	GIMSK = 0;     	//Запрет внешних прерываний
    sei();
    1d54:	78 94       	sei

    while (1) {
	if (TEST_BIT(time_flag, tf_e1sec)) {
    1d56:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <time_flag>
    1d5a:	88 2f       	mov	r24, r24
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	81 70       	andi	r24, 0x01	; 1
    1d60:	99 27       	eor	r25, r25
    1d62:	89 2b       	or	r24, r25
    1d64:	41 f0       	breq	.+16     	; 0x1d76 <main+0x92>

	    sens_upd++;
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	8f 5f       	subi	r24, 0xFF	; 255
    1d6a:	89 83       	std	Y+1, r24	; 0x01
	    CLR_BIT(time_flag, tf_e1sec);
    1d6c:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <time_flag>
    1d70:	8e 7f       	andi	r24, 0xFE	; 254
    1d72:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <time_flag>
	}

	switch (sens_upd) {
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	88 2f       	mov	r24, r24
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	83 30       	cpi	r24, 0x03	; 3
    1d7e:	91 05       	cpc	r25, r1
    1d80:	19 f0       	breq	.+6      	; 0x1d88 <main+0xa4>
    1d82:	05 97       	sbiw	r24, 0x05	; 5
    1d84:	79 f0       	breq	.+30     	; 0x1da4 <main+0xc0>
    1d86:	13 c0       	rjmp	.+38     	; 0x1dae <main+0xca>
	case 3:
	    init_18b20(D1_18B20_PIN);
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	0e 94 58 11 	call	0x22b0	; 0x22b0 <init_18b20>
	    //если датчик с влажностью dht11
#ifdef	DHT_TYPE
	    cli();
    1d8e:	f8 94       	cli
	    if (dht11_read(&Vs, &Ts) == DHTLIB_OK) {
    1d90:	9e 01       	movw	r18, r28
    1d92:	2c 5f       	subi	r18, 0xFC	; 252
    1d94:	3f 4f       	sbci	r19, 0xFF	; 255
    1d96:	ce 01       	movw	r24, r28
    1d98:	05 96       	adiw	r24, 0x05	; 5
    1d9a:	b9 01       	movw	r22, r18
    1d9c:	0e 94 56 05 	call	0xaac	; 0xaac <dht11_read>
		//	    sts_numb[3] = humidity;
		//	    sts_numb[2] = temperature;
	    }
	    sei();
    1da0:	78 94       	sei
#else // или простой датчик
	    init_18b20(D2_18B20_PIN);
#endif
	    break;
    1da2:	05 c0       	rjmp	.+10     	; 0x1dae <main+0xca>
	case 5:
	    Ti = temp_18b20(D1_18B20_PIN);
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	0e 94 72 11 	call	0x22e4	; 0x22e4 <temp_18b20>
    1daa:	8a 83       	std	Y+2, r24	; 0x02
#ifndef	DHT_TYPE
	    Ts = temp_18b20(D2_18B20_PIN);
#endif
	    sens_upd = 0;
    1dac:	19 82       	std	Y+1, r1	; 0x01
	}

	if (TEST_BIT(time_flag, tf_dps_en)) { // ограничение частоты показа дисплея
    1dae:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <time_flag>
    1db2:	88 2f       	mov	r24, r24
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	84 70       	andi	r24, 0x04	; 4
    1db8:	99 27       	eor	r25, r25
    1dba:	89 2b       	or	r24, r25
    1dbc:	61 f2       	breq	.-104    	; 0x1d56 <main+0x72>

	    CLR_BIT(time_flag, tf_dps_en);
    1dbe:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <time_flag>
    1dc2:	8b 7f       	andi	r24, 0xFB	; 251
    1dc4:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <time_flag>
	}
    }
    1dc8:	c6 cf       	rjmp	.-116    	; 0x1d56 <main+0x72>

00001dca <_delayFourCycles>:

/*************************************************************************
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    1dca:	cf 93       	push	r28
    1dcc:	df 93       	push	r29
    1dce:	00 d0       	rcall	.+0      	; 0x1dd0 <_delayFourCycles+0x6>
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	9a 83       	std	Y+2, r25	; 0x02
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    if ( __count == 0 )    
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	9a 81       	ldd	r25, Y+2	; 0x02
    1ddc:	89 2b       	or	r24, r25
    1dde:	11 f4       	brne	.+4      	; 0x1de4 <_delayFourCycles+0x1a>
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    1de0:	00 c0       	rjmp	.+0      	; 0x1de2 <_delayFourCycles+0x18>
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
   
}
    1de2:	06 c0       	rjmp	.+12     	; 0x1df0 <_delayFourCycles+0x26>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <_delayFourCycles+0x1e>
    1dec:	9a 83       	std	Y+2, r25	; 0x02
    1dee:	89 83       	std	Y+1, r24	; 0x01
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
   
}
    1df0:	00 00       	nop
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	df 91       	pop	r29
    1df8:	cf 91       	pop	r28
    1dfa:	08 95       	ret

00001dfc <delay_ms0>:
#include "subs.h"
#include <avr/pgmspace.h>
#include "lcd.h"

void delay_ms0(unsigned char ms)
{
    1dfc:	cf 93       	push	r28
    1dfe:	df 93       	push	r29
    1e00:	1f 92       	push	r1
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	89 83       	std	Y+1, r24	; 0x01
	while(ms>0)
    1e08:	07 c0       	rjmp	.+14     	; 0x1e18 <delay_ms0+0x1c>
	{
		delay(1000);
    1e0a:	80 ed       	ldi	r24, 0xD0	; 208
    1e0c:	97 e0       	ldi	r25, 0x07	; 7
    1e0e:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_delayFourCycles>
		ms--;
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	81 50       	subi	r24, 0x01	; 1
    1e16:	89 83       	std	Y+1, r24	; 0x01
#include <avr/pgmspace.h>
#include "lcd.h"

void delay_ms0(unsigned char ms)
{
	while(ms>0)
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	88 23       	and	r24, r24
    1e1c:	b1 f7       	brne	.-20     	; 0x1e0a <delay_ms0+0xe>
	{
		delay(1000);
		ms--;
	}
//	wdt_reset();
}
    1e1e:	00 00       	nop
    1e20:	0f 90       	pop	r0
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	08 95       	ret

00001e28 <delay_ms>:

void delay_ms(unsigned int ms)
{
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <delay_ms+0x6>
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	9a 83       	std	Y+2, r25	; 0x02
    1e34:	89 83       	std	Y+1, r24	; 0x01
	while(ms>0)
    1e36:	09 c0       	rjmp	.+18     	; 0x1e4a <delay_ms+0x22>
	{
		delay(1000);
    1e38:	80 ed       	ldi	r24, 0xD0	; 208
    1e3a:	97 e0       	ldi	r25, 0x07	; 7
    1e3c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_delayFourCycles>
		ms--;
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	9a 81       	ldd	r25, Y+2	; 0x02
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	9a 83       	std	Y+2, r25	; 0x02
    1e48:	89 83       	std	Y+1, r24	; 0x01
//	wdt_reset();
}

void delay_ms(unsigned int ms)
{
	while(ms>0)
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4e:	89 2b       	or	r24, r25
    1e50:	99 f7       	brne	.-26     	; 0x1e38 <delay_ms+0x10>
	{
		delay(1000);
		ms--;
	}
//	wdt_reset();
}
    1e52:	00 00       	nop
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	08 95       	ret

00001e5e <delay_s>:

void delay_s(unsigned char s)
{
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	1f 92       	push	r1
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	89 83       	std	Y+1, r24	; 0x01
	while(s>0)
    1e6a:	07 c0       	rjmp	.+14     	; 0x1e7a <delay_s+0x1c>
	{
		delay_ms(1000);
    1e6c:	88 ee       	ldi	r24, 0xE8	; 232
    1e6e:	93 e0       	ldi	r25, 0x03	; 3
    1e70:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <delay_ms>
		s--;
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	81 50       	subi	r24, 0x01	; 1
    1e78:	89 83       	std	Y+1, r24	; 0x01
//	wdt_reset();
}

void delay_s(unsigned char s)
{
	while(s>0)
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	88 23       	and	r24, r24
    1e7e:	b1 f7       	brne	.-20     	; 0x1e6c <delay_s+0xe>
	{
		delay_ms(1000);
		s--;
	}
//	wdt_reset();
}
    1e80:	00 00       	nop
    1e82:	0f 90       	pop	r0
    1e84:	df 91       	pop	r29
    1e86:	cf 91       	pop	r28
    1e88:	08 95       	ret

00001e8a <num_to_str>:

void num_to_str(struct m2bytes *nbuf)
{
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <num_to_str+0x6>
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <num_to_str+0x8>
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	9c 83       	std	Y+4, r25	; 0x04
    1e98:	8b 83       	std	Y+3, r24	; 0x03
uint8_t tmp,num;
//m2bytes nbuf;

	num = nbuf->one;
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	80 81       	ld	r24, Z
    1ea2:	89 83       	std	Y+1, r24	; 0x01
	if(num>99) num=99;
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	84 36       	cpi	r24, 0x64	; 100
    1ea8:	10 f0       	brcs	.+4      	; 0x1eae <num_to_str+0x24>
    1eaa:	83 e6       	ldi	r24, 0x63	; 99
    1eac:	89 83       	std	Y+1, r24	; 0x01
	tmp = num / 10;
    1eae:	99 81       	ldd	r25, Y+1	; 0x01
    1eb0:	8d ec       	ldi	r24, 0xCD	; 205
    1eb2:	98 9f       	mul	r25, r24
    1eb4:	81 2d       	mov	r24, r1
    1eb6:	11 24       	eor	r1, r1
    1eb8:	86 95       	lsr	r24
    1eba:	86 95       	lsr	r24
    1ebc:	86 95       	lsr	r24
    1ebe:	8a 83       	std	Y+2, r24	; 0x02
	nbuf->one = tmp+'0';
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	20 e3       	ldi	r18, 0x30	; 48
    1ec4:	28 0f       	add	r18, r24
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eca:	fc 01       	movw	r30, r24
    1ecc:	20 83       	st	Z, r18
	num -= tmp*10; 
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	88 0f       	add	r24, r24
    1ed2:	98 2f       	mov	r25, r24
    1ed4:	99 0f       	add	r25, r25
    1ed6:	99 0f       	add	r25, r25
    1ed8:	89 0f       	add	r24, r25
    1eda:	81 95       	neg	r24
    1edc:	99 81       	ldd	r25, Y+1	; 0x01
    1ede:	89 0f       	add	r24, r25
    1ee0:	89 83       	std	Y+1, r24	; 0x01
	nbuf->two = num+'0';
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	20 e3       	ldi	r18, 0x30	; 48
    1ee6:	28 0f       	add	r18, r24
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	9c 81       	ldd	r25, Y+4	; 0x04
    1eec:	fc 01       	movw	r30, r24
    1eee:	21 83       	std	Z+1, r18	; 0x01
}
    1ef0:	00 00       	nop
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	08 95       	ret

00001f00 <num_to_lcd>:

void num_to_lcd(uint8_t fs,uint8_t num)
{
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <num_to_lcd+0x6>
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <num_to_lcd+0x8>
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	8b 83       	std	Y+3, r24	; 0x03
    1f0e:	6c 83       	std	Y+4, r22	; 0x04
struct m2bytes nbuf;

	nbuf.one = num;
    1f10:	8c 81       	ldd	r24, Y+4	; 0x04
    1f12:	89 83       	std	Y+1, r24	; 0x01
	num_to_str(&nbuf);
    1f14:	ce 01       	movw	r24, r28
    1f16:	01 96       	adiw	r24, 0x01	; 1
    1f18:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <num_to_str>
	LcdChr(fs,nbuf.one,0);
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	40 e0       	ldi	r20, 0x00	; 0
    1f20:	68 2f       	mov	r22, r24
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	0e 94 0f 08 	call	0x101e	; 0x101e <LcdChr>
	LcdChr(fs,nbuf.two,0);
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	40 e0       	ldi	r20, 0x00	; 0
    1f2c:	68 2f       	mov	r22, r24
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	0e 94 0f 08 	call	0x101e	; 0x101e <LcdChr>
}
    1f34:	00 00       	nop
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	df 91       	pop	r29
    1f40:	cf 91       	pop	r28
    1f42:	08 95       	ret

00001f44 <_delayFourCycles>:

/*************************************************************************
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	00 d0       	rcall	.+0      	; 0x1f4a <_delayFourCycles+0x6>
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
    if ( __count == 0 )    
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	9a 81       	ldd	r25, Y+2	; 0x02
    1f56:	89 2b       	or	r24, r25
    1f58:	11 f4       	brne	.+4      	; 0x1f5e <_delayFourCycles+0x1a>
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    1f5a:	00 c0       	rjmp	.+0      	; 0x1f5c <_delayFourCycles+0x18>
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
   
}
    1f5c:	06 c0       	rjmp	.+12     	; 0x1f6a <_delayFourCycles+0x26>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	9a 81       	ldd	r25, Y+2	; 0x02
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <_delayFourCycles+0x1e>
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	89 83       	std	Y+1, r24	; 0x01
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
   
}
    1f6a:	00 00       	nop
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	df 91       	pop	r29
    1f72:	cf 91       	pop	r28
    1f74:	08 95       	ret

00001f76 <w1_find>:
#include "subs.h"
#include "temp_18b20.h"

//функция определяет есть ли устройство на шине
uint8_t w1_find(uint8_t port_pin)
{
    1f76:	cf 93       	push	r28
    1f78:	df 93       	push	r29
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <w1_find+0x6>
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t device;
    W1_DDR |= 1 << port_pin;
    1f82:	8a e2       	ldi	r24, 0x2A	; 42
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	2a e2       	ldi	r18, 0x2A	; 42
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	f9 01       	movw	r30, r18
    1f8c:	20 81       	ld	r18, Z
    1f8e:	62 2f       	mov	r22, r18
    1f90:	2a 81       	ldd	r18, Y+2	; 0x02
    1f92:	42 2f       	mov	r20, r18
    1f94:	50 e0       	ldi	r21, 0x00	; 0
    1f96:	21 e0       	ldi	r18, 0x01	; 1
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <w1_find+0x2a>
    1f9c:	22 0f       	add	r18, r18
    1f9e:	33 1f       	adc	r19, r19
    1fa0:	4a 95       	dec	r20
    1fa2:	e2 f7       	brpl	.-8      	; 0x1f9c <w1_find+0x26>
    1fa4:	26 2b       	or	r18, r22
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	20 83       	st	Z, r18
    delay(485);
    1faa:	8a ec       	ldi	r24, 0xCA	; 202
    1fac:	93 e0       	ldi	r25, 0x03	; 3
    1fae:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_delayFourCycles>
    W1_DDR &= ~(1 << port_pin);
    1fb2:	8a e2       	ldi	r24, 0x2A	; 42
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	2a e2       	ldi	r18, 0x2A	; 42
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	f9 01       	movw	r30, r18
    1fbc:	20 81       	ld	r18, Z
    1fbe:	62 2f       	mov	r22, r18
    1fc0:	2a 81       	ldd	r18, Y+2	; 0x02
    1fc2:	42 2f       	mov	r20, r18
    1fc4:	50 e0       	ldi	r21, 0x00	; 0
    1fc6:	21 e0       	ldi	r18, 0x01	; 1
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <w1_find+0x5a>
    1fcc:	22 0f       	add	r18, r18
    1fce:	33 1f       	adc	r19, r19
    1fd0:	4a 95       	dec	r20
    1fd2:	e2 f7       	brpl	.-8      	; 0x1fcc <w1_find+0x56>
    1fd4:	20 95       	com	r18
    1fd6:	26 23       	and	r18, r22
    1fd8:	fc 01       	movw	r30, r24
    1fda:	20 83       	st	Z, r18
    delay(65);
    1fdc:	82 e8       	ldi	r24, 0x82	; 130
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_delayFourCycles>

    if ((W1_PIN & (1 << port_pin)) == 0x00)
    1fe4:	89 e2       	ldi	r24, 0x29	; 41
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	fc 01       	movw	r30, r24
    1fea:	80 81       	ld	r24, Z
    1fec:	88 2f       	mov	r24, r24
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ff2:	22 2f       	mov	r18, r18
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <w1_find+0x86>
    1ff8:	95 95       	asr	r25
    1ffa:	87 95       	ror	r24
    1ffc:	2a 95       	dec	r18
    1ffe:	e2 f7       	brpl	.-8      	; 0x1ff8 <w1_find+0x82>
    2000:	81 70       	andi	r24, 0x01	; 1
    2002:	99 27       	eor	r25, r25
    2004:	89 2b       	or	r24, r25
    2006:	19 f4       	brne	.+6      	; 0x200e <w1_find+0x98>
	device = 1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	01 c0       	rjmp	.+2      	; 0x2010 <w1_find+0x9a>
    else
	device = 0;
    200e:	19 82       	std	Y+1, r1	; 0x01
    delay(420);
    2010:	88 e4       	ldi	r24, 0x48	; 72
    2012:	93 e0       	ldi	r25, 0x03	; 3
    2014:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_delayFourCycles>

    return device;
    2018:	89 81       	ldd	r24, Y+1	; 0x01
}
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	df 91       	pop	r29
    2020:	cf 91       	pop	r28
    2022:	08 95       	ret

00002024 <w1_sendcmd>:
//функция посылает команду на устройство 1-wire
void w1_sendcmd(uint8_t cmd, uint8_t port_pin)
{
    2024:	cf 93       	push	r28
    2026:	df 93       	push	r29
    2028:	00 d0       	rcall	.+0      	; 0x202a <w1_sendcmd+0x6>
    202a:	1f 92       	push	r1
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	8a 83       	std	Y+2, r24	; 0x02
    2032:	6b 83       	std	Y+3, r22	; 0x03
    for (uint8_t i = 0; i < 8; i++) {
    2034:	19 82       	std	Y+1, r1	; 0x01
    2036:	82 c0       	rjmp	.+260    	; 0x213c <w1_sendcmd+0x118>
	if ((cmd & (1 << i)) == 1 << i) {
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	48 2f       	mov	r20, r24
    2042:	50 e0       	ldi	r21, 0x00	; 0
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	02 c0       	rjmp	.+4      	; 0x204e <w1_sendcmd+0x2a>
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	4a 95       	dec	r20
    2050:	e2 f7       	brpl	.-8      	; 0x204a <w1_sendcmd+0x26>
    2052:	28 23       	and	r18, r24
    2054:	39 23       	and	r19, r25
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	48 2f       	mov	r20, r24
    205a:	50 e0       	ldi	r21, 0x00	; 0
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <w1_sendcmd+0x42>
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	4a 95       	dec	r20
    2068:	e2 f7       	brpl	.-8      	; 0x2062 <w1_sendcmd+0x3e>
    206a:	28 17       	cp	r18, r24
    206c:	39 07       	cpc	r19, r25
    206e:	91 f5       	brne	.+100    	; 0x20d4 <w1_sendcmd+0xb0>
	    W1_DDR |= 1 << port_pin;
    2070:	8a e2       	ldi	r24, 0x2A	; 42
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	2a e2       	ldi	r18, 0x2A	; 42
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	f9 01       	movw	r30, r18
    207a:	20 81       	ld	r18, Z
    207c:	62 2f       	mov	r22, r18
    207e:	2b 81       	ldd	r18, Y+3	; 0x03
    2080:	42 2f       	mov	r20, r18
    2082:	50 e0       	ldi	r21, 0x00	; 0
    2084:	21 e0       	ldi	r18, 0x01	; 1
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	02 c0       	rjmp	.+4      	; 0x208e <w1_sendcmd+0x6a>
    208a:	22 0f       	add	r18, r18
    208c:	33 1f       	adc	r19, r19
    208e:	4a 95       	dec	r20
    2090:	e2 f7       	brpl	.-8      	; 0x208a <w1_sendcmd+0x66>
    2092:	26 2b       	or	r18, r22
    2094:	fc 01       	movw	r30, r24
    2096:	20 83       	st	Z, r18
	    delay(2);
    2098:	84 e0       	ldi	r24, 0x04	; 4
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_delayFourCycles>
	    W1_DDR &= ~(1 << port_pin);
    20a0:	8a e2       	ldi	r24, 0x2A	; 42
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	2a e2       	ldi	r18, 0x2A	; 42
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	f9 01       	movw	r30, r18
    20aa:	20 81       	ld	r18, Z
    20ac:	62 2f       	mov	r22, r18
    20ae:	2b 81       	ldd	r18, Y+3	; 0x03
    20b0:	42 2f       	mov	r20, r18
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	21 e0       	ldi	r18, 0x01	; 1
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <w1_sendcmd+0x9a>
    20ba:	22 0f       	add	r18, r18
    20bc:	33 1f       	adc	r19, r19
    20be:	4a 95       	dec	r20
    20c0:	e2 f7       	brpl	.-8      	; 0x20ba <w1_sendcmd+0x96>
    20c2:	20 95       	com	r18
    20c4:	26 23       	and	r18, r22
    20c6:	fc 01       	movw	r30, r24
    20c8:	20 83       	st	Z, r18
	    delay(65);
    20ca:	82 e8       	ldi	r24, 0x82	; 130
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_delayFourCycles>
    20d2:	31 c0       	rjmp	.+98     	; 0x2136 <w1_sendcmd+0x112>
	} else {

	    W1_DDR |= 1 << port_pin;
    20d4:	8a e2       	ldi	r24, 0x2A	; 42
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	2a e2       	ldi	r18, 0x2A	; 42
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	f9 01       	movw	r30, r18
    20de:	20 81       	ld	r18, Z
    20e0:	62 2f       	mov	r22, r18
    20e2:	2b 81       	ldd	r18, Y+3	; 0x03
    20e4:	42 2f       	mov	r20, r18
    20e6:	50 e0       	ldi	r21, 0x00	; 0
    20e8:	21 e0       	ldi	r18, 0x01	; 1
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	02 c0       	rjmp	.+4      	; 0x20f2 <w1_sendcmd+0xce>
    20ee:	22 0f       	add	r18, r18
    20f0:	33 1f       	adc	r19, r19
    20f2:	4a 95       	dec	r20
    20f4:	e2 f7       	brpl	.-8      	; 0x20ee <w1_sendcmd+0xca>
    20f6:	26 2b       	or	r18, r22
    20f8:	fc 01       	movw	r30, r24
    20fa:	20 83       	st	Z, r18
	    delay(65);
    20fc:	82 e8       	ldi	r24, 0x82	; 130
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_delayFourCycles>
	    W1_DDR &= ~(1 << port_pin);
    2104:	8a e2       	ldi	r24, 0x2A	; 42
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	2a e2       	ldi	r18, 0x2A	; 42
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	f9 01       	movw	r30, r18
    210e:	20 81       	ld	r18, Z
    2110:	62 2f       	mov	r22, r18
    2112:	2b 81       	ldd	r18, Y+3	; 0x03
    2114:	42 2f       	mov	r20, r18
    2116:	50 e0       	ldi	r21, 0x00	; 0
    2118:	21 e0       	ldi	r18, 0x01	; 1
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <w1_sendcmd+0xfe>
    211e:	22 0f       	add	r18, r18
    2120:	33 1f       	adc	r19, r19
    2122:	4a 95       	dec	r20
    2124:	e2 f7       	brpl	.-8      	; 0x211e <w1_sendcmd+0xfa>
    2126:	20 95       	com	r18
    2128:	26 23       	and	r18, r22
    212a:	fc 01       	movw	r30, r24
    212c:	20 83       	st	Z, r18
	    delay(5);
    212e:	8a e0       	ldi	r24, 0x0A	; 10
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_delayFourCycles>
    return device;
}
//функция посылает команду на устройство 1-wire
void w1_sendcmd(uint8_t cmd, uint8_t port_pin)
{
    for (uint8_t i = 0; i < 8; i++) {
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	8f 5f       	subi	r24, 0xFF	; 255
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	88 30       	cpi	r24, 0x08	; 8
    2140:	08 f4       	brcc	.+2      	; 0x2144 <w1_sendcmd+0x120>
    2142:	7a cf       	rjmp	.-268    	; 0x2038 <w1_sendcmd+0x14>
	    delay(65);
	    W1_DDR &= ~(1 << port_pin);
	    delay(5);
	}
    }
}
    2144:	00 00       	nop
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	df 91       	pop	r29
    214e:	cf 91       	pop	r28
    2150:	08 95       	ret

00002152 <w1_receive_byte>:
//функция читает один байт с устройства 1-wire
uint8_t w1_receive_byte(uint8_t port_pin)
{
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	00 d0       	rcall	.+0      	; 0x2158 <w1_receive_byte+0x6>
    2158:	1f 92       	push	r1
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t data = 0;
    2160:	19 82       	std	Y+1, r1	; 0x01
    for (uint8_t i = 0; i < 8; i++) {
    2162:	1a 82       	std	Y+2, r1	; 0x02
    2164:	68 c0       	rjmp	.+208    	; 0x2236 <w1_receive_byte+0xe4>
	W1_DDR |= 1 << port_pin;
    2166:	8a e2       	ldi	r24, 0x2A	; 42
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	2a e2       	ldi	r18, 0x2A	; 42
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	f9 01       	movw	r30, r18
    2170:	20 81       	ld	r18, Z
    2172:	62 2f       	mov	r22, r18
    2174:	2b 81       	ldd	r18, Y+3	; 0x03
    2176:	42 2f       	mov	r20, r18
    2178:	50 e0       	ldi	r21, 0x00	; 0
    217a:	21 e0       	ldi	r18, 0x01	; 1
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <w1_receive_byte+0x32>
    2180:	22 0f       	add	r18, r18
    2182:	33 1f       	adc	r19, r19
    2184:	4a 95       	dec	r20
    2186:	e2 f7       	brpl	.-8      	; 0x2180 <w1_receive_byte+0x2e>
    2188:	26 2b       	or	r18, r22
    218a:	fc 01       	movw	r30, r24
    218c:	20 83       	st	Z, r18
	delay(2);
    218e:	84 e0       	ldi	r24, 0x04	; 4
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_delayFourCycles>
	W1_DDR &= ~(1 << port_pin);
    2196:	8a e2       	ldi	r24, 0x2A	; 42
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	2a e2       	ldi	r18, 0x2A	; 42
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	f9 01       	movw	r30, r18
    21a0:	20 81       	ld	r18, Z
    21a2:	62 2f       	mov	r22, r18
    21a4:	2b 81       	ldd	r18, Y+3	; 0x03
    21a6:	42 2f       	mov	r20, r18
    21a8:	50 e0       	ldi	r21, 0x00	; 0
    21aa:	21 e0       	ldi	r18, 0x01	; 1
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <w1_receive_byte+0x62>
    21b0:	22 0f       	add	r18, r18
    21b2:	33 1f       	adc	r19, r19
    21b4:	4a 95       	dec	r20
    21b6:	e2 f7       	brpl	.-8      	; 0x21b0 <w1_receive_byte+0x5e>
    21b8:	20 95       	com	r18
    21ba:	26 23       	and	r18, r22
    21bc:	fc 01       	movw	r30, r24
    21be:	20 83       	st	Z, r18
	delay(7);
    21c0:	8e e0       	ldi	r24, 0x0E	; 14
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_delayFourCycles>

	if ((W1_PIN & (1 << port_pin)) == 0x00)
    21c8:	89 e2       	ldi	r24, 0x29	; 41
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	fc 01       	movw	r30, r24
    21ce:	80 81       	ld	r24, Z
    21d0:	88 2f       	mov	r24, r24
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	2b 81       	ldd	r18, Y+3	; 0x03
    21d6:	22 2f       	mov	r18, r18
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <w1_receive_byte+0x8e>
    21dc:	95 95       	asr	r25
    21de:	87 95       	ror	r24
    21e0:	2a 95       	dec	r18
    21e2:	e2 f7       	brpl	.-8      	; 0x21dc <w1_receive_byte+0x8a>
    21e4:	81 70       	andi	r24, 0x01	; 1
    21e6:	99 27       	eor	r25, r25
    21e8:	89 2b       	or	r24, r25
    21ea:	81 f4       	brne	.+32     	; 0x220c <w1_receive_byte+0xba>
	    data &= ~(1 << i);
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	28 2f       	mov	r18, r24
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	02 c0       	rjmp	.+4      	; 0x21fc <w1_receive_byte+0xaa>
    21f8:	88 0f       	add	r24, r24
    21fa:	99 1f       	adc	r25, r25
    21fc:	2a 95       	dec	r18
    21fe:	e2 f7       	brpl	.-8      	; 0x21f8 <w1_receive_byte+0xa6>
    2200:	98 2f       	mov	r25, r24
    2202:	90 95       	com	r25
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	89 23       	and	r24, r25
    2208:	89 83       	std	Y+1, r24	; 0x01
    220a:	0e c0       	rjmp	.+28     	; 0x2228 <w1_receive_byte+0xd6>
	else
	    data |= 1 << i;
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	28 2f       	mov	r18, r24
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	02 c0       	rjmp	.+4      	; 0x221c <w1_receive_byte+0xca>
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	2a 95       	dec	r18
    221e:	e2 f7       	brpl	.-8      	; 0x2218 <w1_receive_byte+0xc6>
    2220:	98 2f       	mov	r25, r24
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	89 2b       	or	r24, r25
    2226:	89 83       	std	Y+1, r24	; 0x01
	delay(50);
    2228:	84 e6       	ldi	r24, 0x64	; 100
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_delayFourCycles>
}
//функция читает один байт с устройства 1-wire
uint8_t w1_receive_byte(uint8_t port_pin)
{
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++) {
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	8f 5f       	subi	r24, 0xFF	; 255
    2234:	8a 83       	std	Y+2, r24	; 0x02
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	88 30       	cpi	r24, 0x08	; 8
    223a:	08 f4       	brcc	.+2      	; 0x223e <w1_receive_byte+0xec>
    223c:	94 cf       	rjmp	.-216    	; 0x2166 <w1_receive_byte+0x14>
	    data &= ~(1 << i);
	else
	    data |= 1 << i;
	delay(50);
    }
    return data;
    223e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	df 91       	pop	r29
    2248:	cf 91       	pop	r28
    224a:	08 95       	ret

0000224c <ow_crc8>:

static uint8_t ow_crc8(uint8_t seed, uint8_t inData)
{
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	00 d0       	rcall	.+0      	; 0x2252 <ow_crc8+0x6>
    2252:	00 d0       	rcall	.+0      	; 0x2254 <ow_crc8+0x8>
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	8b 83       	std	Y+3, r24	; 0x03
    225a:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t bitsLeft, temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--) {
    225c:	88 e0       	ldi	r24, 0x08	; 8
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	1c c0       	rjmp	.+56     	; 0x229a <ow_crc8+0x4e>
	temp = ((seed ^ inData) & 0x01);
    2262:	9b 81       	ldd	r25, Y+3	; 0x03
    2264:	8c 81       	ldd	r24, Y+4	; 0x04
    2266:	89 27       	eor	r24, r25
    2268:	81 70       	andi	r24, 0x01	; 1
    226a:	8a 83       	std	Y+2, r24	; 0x02
	if (temp == 0)
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	88 23       	and	r24, r24
    2270:	21 f4       	brne	.+8      	; 0x227a <ow_crc8+0x2e>
	    seed >>= 1;
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	86 95       	lsr	r24
    2276:	8b 83       	std	Y+3, r24	; 0x03
    2278:	0a c0       	rjmp	.+20     	; 0x228e <ow_crc8+0x42>
	else {
	    seed ^= 0x18;
    227a:	9b 81       	ldd	r25, Y+3	; 0x03
    227c:	88 e1       	ldi	r24, 0x18	; 24
    227e:	89 27       	eor	r24, r25
    2280:	8b 83       	std	Y+3, r24	; 0x03
	    seed >>= 1;
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	86 95       	lsr	r24
    2286:	8b 83       	std	Y+3, r24	; 0x03
	    seed |= 0x80;
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	80 68       	ori	r24, 0x80	; 128
    228c:	8b 83       	std	Y+3, r24	; 0x03
	}
	inData >>= 1;
    228e:	8c 81       	ldd	r24, Y+4	; 0x04
    2290:	86 95       	lsr	r24
    2292:	8c 83       	std	Y+4, r24	; 0x04

static uint8_t ow_crc8(uint8_t seed, uint8_t inData)
{
    uint8_t bitsLeft, temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--) {
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	81 50       	subi	r24, 0x01	; 1
    2298:	89 83       	std	Y+1, r24	; 0x01
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	88 23       	and	r24, r24
    229e:	09 f7       	brne	.-62     	; 0x2262 <ow_crc8+0x16>
	    seed |= 0x80;
	}
	inData >>= 1;
    }

    return seed;
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	df 91       	pop	r29
    22ac:	cf 91       	pop	r28
    22ae:	08 95       	ret

000022b0 <init_18b20>:

void init_18b20(uint8_t port_pin) // несколько девайсов на разных пинах одного порта
{
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	1f 92       	push	r1
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	89 83       	std	Y+1, r24	; 0x01
    cli();
    22bc:	f8 94       	cli
    if (w1_find(port_pin) == 1) //если есть устройство на шине
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <w1_find>
    22c4:	81 30       	cpi	r24, 0x01	; 1
    22c6:	41 f4       	brne	.+16     	; 0x22d8 <init_18b20+0x28>
    {
	w1_sendcmd(0xcc, port_pin); //пропустить ROM код, мы знаем, что у нас одно устройство или передаем всем
    22c8:	69 81       	ldd	r22, Y+1	; 0x01
    22ca:	8c ec       	ldi	r24, 0xCC	; 204
    22cc:	0e 94 12 10 	call	0x2024	; 0x2024 <w1_sendcmd>
	w1_sendcmd(0x44, port_pin); //преобразовать температуру
    22d0:	69 81       	ldd	r22, Y+1	; 0x01
    22d2:	84 e4       	ldi	r24, 0x44	; 68
    22d4:	0e 94 12 10 	call	0x2024	; 0x2024 <w1_sendcmd>
    }
    sei();
    22d8:	78 94       	sei
}
    22da:	00 00       	nop
    22dc:	0f 90       	pop	r0
    22de:	df 91       	pop	r29
    22e0:	cf 91       	pop	r28
    22e2:	08 95       	ret

000022e4 <temp_18b20>:

//функция преобразует полученные с датчика 18b20 данные в температуру
uint8_t temp_18b20(uint8_t port_pin) // несколько девайсов на разных пинах одного порта
{
    22e4:	0f 93       	push	r16
    22e6:	1f 93       	push	r17
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	2e 97       	sbiw	r28, 0x0e	; 14
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	8e 87       	std	Y+14, r24	; 0x0e
    uint8_t rcrc, crc = 0, data[8], i;
    22fe:	19 82       	std	Y+1, r1	; 0x01
    int temp = 0;
    2300:	1c 82       	std	Y+4, r1	; 0x04
    2302:	1b 82       	std	Y+3, r1	; 0x03
    cli();
    2304:	f8 94       	cli
    if (w1_find(port_pin) == 1) //если есть устройство на шине
    2306:	8e 85       	ldd	r24, Y+14	; 0x0e
    2308:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <w1_find>
    230c:	81 30       	cpi	r24, 0x01	; 1
    230e:	09 f0       	breq	.+2      	; 0x2312 <temp_18b20+0x2e>
    2310:	57 c0       	rjmp	.+174    	; 0x23c0 <temp_18b20+0xdc>
	w1_sendcmd(0x44, port_pin); //преобразовать температуру
	sei();
	delay(750); //преобразование в 12 битном режиме занимает 750ms
	cli();
*/
	w1_find(port_pin); //снова посылаем Presence и Reset
    2312:	8e 85       	ldd	r24, Y+14	; 0x0e
    2314:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <w1_find>
	w1_sendcmd(0xcc, port_pin);
    2318:	6e 85       	ldd	r22, Y+14	; 0x0e
    231a:	8c ec       	ldi	r24, 0xCC	; 204
    231c:	0e 94 12 10 	call	0x2024	; 0x2024 <w1_sendcmd>
	w1_sendcmd(0xbe, port_pin); //передать байты ведущему(у 18b20 в первых двух содержится температура)
    2320:	6e 85       	ldd	r22, Y+14	; 0x0e
    2322:	8e eb       	ldi	r24, 0xBE	; 190
    2324:	0e 94 12 10 	call	0x2024	; 0x2024 <w1_sendcmd>
//		data[0] = w1_receive_byte();//читаем два байта с температурой
//		data[1] = w1_receive_byte();
	for (i = 0; i < 8; i++) {
    2328:	1a 82       	std	Y+2, r1	; 0x02
    232a:	1f c0       	rjmp	.+62     	; 0x236a <temp_18b20+0x86>
	    data[i] = w1_receive_byte(port_pin);
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	08 2f       	mov	r16, r24
    2330:	10 e0       	ldi	r17, 0x00	; 0
    2332:	8e 85       	ldd	r24, Y+14	; 0x0e
    2334:	0e 94 a9 10 	call	0x2152	; 0x2152 <w1_receive_byte>
    2338:	28 2f       	mov	r18, r24
    233a:	ce 01       	movw	r24, r28
    233c:	06 96       	adiw	r24, 0x06	; 6
    233e:	80 0f       	add	r24, r16
    2340:	91 1f       	adc	r25, r17
    2342:	fc 01       	movw	r30, r24
    2344:	20 83       	st	Z, r18
	    crc = ow_crc8(crc, data[i]);
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	88 2f       	mov	r24, r24
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9e 01       	movw	r18, r28
    234e:	2a 5f       	subi	r18, 0xFA	; 250
    2350:	3f 4f       	sbci	r19, 0xFF	; 255
    2352:	82 0f       	add	r24, r18
    2354:	93 1f       	adc	r25, r19
    2356:	fc 01       	movw	r30, r24
    2358:	80 81       	ld	r24, Z
    235a:	68 2f       	mov	r22, r24
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	0e 94 26 11 	call	0x224c	; 0x224c <ow_crc8>
    2362:	89 83       	std	Y+1, r24	; 0x01
	w1_find(port_pin); //снова посылаем Presence и Reset
	w1_sendcmd(0xcc, port_pin);
	w1_sendcmd(0xbe, port_pin); //передать байты ведущему(у 18b20 в первых двух содержится температура)
//		data[0] = w1_receive_byte();//читаем два байта с температурой
//		data[1] = w1_receive_byte();
	for (i = 0; i < 8; i++) {
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	8f 5f       	subi	r24, 0xFF	; 255
    2368:	8a 83       	std	Y+2, r24	; 0x02
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	88 30       	cpi	r24, 0x08	; 8
    236e:	f0 f2       	brcs	.-68     	; 0x232c <temp_18b20+0x48>
	    data[i] = w1_receive_byte(port_pin);
	    crc = ow_crc8(crc, data[i]);
	}
	rcrc = w1_receive_byte(port_pin);
    2370:	8e 85       	ldd	r24, Y+14	; 0x0e
    2372:	0e 94 a9 10 	call	0x2152	; 0x2152 <w1_receive_byte>
    2376:	8d 83       	std	Y+5, r24	; 0x05
	if (rcrc == crc) {
    2378:	9d 81       	ldd	r25, Y+5	; 0x05
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	98 17       	cp	r25, r24
    237e:	01 f5       	brne	.+64     	; 0x23c0 <temp_18b20+0xdc>
	    //загоняем в двух байтную переменную
	    temp = data[1];
    2380:	8f 81       	ldd	r24, Y+7	; 0x07
    2382:	88 2f       	mov	r24, r24
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	9c 83       	std	Y+4, r25	; 0x04
    2388:	8b 83       	std	Y+3, r24	; 0x03
	    temp = temp << 8;
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	9c 81       	ldd	r25, Y+4	; 0x04
    238e:	98 2f       	mov	r25, r24
    2390:	88 27       	eor	r24, r24
    2392:	9c 83       	std	Y+4, r25	; 0x04
    2394:	8b 83       	std	Y+3, r24	; 0x03
	    temp |= data[0];
    2396:	8e 81       	ldd	r24, Y+6	; 0x06
    2398:	88 2f       	mov	r24, r24
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	2b 81       	ldd	r18, Y+3	; 0x03
    239e:	3c 81       	ldd	r19, Y+4	; 0x04
    23a0:	82 2b       	or	r24, r18
    23a2:	93 2b       	or	r25, r19
    23a4:	9c 83       	std	Y+4, r25	; 0x04
    23a6:	8b 83       	std	Y+3, r24	; 0x03
	    //переводим в градусы
//		temp *= 0.0625;//0.0625 градуса на единицу данных
	    temp >>= 4;
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	95 95       	asr	r25
    23ae:	87 95       	ror	r24
    23b0:	95 95       	asr	r25
    23b2:	87 95       	ror	r24
    23b4:	95 95       	asr	r25
    23b6:	87 95       	ror	r24
    23b8:	95 95       	asr	r25
    23ba:	87 95       	ror	r24
    23bc:	9c 83       	std	Y+4, r25	; 0x04
    23be:	8b 83       	std	Y+3, r24	; 0x03
	}
    }
    sei();
    23c0:	78 94       	sei
    //возвращаем температуру
    return temp;
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    23c4:	2e 96       	adiw	r28, 0x0e	; 14
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	1f 91       	pop	r17
    23d6:	0f 91       	pop	r16
    23d8:	08 95       	ret

000023da <_delayFourCycles>:

/*************************************************************************
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <_delayFourCycles+0x6>
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	9a 83       	std	Y+2, r25	; 0x02
    23e6:	89 83       	std	Y+1, r24	; 0x01
    if ( __count == 0 )    
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	9a 81       	ldd	r25, Y+2	; 0x02
    23ec:	89 2b       	or	r24, r25
    23ee:	11 f4       	brne	.+4      	; 0x23f4 <_delayFourCycles+0x1a>
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    23f0:	00 c0       	rjmp	.+0      	; 0x23f2 <_delayFourCycles+0x18>
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
   
}
    23f2:	06 c0       	rjmp	.+12     	; 0x2400 <_delayFourCycles+0x26>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
    23f6:	9a 81       	ldd	r25, Y+2	; 0x02
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <_delayFourCycles+0x1e>
    23fc:	9a 83       	std	Y+2, r25	; 0x02
    23fe:	89 83       	std	Y+1, r24	; 0x01
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
   
}
    2400:	00 00       	nop
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	df 91       	pop	r29
    2408:	cf 91       	pop	r28
    240a:	08 95       	ret

0000240c <USART_RxTx485>:
static uint8_t rxBufHead = 0;
static volatile uint8_t rxCount = 0;


void USART_RxTx485(uint8_t Rx)
{
    240c:	cf 93       	push	r28
    240e:	df 93       	push	r29
    2410:	1f 92       	push	r1
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	89 83       	std	Y+1, r24	; 0x01
	DDRB |= 1<<1; //PB1
    2418:	84 e2       	ldi	r24, 0x24	; 36
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	24 e2       	ldi	r18, 0x24	; 36
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	f9 01       	movw	r30, r18
    2422:	20 81       	ld	r18, Z
    2424:	22 60       	ori	r18, 0x02	; 2
    2426:	fc 01       	movw	r30, r24
    2428:	20 83       	st	Z, r18
	if(Rx)
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	88 23       	and	r24, r24
    242e:	51 f0       	breq	.+20     	; 0x2444 <USART_RxTx485+0x38>
		PORTB &= ~(1<<1); //PB1
    2430:	85 e2       	ldi	r24, 0x25	; 37
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	25 e2       	ldi	r18, 0x25	; 37
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	f9 01       	movw	r30, r18
    243a:	20 81       	ld	r18, Z
    243c:	2d 7f       	andi	r18, 0xFD	; 253
    243e:	fc 01       	movw	r30, r24
    2440:	20 83       	st	Z, r18
	else
		PORTB |= 1<<1; //PB1
}
    2442:	09 c0       	rjmp	.+18     	; 0x2456 <USART_RxTx485+0x4a>
{
	DDRB |= 1<<1; //PB1
	if(Rx)
		PORTB &= ~(1<<1); //PB1
	else
		PORTB |= 1<<1; //PB1
    2444:	85 e2       	ldi	r24, 0x25	; 37
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	25 e2       	ldi	r18, 0x25	; 37
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	f9 01       	movw	r30, r18
    244e:	20 81       	ld	r18, Z
    2450:	22 60       	ori	r18, 0x02	; 2
    2452:	fc 01       	movw	r30, r24
    2454:	20 83       	st	Z, r18
}
    2456:	00 00       	nop
    2458:	0f 90       	pop	r0
    245a:	df 91       	pop	r29
    245c:	cf 91       	pop	r28
    245e:	08 95       	ret

00002460 <USART_Init>:

//инициализация usart`a
void USART_Init(void)
{
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
	UBRR0L = (uint8_t)(BAUD_PRESCALE & 0xff);
    2468:	84 ec       	ldi	r24, 0xC4	; 196
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	27 e6       	ldi	r18, 0x67	; 103
    246e:	fc 01       	movw	r30, r24
    2470:	20 83       	st	Z, r18
	UBRR0H = (uint8_t)(BAUD_PRESCALE >> 8); 
    2472:	85 ec       	ldi	r24, 0xC5	; 197
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	fc 01       	movw	r30, r24
    2478:	10 82       	st	Z, r1
//разр. прерыв при приеме  разр приема, разр передачи. размер слова 8 разрядов
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    247a:	81 ec       	ldi	r24, 0xC1	; 193
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	28 e9       	ldi	r18, 0x98	; 152
    2480:	fc 01       	movw	r30, r24
    2482:	20 83       	st	Z, r18
        (0 << USBS0) |
// 8-bits of data
        (1 << UCSZ01) |
        (1 << UCSZ00); 
*/
	USART_RxTx485(1);
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	0e 94 06 12 	call	0x240c	; 0x240c <USART_RxTx485>
}
    248a:	00 00       	nop
    248c:	df 91       	pop	r29
    248e:	cf 91       	pop	r28
    2490:	08 95       	ret

00002492 <USART_GetTxCount>:

//______________________________________________________________________________
//возвращает колличество символов передающего буфера
uint8_t USART_GetTxCount(void)
{
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
  return txCount;  
    249a:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <txCount>
}
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	08 95       	ret

000024a4 <USART_FlushTxBuf>:

//"очищает" передающий буфер
void USART_FlushTxBuf(void)
{
    24a4:	cf 93       	push	r28
    24a6:	df 93       	push	r29
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
  txBufTail = 0;
    24ac:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <txBufTail>
  txBufHead = 0;
    24b0:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <txBufHead>
  txCount = 0;
    24b4:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <txCount>
}
    24b8:	00 00       	nop
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	08 95       	ret

000024c0 <USART_PutChar>:

//помещает символ в буфер, инициирует начало передачи
void USART_PutChar(uint8_t sym)
{
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	1f 92       	push	r1
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	89 83       	std	Y+1, r24	; 0x01
		txBufTail++;                 //и индекс хвоста буфера
		if (txBufTail == SIZE_TBUF) txBufTail = 0;
		}
	}
	*/
	while(!( UCSR0A & (1<<UDRE0)))
    24cc:	04 c0       	rjmp	.+8      	; 0x24d6 <USART_PutChar+0x16>
		delay(1);
    24ce:	82 e0       	ldi	r24, 0x02	; 2
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	0e 94 ed 11 	call	0x23da	; 0x23da <_delayFourCycles>
		txBufTail++;                 //и индекс хвоста буфера
		if (txBufTail == SIZE_TBUF) txBufTail = 0;
		}
	}
	*/
	while(!( UCSR0A & (1<<UDRE0)))
    24d6:	80 ec       	ldi	r24, 0xC0	; 192
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	fc 01       	movw	r30, r24
    24dc:	80 81       	ld	r24, Z
    24de:	88 2f       	mov	r24, r24
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	80 72       	andi	r24, 0x20	; 32
    24e4:	99 27       	eor	r25, r25
    24e6:	89 2b       	or	r24, r25
    24e8:	91 f3       	breq	.-28     	; 0x24ce <USART_PutChar+0xe>
		delay(1);
	USART_RxTx485(0);
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	0e 94 06 12 	call	0x240c	; 0x240c <USART_RxTx485>
	UDR0 = sym;
    24f0:	86 ec       	ldi	r24, 0xC6	; 198
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	29 81       	ldd	r18, Y+1	; 0x01
    24f6:	fc 01       	movw	r30, r24
    24f8:	20 83       	st	Z, r18

	while(!( UCSR0A & (1<<UDRE0)))
    24fa:	04 c0       	rjmp	.+8      	; 0x2504 <USART_PutChar+0x44>
		delay(1);
    24fc:	82 e0       	ldi	r24, 0x02	; 2
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	0e 94 ed 11 	call	0x23da	; 0x23da <_delayFourCycles>
	while(!( UCSR0A & (1<<UDRE0)))
		delay(1);
	USART_RxTx485(0);
	UDR0 = sym;

	while(!( UCSR0A & (1<<UDRE0)))
    2504:	80 ec       	ldi	r24, 0xC0	; 192
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	fc 01       	movw	r30, r24
    250a:	80 81       	ld	r24, Z
    250c:	88 2f       	mov	r24, r24
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	80 72       	andi	r24, 0x20	; 32
    2512:	99 27       	eor	r25, r25
    2514:	89 2b       	or	r24, r25
    2516:	91 f3       	breq	.-28     	; 0x24fc <USART_PutChar+0x3c>
		delay(1);
	USART_RxTx485(1);
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	0e 94 06 12 	call	0x240c	; 0x240c <USART_RxTx485>
}
    251e:	00 00       	nop
    2520:	0f 90       	pop	r0
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	08 95       	ret

00002528 <USART_SendStr>:

//функция посылающая строку по usart`у
void USART_SendStr(char * data)
{
    2528:	cf 93       	push	r28
    252a:	df 93       	push	r29
    252c:	00 d0       	rcall	.+0      	; 0x252e <USART_SendStr+0x6>
    252e:	1f 92       	push	r1
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	9b 83       	std	Y+3, r25	; 0x03
    2536:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t sym;
  while(*data){
    2538:	0d c0       	rjmp	.+26     	; 0x2554 <USART_SendStr+0x2c>
    sym = *data++;
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	9b 81       	ldd	r25, Y+3	; 0x03
    253e:	9c 01       	movw	r18, r24
    2540:	2f 5f       	subi	r18, 0xFF	; 255
    2542:	3f 4f       	sbci	r19, 0xFF	; 255
    2544:	3b 83       	std	Y+3, r19	; 0x03
    2546:	2a 83       	std	Y+2, r18	; 0x02
    2548:	fc 01       	movw	r30, r24
    254a:	80 81       	ld	r24, Z
    254c:	89 83       	std	Y+1, r24	; 0x01
    USART_PutChar(sym);
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	0e 94 60 12 	call	0x24c0	; 0x24c0 <USART_PutChar>

//функция посылающая строку по usart`у
void USART_SendStr(char * data)
{
  uint8_t sym;
  while(*data){
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	9b 81       	ldd	r25, Y+3	; 0x03
    2558:	fc 01       	movw	r30, r24
    255a:	80 81       	ld	r24, Z
    255c:	88 23       	and	r24, r24
    255e:	69 f7       	brne	.-38     	; 0x253a <USART_SendStr+0x12>
    sym = *data++;
    USART_PutChar(sym);
  }
}
    2560:	00 00       	nop
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	08 95       	ret

0000256e <USART_GetRxCount>:
} 
*/
//______________________________________________________________________________
//возвращает колличество символов находящихся в приемном буфере
uint8_t USART_GetRxCount(void)
{
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
  return rxCount;  
    2576:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <rxCount>
}
    257a:	df 91       	pop	r29
    257c:	cf 91       	pop	r28
    257e:	08 95       	ret

00002580 <USART_FlushRxBuf>:

//"очищает" приемный буфер
void USART_FlushRxBuf(void)
{
    2580:	cf 93       	push	r28
    2582:	df 93       	push	r29
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
  DisableRxInt(); //запрещаем прерывание по заверщению приема
    2588:	81 ec       	ldi	r24, 0xC1	; 193
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	21 ec       	ldi	r18, 0xC1	; 193
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	f9 01       	movw	r30, r18
    2592:	20 81       	ld	r18, Z
    2594:	2f 77       	andi	r18, 0x7F	; 127
    2596:	fc 01       	movw	r30, r24
    2598:	20 83       	st	Z, r18
  rxBufTail = 0;
    259a:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <rxBufTail>
  rxBufHead = 0;
    259e:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <rxBufHead>
  rxCount = 0;
    25a2:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <rxCount>
  EnableRxInt();
    25a6:	81 ec       	ldi	r24, 0xC1	; 193
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	21 ec       	ldi	r18, 0xC1	; 193
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	f9 01       	movw	r30, r18
    25b0:	20 81       	ld	r18, Z
    25b2:	20 68       	ori	r18, 0x80	; 128
    25b4:	fc 01       	movw	r30, r24
    25b6:	20 83       	st	Z, r18
}
    25b8:	00 00       	nop
    25ba:	df 91       	pop	r29
    25bc:	cf 91       	pop	r28
    25be:	08 95       	ret

000025c0 <USART_GetChar>:

//чтение буфера
uint8_t USART_GetChar(void)
{
    25c0:	cf 93       	push	r28
    25c2:	df 93       	push	r29
    25c4:	1f 92       	push	r1
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
  uint8_t sym;
  if (rxCount > 0){                     //если приемный буфер не пустой
    25ca:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <rxCount>
    25ce:	88 23       	and	r24, r24
    25d0:	d9 f0       	breq	.+54     	; 0x2608 <USART_GetChar+0x48>
    sym = usartRxBuf[rxBufHead];        //прочитать из него символ
    25d2:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <rxBufHead>
    25d6:	88 2f       	mov	r24, r24
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	88 5f       	subi	r24, 0xF8	; 248
    25dc:	9c 4f       	sbci	r25, 0xFC	; 252
    25de:	fc 01       	movw	r30, r24
    25e0:	80 81       	ld	r24, Z
    25e2:	89 83       	std	Y+1, r24	; 0x01
    rxCount--;                          //уменьшить счетчик символов
    25e4:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <rxCount>
    25e8:	81 50       	subi	r24, 0x01	; 1
    25ea:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <rxCount>
    rxBufHead++;                        //инкрементировать индекс головы буфера
    25ee:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <rxBufHead>
    25f2:	8f 5f       	subi	r24, 0xFF	; 255
    25f4:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <rxBufHead>
    if (rxBufHead == SIZE_RBUF) rxBufHead = 0;
    25f8:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <rxBufHead>
    25fc:	8a 30       	cpi	r24, 0x0A	; 10
    25fe:	11 f4       	brne	.+4      	; 0x2604 <USART_GetChar+0x44>
    2600:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <rxBufHead>
    return sym;                         //вернуть прочитанный символ
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	01 c0       	rjmp	.+2      	; 0x260a <USART_GetChar+0x4a>
  }
  return 0;
    2608:	80 e0       	ldi	r24, 0x00	; 0
}
    260a:	0f 90       	pop	r0
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	08 95       	ret

00002612 <__vector_18>:

//прерывание по завершению приема
ISR(USART_RX_vect) 
{
    2612:	1f 92       	push	r1
    2614:	0f 92       	push	r0
    2616:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    261a:	0f 92       	push	r0
    261c:	11 24       	eor	r1, r1
    261e:	2f 93       	push	r18
    2620:	3f 93       	push	r19
    2622:	8f 93       	push	r24
    2624:	9f 93       	push	r25
    2626:	ef 93       	push	r30
    2628:	ff 93       	push	r31
    262a:	cf 93       	push	r28
    262c:	df 93       	push	r29
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
  if (rxCount < SIZE_RBUF){                //если в буфере еще есть место
    2632:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <rxCount>
    2636:	8a 30       	cpi	r24, 0x0A	; 10
    2638:	e8 f4       	brcc	.+58     	; 0x2674 <__vector_18+0x62>
      usartRxBuf[rxBufTail] = UDR0;        //считать символ из UDR в буфер
    263a:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <rxBufTail>
    263e:	88 2f       	mov	r24, r24
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	26 ec       	ldi	r18, 0xC6	; 198
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	f9 01       	movw	r30, r18
    2648:	20 81       	ld	r18, Z
    264a:	88 5f       	subi	r24, 0xF8	; 248
    264c:	9c 4f       	sbci	r25, 0xFC	; 252
    264e:	fc 01       	movw	r30, r24
    2650:	20 83       	st	Z, r18
      rxBufTail++;                             //увеличить индекс хвоста приемного буфера
    2652:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <rxBufTail>
    2656:	8f 5f       	subi	r24, 0xFF	; 255
    2658:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <rxBufTail>
      if (rxBufTail == SIZE_RBUF) rxBufTail = 0;  
    265c:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <rxBufTail>
    2660:	8a 30       	cpi	r24, 0x0A	; 10
    2662:	11 f4       	brne	.+4      	; 0x2668 <__vector_18+0x56>
    2664:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <rxBufTail>
      rxCount++;                                 //увеличить счетчик принятых символов
    2668:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <rxCount>
    266c:	8f 5f       	subi	r24, 0xFF	; 255
    266e:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <rxCount>
    }
	else
		usartRxBuf[0] = UDR0;
} 
    2672:	06 c0       	rjmp	.+12     	; 0x2680 <__vector_18+0x6e>
      rxBufTail++;                             //увеличить индекс хвоста приемного буфера
      if (rxBufTail == SIZE_RBUF) rxBufTail = 0;  
      rxCount++;                                 //увеличить счетчик принятых символов
    }
	else
		usartRxBuf[0] = UDR0;
    2674:	86 ec       	ldi	r24, 0xC6	; 198
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	fc 01       	movw	r30, r24
    267a:	80 81       	ld	r24, Z
    267c:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <usartRxBuf>
} 
    2680:	00 00       	nop
    2682:	df 91       	pop	r29
    2684:	cf 91       	pop	r28
    2686:	ff 91       	pop	r31
    2688:	ef 91       	pop	r30
    268a:	9f 91       	pop	r25
    268c:	8f 91       	pop	r24
    268e:	3f 91       	pop	r19
    2690:	2f 91       	pop	r18
    2692:	0f 90       	pop	r0
    2694:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2698:	0f 90       	pop	r0
    269a:	1f 90       	pop	r1
    269c:	18 95       	reti

0000269e <__divmodhi4>:
    269e:	97 fb       	bst	r25, 7
    26a0:	07 2e       	mov	r0, r23
    26a2:	16 f4       	brtc	.+4      	; 0x26a8 <__divmodhi4+0xa>
    26a4:	00 94       	com	r0
    26a6:	07 d0       	rcall	.+14     	; 0x26b6 <__divmodhi4_neg1>
    26a8:	77 fd       	sbrc	r23, 7
    26aa:	09 d0       	rcall	.+18     	; 0x26be <__divmodhi4_neg2>
    26ac:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__udivmodhi4>
    26b0:	07 fc       	sbrc	r0, 7
    26b2:	05 d0       	rcall	.+10     	; 0x26be <__divmodhi4_neg2>
    26b4:	3e f4       	brtc	.+14     	; 0x26c4 <__divmodhi4_exit>

000026b6 <__divmodhi4_neg1>:
    26b6:	90 95       	com	r25
    26b8:	81 95       	neg	r24
    26ba:	9f 4f       	sbci	r25, 0xFF	; 255
    26bc:	08 95       	ret

000026be <__divmodhi4_neg2>:
    26be:	70 95       	com	r23
    26c0:	61 95       	neg	r22
    26c2:	7f 4f       	sbci	r23, 0xFF	; 255

000026c4 <__divmodhi4_exit>:
    26c4:	08 95       	ret

000026c6 <__udivmodhi4>:
    26c6:	aa 1b       	sub	r26, r26
    26c8:	bb 1b       	sub	r27, r27
    26ca:	51 e1       	ldi	r21, 0x11	; 17
    26cc:	07 c0       	rjmp	.+14     	; 0x26dc <__udivmodhi4_ep>

000026ce <__udivmodhi4_loop>:
    26ce:	aa 1f       	adc	r26, r26
    26d0:	bb 1f       	adc	r27, r27
    26d2:	a6 17       	cp	r26, r22
    26d4:	b7 07       	cpc	r27, r23
    26d6:	10 f0       	brcs	.+4      	; 0x26dc <__udivmodhi4_ep>
    26d8:	a6 1b       	sub	r26, r22
    26da:	b7 0b       	sbc	r27, r23

000026dc <__udivmodhi4_ep>:
    26dc:	88 1f       	adc	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	5a 95       	dec	r21
    26e2:	a9 f7       	brne	.-22     	; 0x26ce <__udivmodhi4_loop>
    26e4:	80 95       	com	r24
    26e6:	90 95       	com	r25
    26e8:	bc 01       	movw	r22, r24
    26ea:	cd 01       	movw	r24, r26
    26ec:	08 95       	ret

000026ee <memcpy_P>:
    26ee:	fb 01       	movw	r30, r22
    26f0:	dc 01       	movw	r26, r24
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <memcpy_P+0xa>
    26f4:	05 90       	lpm	r0, Z+
    26f6:	0d 92       	st	X+, r0
    26f8:	41 50       	subi	r20, 0x01	; 1
    26fa:	50 40       	sbci	r21, 0x00	; 0
    26fc:	d8 f7       	brcc	.-10     	; 0x26f4 <memcpy_P+0x6>
    26fe:	08 95       	ret

00002700 <memset>:
    2700:	dc 01       	movw	r26, r24
    2702:	01 c0       	rjmp	.+2      	; 0x2706 <memset+0x6>
    2704:	6d 93       	st	X+, r22
    2706:	41 50       	subi	r20, 0x01	; 1
    2708:	50 40       	sbci	r21, 0x00	; 0
    270a:	e0 f7       	brcc	.-8      	; 0x2704 <memset+0x4>
    270c:	08 95       	ret

0000270e <_exit>:
    270e:	f8 94       	cli

00002710 <__stop_program>:
    2710:	ff cf       	rjmp	.-2      	; 0x2710 <__stop_program>
