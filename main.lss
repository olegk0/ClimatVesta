
main.elf:     формат файла elf32-avr

Разделы:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  000027bc  00002850  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800144  00800144  00002894  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002894  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000028a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000028e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dbc  00000000  00000000  00002970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e0a  00000000  00000000  0000572c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001670  00000000  00000000  00006536  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000080c  00000000  00000000  00007ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b8  00000000  00000000  000083b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000254f  00000000  00000000  00008d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000b2bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Дизассемблирование раздела .text:

00000000 <__vectors>:
       0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
       4:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_1>
       8:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__vector_2>
       c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_3>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_5>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_13>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      68:	96 0b       	sbc	r25, r22
      6a:	b0 0b       	sbc	r27, r16
      6c:	c7 0b       	sbc	r28, r23
      6e:	de 0b       	sbc	r29, r30
      70:	f5 0b       	sbc	r31, r21
      72:	0c 0c       	add	r0, r12
      74:	22 0c       	add	r2, r2
      76:	38 0c       	add	r3, r8
      78:	42 0c       	add	r4, r2
      7a:	45 0c       	add	r4, r5
      7c:	76 0c       	add	r7, r6
      7e:	c2 0c       	add	r12, r2
      80:	c2 0c       	add	r12, r2
      82:	c2 0c       	add	r12, r2
      84:	c2 0c       	add	r12, r2
      86:	c2 0c       	add	r12, r2
      88:	c2 0c       	add	r12, r2
      8a:	7a 0c       	add	r7, r10
      8c:	c2 0c       	add	r12, r2
      8e:	86 0c       	add	r8, r6
      90:	c2 0c       	add	r12, r2
      92:	a3 0c       	add	r10, r3
      94:	c2 0c       	add	r12, r2
      96:	a7 0c       	add	r10, r7
      98:	c2 0c       	add	r12, r2
      9a:	ae 0c       	add	r10, r14
      9c:	82 08       	sbc	r8, r2
      9e:	84 08       	sbc	r8, r4
      a0:	86 08       	sbc	r8, r6
      a2:	5e 08       	sbc	r5, r14
      a4:	60 08       	sbc	r6, r0
      a6:	64 08       	sbc	r6, r4
      a8:	66 08       	sbc	r6, r6
      aa:	68 08       	sbc	r6, r8
      ac:	84 08       	sbc	r8, r4
      ae:	6c 08       	sbc	r6, r12
      b0:	76 08       	sbc	r7, r6
      b2:	84 08       	sbc	r8, r4
      b4:	84 08       	sbc	r8, r4
      b6:	72 08       	sbc	r7, r2
      b8:	84 08       	sbc	r8, r4
      ba:	84 08       	sbc	r8, r4
      bc:	84 08       	sbc	r8, r4
      be:	7a 08       	sbc	r7, r10
      c0:	84 08       	sbc	r8, r4
      c2:	84 08       	sbc	r8, r4
      c4:	5c 08       	sbc	r5, r12
      c6:	84 08       	sbc	r8, r4
      c8:	7e 08       	sbc	r7, r14
      ca:	84 08       	sbc	r8, r4
      cc:	84 08       	sbc	r8, r4
      ce:	84 08       	sbc	r8, r4
      d0:	84 08       	sbc	r8, r4
      d2:	84 08       	sbc	r8, r4
      d4:	84 08       	sbc	r8, r4
      d6:	84 08       	sbc	r8, r4
      d8:	84 08       	sbc	r8, r4
      da:	84 08       	sbc	r8, r4
      dc:	84 08       	sbc	r8, r4
      de:	84 08       	sbc	r8, r4
      e0:	86 08       	sbc	r8, r6
      e2:	5e 08       	sbc	r5, r14
      e4:	62 08       	sbc	r6, r2
      e6:	64 08       	sbc	r6, r4
      e8:	66 08       	sbc	r6, r6
      ea:	68 08       	sbc	r6, r8
      ec:	84 08       	sbc	r8, r4
      ee:	6a 08       	sbc	r6, r10
      f0:	74 08       	sbc	r7, r4
      f2:	84 08       	sbc	r8, r4
      f4:	84 08       	sbc	r8, r4
      f6:	84 08       	sbc	r8, r4
      f8:	84 08       	sbc	r8, r4
      fa:	6e 08       	sbc	r6, r14
      fc:	70 08       	sbc	r7, r0
      fe:	84 08       	sbc	r8, r4
     100:	84 08       	sbc	r8, r4
     102:	78 08       	sbc	r7, r8
     104:	84 08       	sbc	r8, r4
     106:	87 08       	sbc	r8, r7
     108:	7c 08       	sbc	r7, r12
     10a:	84 08       	sbc	r8, r4
     10c:	84 08       	sbc	r8, r4
     10e:	84 08       	sbc	r8, r4
     110:	80 08       	sbc	r8, r0
     112:	08 00       	.word	0x0008	; ????
     114:	00 00       	nop
     116:	be 92       	st	-X, r11
     118:	24 49       	sbci	r18, 0x94	; 148
     11a:	12 3e       	cpi	r17, 0xE2	; 226
     11c:	ab aa       	std	Y+51, r10	; 0x33
     11e:	aa 2a       	or	r10, r26
     120:	be cd       	rjmp	.-1156   	; 0xfffffc9e <__eeprom_end+0xff7efc9e>
     122:	cc cc       	rjmp	.-1640   	; 0xfffffabc <__eeprom_end+0xff7efabc>
     124:	4c 3e       	cpi	r20, 0xEC	; 236
     126:	00 00       	nop
     128:	00 80       	ld	r0, Z
     12a:	be ab       	std	Y+54, r27	; 0x36
     12c:	aa aa       	std	Y+50, r10	; 0x32
     12e:	aa 3e       	cpi	r26, 0xEA	; 234
     130:	00 00       	nop
     132:	00 00       	nop
     134:	bf 00       	.word	0x00bf	; ????
     136:	00 00       	nop
     138:	80 3f       	cpi	r24, 0xF0	; 240
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	00 08       	sbc	r0, r0
     140:	41 78       	andi	r20, 0x81	; 129
     142:	d3 bb       	out	0x13, r29	; 19
     144:	43 87       	std	Z+11, r20	; 0x0b
     146:	d1 13       	cpse	r29, r17
     148:	3d 19       	sub	r19, r13
     14a:	0e 3c       	cpi	r16, 0xCE	; 206
     14c:	c3 bd       	out	0x23, r28	; 35
     14e:	42 82       	std	Z+2, r4	; 0x02
     150:	ad 2b       	or	r26, r29
     152:	3e 68       	ori	r19, 0x8E	; 142
     154:	ec 82       	std	Y+4, r14	; 0x04
     156:	76 be       	out	0x36, r7	; 54
     158:	d9 8f       	std	Y+25, r29	; 0x19
     15a:	e1 a9       	ldd	r30, Z+49	; 0x31
     15c:	3e 4c       	sbci	r19, 0xCE	; 206
     15e:	80 ef       	ldi	r24, 0xF0	; 240
     160:	ff be       	out	0x3f, r15	; 63
     162:	01 c4       	rjmp	.+2050   	; 0x966 <__stack+0x67>
     164:	ff 7f       	andi	r31, 0xFF	; 255
     166:	3f 00       	.word	0x003f	; ????
     168:	00 00       	nop
     16a:	00 00       	nop

0000016c <__ctors_end>:
     16c:	11 24       	eor	r1, r1
     16e:	1f be       	out	0x3f, r1	; 63
     170:	cf ef       	ldi	r28, 0xFF	; 255
     172:	d8 e0       	ldi	r29, 0x08	; 8
     174:	de bf       	out	0x3e, r29	; 62
     176:	cd bf       	out	0x3d, r28	; 61

00000178 <__do_copy_data>:
     178:	11 e0       	ldi	r17, 0x01	; 1
     17a:	a0 e0       	ldi	r26, 0x00	; 0
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	ec eb       	ldi	r30, 0xBC	; 188
     180:	f7 e2       	ldi	r31, 0x27	; 39
     182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x10>
     184:	05 90       	lpm	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	a4 34       	cpi	r26, 0x44	; 68
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0xc>

0000018e <__do_clear_bss>:
     18e:	21 e0       	ldi	r18, 0x01	; 1
     190:	a4 e4       	ldi	r26, 0x44	; 68
     192:	b1 e0       	ldi	r27, 0x01	; 1
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	aa 36       	cpi	r26, 0x6A	; 106
     19a:	b2 07       	cpc	r27, r18
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <main>
     1a2:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <int_to_uart>:
#include "subs.h"

//----------------------------------------------

void int_to_uart(char *id, int16_t num)
{
     1aa:	0f 93       	push	r16
     1ac:	1f 93       	push	r17
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
     1b6:	2a 97       	sbiw	r28, 0x0a	; 10
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	cd bf       	out	0x3d, r28	; 61
     1c2:	16 2f       	mov	r17, r22
     1c4:	07 2f       	mov	r16, r23
//    struct m2bytes nbuf;
    //USART_PutChar('\x0d');
    USART_SendStr(id);
     1c6:	0e 94 c7 08 	call	0x118e	; 0x118e <USART_SendStr>
    USART_SendStr(":");
     1ca:	83 e1       	ldi	r24, 0x13	; 19
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	0e 94 c7 08 	call	0x118e	; 0x118e <USART_SendStr>
     num_to_str(&nbuf);
     USART_PutChar(nbuf.one);
     USART_PutChar(nbuf.two);
     */
    char buf[10];
    snprintf(buf, sizeof(buf), "%d", num);
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
     1d6:	85 e1       	ldi	r24, 0x15	; 21
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	9f 93       	push	r25
     1dc:	8f 93       	push	r24
     1de:	1f 92       	push	r1
     1e0:	8a e0       	ldi	r24, 0x0A	; 10
     1e2:	8f 93       	push	r24
     1e4:	8e 01       	movw	r16, r28
     1e6:	0f 5f       	subi	r16, 0xFF	; 255
     1e8:	1f 4f       	sbci	r17, 0xFF	; 255
     1ea:	1f 93       	push	r17
     1ec:	0f 93       	push	r16
     1ee:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <snprintf>
    USART_SendStr(buf);
     1f2:	c8 01       	movw	r24, r16
     1f4:	0e 94 c7 08 	call	0x118e	; 0x118e <USART_SendStr>
    USART_PutChar(';');
     1f8:	8b e3       	ldi	r24, 0x3B	; 59
     1fa:	0e 94 ba 08 	call	0x1174	; 0x1174 <USART_PutChar>
//    buf[cnt];
}
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	de bf       	out	0x3e, r29	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	cd bf       	out	0x3d, r28	; 61
     208:	2a 96       	adiw	r28, 0x0a	; 10
     20a:	0f b6       	in	r0, 0x3f	; 63
     20c:	f8 94       	cli
     20e:	de bf       	out	0x3e, r29	; 62
     210:	0f be       	out	0x3f, r0	; 63
     212:	cd bf       	out	0x3d, r28	; 61
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	1f 91       	pop	r17
     21a:	0f 91       	pop	r16
     21c:	08 95       	ret

0000021e <float_to_uart>:

void float_to_uart(char *id, float num)
{
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	ec 01       	movw	r28, r24
    int_to_uart(id, num);
     224:	cb 01       	movw	r24, r22
     226:	ba 01       	movw	r22, r20
     228:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
     22c:	ce 01       	movw	r24, r28
     int8_t buf[10];
     int8_t cnt = snprintf(buf, sizeof(buf), "%g", num);
     USART_SendStr(buf);
     USART_Putint8_t(';');
     */
}
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
//    buf[cnt];
}

void float_to_uart(char *id, float num)
{
    int_to_uart(id, num);
     232:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <int_to_uart>

00000236 <uart_nl>:
     */
}

void uart_nl(void)
{
    USART_PutChar('\x0d');
     236:	8d e0       	ldi	r24, 0x0D	; 13
     238:	0e 94 ba 08 	call	0x1174	; 0x1174 <USART_PutChar>
    USART_PutChar('\n');
     23c:	8a e0       	ldi	r24, 0x0A	; 10
     23e:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <USART_PutChar>

00000242 <__vector_13>:
}

//-------------------- Timer on 0.5 sec -----------------------

ISR (TIMER1_OVF_vect)
{
     242:	1f 92       	push	r1
     244:	0f 92       	push	r0
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	0f 92       	push	r0
     24a:	11 24       	eor	r1, r1
     24c:	8f 93       	push	r24
     24e:	9f 93       	push	r25
    cli();
     250:	f8 94       	cli
    TCNT1 = 0x10000 - (F_CPU / 256);
     252:	8e ee       	ldi	r24, 0xEE	; 238
     254:	95 e8       	ldi	r25, 0x85	; 133
     256:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     25a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

    SET_FLAG(f_e1sec);
     25e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
     262:	81 60       	ori	r24, 0x01	; 1
     264:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <flags>

//    SET_BIT(time_flag, tf_dps_en);
    sei();
     268:	78 94       	sei
}
     26a:	9f 91       	pop	r25
     26c:	8f 91       	pop	r24
     26e:	0f 90       	pop	r0
     270:	0f be       	out	0x3f, r0	; 63
     272:	0f 90       	pop	r0
     274:	1f 90       	pop	r1
     276:	18 95       	reti

00000278 <test_vent_enc>:

//********************** Vent Enc INT**********************
void test_vent_enc(int8_t up)
{
    if (get_input(IN_BTN_V_UP) == get_input(IN_BTN_V_DWN)) {
     278:	99 b1       	in	r25, 0x09	; 9
     27a:	23 b1       	in	r18, 0x03	; 3
     27c:	90 95       	com	r25
     27e:	99 1f       	adc	r25, r25
     280:	99 27       	eor	r25, r25
     282:	99 1f       	adc	r25, r25
     284:	21 70       	andi	r18, 0x01	; 1
     286:	92 17       	cp	r25, r18
     288:	59 f0       	breq	.+22     	; 0x2a0 <test_vent_enc+0x28>
	if (up) {
     28a:	88 23       	and	r24, r24
     28c:	21 f0       	breq	.+8      	; 0x296 <test_vent_enc+0x1e>
	    vent_enc++;
     28e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <vent_enc>
     292:	8f 5f       	subi	r24, 0xFF	; 255
     294:	03 c0       	rjmp	.+6      	; 0x29c <test_vent_enc+0x24>
	} else {
	    vent_enc--;
     296:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <vent_enc>
     29a:	81 50       	subi	r24, 0x01	; 1
     29c:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <vent_enc>
     2a0:	08 95       	ret

000002a2 <__vector_3>:
	}
    }
}

ISR (PCINT0_vect) // IN_BTN_V_DWN Vent
{
     2a2:	1f 92       	push	r1
     2a4:	0f 92       	push	r0
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	0f 92       	push	r0
     2aa:	11 24       	eor	r1, r1
     2ac:	2f 93       	push	r18
     2ae:	3f 93       	push	r19
     2b0:	4f 93       	push	r20
     2b2:	5f 93       	push	r21
     2b4:	6f 93       	push	r22
     2b6:	7f 93       	push	r23
     2b8:	8f 93       	push	r24
     2ba:	9f 93       	push	r25
     2bc:	af 93       	push	r26
     2be:	bf 93       	push	r27
     2c0:	ef 93       	push	r30
     2c2:	ff 93       	push	r31
    cli();
     2c4:	f8 94       	cli
    test_vent_enc(1);
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	0e 94 3c 01 	call	0x278	; 0x278 <test_vent_enc>
    sei();
     2cc:	78 94       	sei
}
     2ce:	ff 91       	pop	r31
     2d0:	ef 91       	pop	r30
     2d2:	bf 91       	pop	r27
     2d4:	af 91       	pop	r26
     2d6:	9f 91       	pop	r25
     2d8:	8f 91       	pop	r24
     2da:	7f 91       	pop	r23
     2dc:	6f 91       	pop	r22
     2de:	5f 91       	pop	r21
     2e0:	4f 91       	pop	r20
     2e2:	3f 91       	pop	r19
     2e4:	2f 91       	pop	r18
     2e6:	0f 90       	pop	r0
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	0f 90       	pop	r0
     2ec:	1f 90       	pop	r1
     2ee:	18 95       	reti

000002f0 <__vector_5>:

ISR (PCINT2_vect) // IN_BTN_V_UP Vent
{
     2f0:	1f 92       	push	r1
     2f2:	0f 92       	push	r0
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	0f 92       	push	r0
     2f8:	11 24       	eor	r1, r1
     2fa:	2f 93       	push	r18
     2fc:	3f 93       	push	r19
     2fe:	4f 93       	push	r20
     300:	5f 93       	push	r21
     302:	6f 93       	push	r22
     304:	7f 93       	push	r23
     306:	8f 93       	push	r24
     308:	9f 93       	push	r25
     30a:	af 93       	push	r26
     30c:	bf 93       	push	r27
     30e:	ef 93       	push	r30
     310:	ff 93       	push	r31
    cli();
     312:	f8 94       	cli
    test_vent_enc(0);
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	0e 94 3c 01 	call	0x278	; 0x278 <test_vent_enc>
    sei();
     31a:	78 94       	sei
}
     31c:	ff 91       	pop	r31
     31e:	ef 91       	pop	r30
     320:	bf 91       	pop	r27
     322:	af 91       	pop	r26
     324:	9f 91       	pop	r25
     326:	8f 91       	pop	r24
     328:	7f 91       	pop	r23
     32a:	6f 91       	pop	r22
     32c:	5f 91       	pop	r21
     32e:	4f 91       	pop	r20
     330:	3f 91       	pop	r19
     332:	2f 91       	pop	r18
     334:	0f 90       	pop	r0
     336:	0f be       	out	0x3f, r0	; 63
     338:	0f 90       	pop	r0
     33a:	1f 90       	pop	r1
     33c:	18 95       	reti

0000033e <test_temp_enc>:
{
    if (__count == 0)
	__asm__ __volatile__( "rjmp 1f\n 1:" );
    // 2 cycles
    else
	__asm__ __volatile__ (
     33e:	e2 e0       	ldi	r30, 0x02	; 2
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	31 97       	sbiw	r30, 0x01	; 1
     344:	f1 f7       	brne	.-4      	; 0x342 <test_temp_enc+0x4>
//********************** Temp Enc INT**********************

void test_temp_enc(int8_t up)
{
    delay(1);
    if (get_input(IN_BTN_T_UP) == get_input(IN_BTN_T_DWN)) {
     346:	29 b1       	in	r18, 0x09	; 9
     348:	99 b1       	in	r25, 0x09	; 9
     34a:	23 fb       	bst	r18, 3
     34c:	33 27       	eor	r19, r19
     34e:	30 f9       	bld	r19, 0
     350:	21 e0       	ldi	r18, 0x01	; 1
     352:	23 27       	eor	r18, r19
     354:	92 fb       	bst	r25, 2
     356:	99 27       	eor	r25, r25
     358:	90 f9       	bld	r25, 0
     35a:	29 17       	cp	r18, r25
     35c:	59 f0       	breq	.+22     	; 0x374 <test_temp_enc+0x36>
	if (up) {
     35e:	88 23       	and	r24, r24
     360:	21 f0       	breq	.+8      	; 0x36a <test_temp_enc+0x2c>
	    temp_enc++;
     362:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <temp_enc>
     366:	8f 5f       	subi	r24, 0xFF	; 255
     368:	03 c0       	rjmp	.+6      	; 0x370 <test_temp_enc+0x32>
	} else {
	    temp_enc--;
     36a:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <temp_enc>
     36e:	81 50       	subi	r24, 0x01	; 1
     370:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <temp_enc>
     374:	08 95       	ret

00000376 <__vector_1>:
	}
    }
}

ISR (INT0_vect) // IN_BTN_T_DWN Temp
{
     376:	1f 92       	push	r1
     378:	0f 92       	push	r0
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	0f 92       	push	r0
     37e:	11 24       	eor	r1, r1
     380:	2f 93       	push	r18
     382:	3f 93       	push	r19
     384:	4f 93       	push	r20
     386:	5f 93       	push	r21
     388:	6f 93       	push	r22
     38a:	7f 93       	push	r23
     38c:	8f 93       	push	r24
     38e:	9f 93       	push	r25
     390:	af 93       	push	r26
     392:	bf 93       	push	r27
     394:	ef 93       	push	r30
     396:	ff 93       	push	r31
    cli();
     398:	f8 94       	cli
    test_temp_enc(1);
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	0e 94 9f 01 	call	0x33e	; 0x33e <test_temp_enc>
    sei();
     3a0:	78 94       	sei
}
     3a2:	ff 91       	pop	r31
     3a4:	ef 91       	pop	r30
     3a6:	bf 91       	pop	r27
     3a8:	af 91       	pop	r26
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	7f 91       	pop	r23
     3b0:	6f 91       	pop	r22
     3b2:	5f 91       	pop	r21
     3b4:	4f 91       	pop	r20
     3b6:	3f 91       	pop	r19
     3b8:	2f 91       	pop	r18
     3ba:	0f 90       	pop	r0
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	0f 90       	pop	r0
     3c0:	1f 90       	pop	r1
     3c2:	18 95       	reti

000003c4 <__vector_2>:

ISR (INT1_vect) // IN_BTN_T_UP Temp
{
     3c4:	1f 92       	push	r1
     3c6:	0f 92       	push	r0
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	0f 92       	push	r0
     3cc:	11 24       	eor	r1, r1
     3ce:	2f 93       	push	r18
     3d0:	3f 93       	push	r19
     3d2:	4f 93       	push	r20
     3d4:	5f 93       	push	r21
     3d6:	6f 93       	push	r22
     3d8:	7f 93       	push	r23
     3da:	8f 93       	push	r24
     3dc:	9f 93       	push	r25
     3de:	af 93       	push	r26
     3e0:	bf 93       	push	r27
     3e2:	ef 93       	push	r30
     3e4:	ff 93       	push	r31
    cli();
     3e6:	f8 94       	cli
    test_temp_enc(0);
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	0e 94 9f 01 	call	0x33e	; 0x33e <test_temp_enc>
    sei();
     3ee:	78 94       	sei
}
     3f0:	ff 91       	pop	r31
     3f2:	ef 91       	pop	r30
     3f4:	bf 91       	pop	r27
     3f6:	af 91       	pop	r26
     3f8:	9f 91       	pop	r25
     3fa:	8f 91       	pop	r24
     3fc:	7f 91       	pop	r23
     3fe:	6f 91       	pop	r22
     400:	5f 91       	pop	r21
     402:	4f 91       	pop	r20
     404:	3f 91       	pop	r19
     406:	2f 91       	pop	r18
     408:	0f 90       	pop	r0
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	0f 90       	pop	r0
     40e:	1f 90       	pop	r1
     410:	18 95       	reti

00000412 <set_def_vals>:

//********************** **********************
void set_def_vals(void)
{
    vars.setup_temp = 20;
     412:	ec e5       	ldi	r30, 0x5C	; 92
     414:	f1 e0       	ldi	r31, 0x01	; 1
     416:	84 e1       	ldi	r24, 0x14	; 20
     418:	81 83       	std	Z+1, r24	; 0x01
    vars.vent_nom_seg = 4;
     41a:	84 e0       	ldi	r24, 0x04	; 4
     41c:	82 83       	std	Z+2, r24	; 0x02
    vars.temp_seg = 2;
     41e:	82 e0       	ldi	r24, 0x02	; 2
     420:	83 83       	std	Z+3, r24	; 0x03
    vars.wmode = wmode_auto;
     422:	10 82       	st	Z, r1
    vars.const_cnd_frost_t = COND_T_FROST;
     424:	80 87       	std	Z+8, r24	; 0x08
    vars.pid_P_kfc = PID_P_KFC;
     426:	9a e0       	ldi	r25, 0x0A	; 10
     428:	94 83       	std	Z+4, r25	; 0x04
    vars.pid_I_kfc = PID_I_KFC;
     42a:	21 e0       	ldi	r18, 0x01	; 1
     42c:	25 83       	std	Z+5, r18	; 0x05
    vars.vent_var_kfc = VENT_VAR_KFC;
     42e:	96 83       	std	Z+6, r25	; 0x06
    vars.temp_seg_delay = TEMP_OUT_DELAY;
     430:	87 83       	std	Z+7, r24	; 0x07
    vars.cond_enabled = 0;
     432:	11 86       	std	Z+9, r1	; 0x09
    vars.auto_defrost = 3;
     434:	83 e0       	ldi	r24, 0x03	; 3
     436:	82 87       	std	Z+10, r24	; 0x0a
     438:	08 95       	ret

0000043a <myread_eeprom>:
}

void myread_eeprom(void)
{
    cli();
     43a:	f8 94       	cli
    eeprom_read_buf((uint8_t *) &vars, EEMEM_VARS, sizeof(vars));
     43c:	4b e0       	ldi	r20, 0x0B	; 11
     43e:	50 e0       	ldi	r21, 0x00	; 0
     440:	64 e6       	ldi	r22, 0x64	; 100
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	8c e5       	ldi	r24, 0x5C	; 92
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	0e 94 a1 09 	call	0x1342	; 0x1342 <eeprom_read_buf>
//    eeprom_read_block(&vars, 10, sizeof(vars));
//    uint8_t tst = eeprom_read_byte(&ftst_ee);
    uint8_t tst = eeprom_read_byte1(EEMEM_TST);
     44c:	82 e3       	ldi	r24, 0x32	; 50
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 9a 09 	call	0x1334	; 0x1334 <eeprom_read_byte1>
    if (tst != 0xaa) {
     454:	8a 3a       	cpi	r24, 0xAA	; 170
     456:	11 f0       	breq	.+4      	; 0x45c <myread_eeprom+0x22>
	set_def_vals();
     458:	0c 94 09 02 	jmp	0x412	; 0x412 <set_def_vals>
     45c:	08 95       	ret

0000045e <myupdate_eeprom>:
    }
}

void myupdate_eeprom(void)
{
    cli();
     45e:	f8 94       	cli
    eeprom_update_buf(EEMEM_VARS, (uint8_t *) &vars, sizeof(vars));
     460:	4b e0       	ldi	r20, 0x0B	; 11
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	6c e5       	ldi	r22, 0x5C	; 92
     466:	71 e0       	ldi	r23, 0x01	; 1
     468:	84 e6       	ldi	r24, 0x64	; 100
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 c1 09 	call	0x1382	; 0x1382 <eeprom_update_buf>
    if (eeprom_read_byte1(EEMEM_TST) != 0xaa) {
     470:	82 e3       	ldi	r24, 0x32	; 50
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 9a 09 	call	0x1334	; 0x1334 <eeprom_read_byte1>
     478:	8a 3a       	cpi	r24, 0xAA	; 170
     47a:	29 f0       	breq	.+10     	; 0x486 <myupdate_eeprom+0x28>
	eeprom_write_byte1(EEMEM_TST, 0xaa);
     47c:	6a ea       	ldi	r22, 0xAA	; 170
     47e:	82 e3       	ldi	r24, 0x32	; 50
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0c 94 92 09 	jmp	0x1324	; 0x1324 <eeprom_write_byte1>
     486:	08 95       	ret

00000488 <switch_temp>:
 */
#define DELAY_ENC_BTWN 500
#define DELAY_ENC_CKL_MS 30
void switch_temp(int8_t up)
{
    if (up) {
     488:	88 23       	and	r24, r24
     48a:	81 f0       	breq	.+32     	; 0x4ac <switch_temp+0x24>
	if (get_output(OUT_BTN_T_UP)) {
     48c:	5d 9b       	sbis	0x0b, 5	; 11
     48e:	07 c0       	rjmp	.+14     	; 0x49e <switch_temp+0x16>
	    pin_low(OUT_BTN_T_UP);
     490:	5d 98       	cbi	0x0b, 5	; 11
     492:	88 ee       	ldi	r24, 0xE8	; 232
     494:	93 e0       	ldi	r25, 0x03	; 3
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	f1 f7       	brne	.-4      	; 0x496 <switch_temp+0xe>
	    delay(DELAY_ENC_BTWN);
	    pin_low(OUT_BTN_T_DWN);
     49a:	5c 98       	cbi	0x0b, 4	; 11
     49c:	16 c0       	rjmp	.+44     	; 0x4ca <switch_temp+0x42>
	} else {
	    pin_high(OUT_BTN_T_UP);
     49e:	5d 9a       	sbi	0x0b, 5	; 11
     4a0:	88 ee       	ldi	r24, 0xE8	; 232
     4a2:	93 e0       	ldi	r25, 0x03	; 3
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <switch_temp+0x1c>
	    delay(DELAY_ENC_BTWN);
	    pin_high(OUT_BTN_T_DWN);
     4a8:	5c 9a       	sbi	0x0b, 4	; 11
     4aa:	0f c0       	rjmp	.+30     	; 0x4ca <switch_temp+0x42>
	}
    } else {
	if (get_output(OUT_BTN_T_UP)) {
     4ac:	5d 9b       	sbis	0x0b, 5	; 11
     4ae:	07 c0       	rjmp	.+14     	; 0x4be <switch_temp+0x36>
	    pin_low(OUT_BTN_T_DWN);
     4b0:	5c 98       	cbi	0x0b, 4	; 11
     4b2:	88 ee       	ldi	r24, 0xE8	; 232
     4b4:	93 e0       	ldi	r25, 0x03	; 3
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <switch_temp+0x2e>
	    delay(DELAY_ENC_BTWN);
	    pin_low(OUT_BTN_T_UP);
     4ba:	5d 98       	cbi	0x0b, 5	; 11
     4bc:	06 c0       	rjmp	.+12     	; 0x4ca <switch_temp+0x42>
	} else {
	    pin_high(OUT_BTN_T_DWN);
     4be:	5c 9a       	sbi	0x0b, 4	; 11
     4c0:	88 ee       	ldi	r24, 0xE8	; 232
     4c2:	93 e0       	ldi	r25, 0x03	; 3
     4c4:	01 97       	sbiw	r24, 0x01	; 1
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <switch_temp+0x3c>
	    delay(DELAY_ENC_BTWN);
	    pin_high(OUT_BTN_T_UP);
     4c8:	5d 9a       	sbi	0x0b, 5	; 11
	}
    }
    delay_ms(DELAY_ENC_CKL_MS);
     4ca:	8e e1       	ldi	r24, 0x1E	; 30
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <delay_ms>

000004d2 <switch_vent>:
}

void switch_vent(int8_t up)
{
    if (up) {
     4d2:	88 23       	and	r24, r24
     4d4:	81 f0       	breq	.+32     	; 0x4f6 <switch_vent+0x24>
	if (get_output(OUT_BTN_V_UP)) {
     4d6:	5e 9b       	sbis	0x0b, 6	; 11
     4d8:	07 c0       	rjmp	.+14     	; 0x4e8 <switch_vent+0x16>
	    pin_low(OUT_BTN_V_UP);
     4da:	5e 98       	cbi	0x0b, 6	; 11
     4dc:	88 ee       	ldi	r24, 0xE8	; 232
     4de:	93 e0       	ldi	r25, 0x03	; 3
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <switch_vent+0xe>
	    delay(DELAY_ENC_BTWN);
	    pin_low(OUT_BTN_V_DWN);
     4e4:	29 98       	cbi	0x05, 1	; 5
     4e6:	16 c0       	rjmp	.+44     	; 0x514 <switch_vent+0x42>
	} else {
	    pin_high(OUT_BTN_V_UP);
     4e8:	5e 9a       	sbi	0x0b, 6	; 11
     4ea:	88 ee       	ldi	r24, 0xE8	; 232
     4ec:	93 e0       	ldi	r25, 0x03	; 3
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <switch_vent+0x1c>
	    delay(DELAY_ENC_BTWN);
	    pin_high(OUT_BTN_V_DWN);
     4f2:	29 9a       	sbi	0x05, 1	; 5
     4f4:	0f c0       	rjmp	.+30     	; 0x514 <switch_vent+0x42>
	}
    } else {
	if (get_output(OUT_BTN_V_UP)) {
     4f6:	5e 9b       	sbis	0x0b, 6	; 11
     4f8:	07 c0       	rjmp	.+14     	; 0x508 <switch_vent+0x36>
	    pin_low(OUT_BTN_V_DWN);
     4fa:	29 98       	cbi	0x05, 1	; 5
     4fc:	88 ee       	ldi	r24, 0xE8	; 232
     4fe:	93 e0       	ldi	r25, 0x03	; 3
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	f1 f7       	brne	.-4      	; 0x500 <switch_vent+0x2e>
	    delay(DELAY_ENC_BTWN);
	    pin_low(OUT_BTN_V_UP);
     504:	5e 98       	cbi	0x0b, 6	; 11
     506:	06 c0       	rjmp	.+12     	; 0x514 <switch_vent+0x42>
	} else {
	    pin_high(OUT_BTN_V_DWN);
     508:	29 9a       	sbi	0x05, 1	; 5
     50a:	88 ee       	ldi	r24, 0xE8	; 232
     50c:	93 e0       	ldi	r25, 0x03	; 3
     50e:	01 97       	sbiw	r24, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <switch_vent+0x3c>
	    delay(DELAY_ENC_BTWN);
	    pin_high(OUT_BTN_V_UP);
     512:	5e 9a       	sbi	0x0b, 6	; 11
	}
    }
    delay_ms(DELAY_ENC_CKL_MS);
     514:	8e e1       	ldi	r24, 0x1E	; 30
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <delay_ms>

0000051c <switch_cond>:
{
    /*    if (!on) {
     SET_FLAG(f_mode_hot);
     }
     */
    if (vars.cond_enabled) {
     51c:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <vars+0x9>
     520:	99 23       	and	r25, r25
     522:	89 f0       	breq	.+34     	; 0x546 <switch_cond+0x2a>
	if (on && vent_seg_cur > 0) {
     524:	88 23       	and	r24, r24
     526:	59 f0       	breq	.+22     	; 0x53e <switch_cond+0x22>
     528:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <vent_seg_cur>
     52c:	18 16       	cp	r1, r24
     52e:	3c f4       	brge	.+14     	; 0x53e <switch_cond+0x22>
	    CLR_FLAG(f_cond_ind_flash);
     530:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
     534:	8f 7d       	andi	r24, 0xDF	; 223
     536:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <flags>
	    pin_high(OUT_FROST_SW);
     53a:	45 9a       	sbi	0x08, 5	; 8
     53c:	08 95       	ret
	} else {
	    SET_FLAG(f_cond_ind_flash);
     53e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
     542:	80 62       	ori	r24, 0x20	; 32
     544:	03 c0       	rjmp	.+6      	; 0x54c <switch_cond+0x30>
	    pin_low(OUT_FROST_SW);
	}
    } else {
	CLR_FLAG(f_cond_ind_flash);
     546:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
     54a:	8f 7d       	andi	r24, 0xDF	; 223
     54c:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <flags>
	pin_low(OUT_FROST_SW);
     550:	45 98       	cbi	0x08, 5	; 8
     552:	08 95       	ret

00000554 <test_cond_ON>:
    }
}

uint8_t test_cond_ON(void)
{
    return get_output(OUT_FROST_SW);
     554:	88 b1       	in	r24, 0x08	; 8
}
     556:	85 fb       	bst	r24, 5
     558:	88 27       	eor	r24, r24
     55a:	80 f9       	bld	r24, 0
     55c:	08 95       	ret

0000055e <calcTempFromADC>:

float calcTempFromADC(adc_in_type input)
{
     55e:	cf 92       	push	r12
     560:	df 92       	push	r13
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
    ADC_Mux(input);
     56a:	0e 94 78 09 	call	0x12f0	; 0x12f0 <ADC_Mux>
     56e:	c6 e0       	ldi	r28, 0x06	; 6
     570:	d0 e0       	ldi	r29, 0x00	; 0
    float resf = 0;
     572:	c1 2c       	mov	r12, r1
     574:	d1 2c       	mov	r13, r1
     576:	76 01       	movw	r14, r12
    for (int i = 0; i < ADC_MCNT; i++) {
	ADC_Start();
     578:	0e 94 85 09 	call	0x130a	; 0x130a <ADC_Start>
	while (ADCIsRun())
     57c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     580:	86 fd       	sbrc	r24, 6
     582:	fc cf       	rjmp	.-8      	; 0x57c <calcTempFromADC+0x1e>
	    ;
	resf += ADC_GetData();
     584:	0e 94 8b 09 	call	0x1316	; 0x1316 <ADC_GetData>
     588:	bc 01       	movw	r22, r24
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__floatunsisf>
     592:	9b 01       	movw	r18, r22
     594:	ac 01       	movw	r20, r24
     596:	c7 01       	movw	r24, r14
     598:	b6 01       	movw	r22, r12
     59a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__addsf3>
     59e:	6b 01       	movw	r12, r22
     5a0:	7c 01       	movw	r14, r24
     5a2:	21 97       	sbiw	r28, 0x01	; 1

float calcTempFromADC(adc_in_type input)
{
    ADC_Mux(input);
    float resf = 0;
    for (int i = 0; i < ADC_MCNT; i++) {
     5a4:	49 f7       	brne	.-46     	; 0x578 <calcTempFromADC+0x1a>
	resf += ADC_GetData();
    }

    resf /= ADC_MCNT;

    resf = 3132.0f / resf - 1;
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	40 ec       	ldi	r20, 0xC0	; 192
     5ac:	50 e4       	ldi	r21, 0x40	; 64
     5ae:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__divsf3>
     5b2:	9b 01       	movw	r18, r22
     5b4:	ac 01       	movw	r20, r24
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	70 ec       	ldi	r23, 0xC0	; 192
     5ba:	83 e4       	ldi	r24, 0x43	; 67
     5bc:	95 e4       	ldi	r25, 0x45	; 69
     5be:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__divsf3>
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	40 e8       	ldi	r20, 0x80	; 128
     5c8:	5f e3       	ldi	r21, 0x3F	; 63
     5ca:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <__subsf3>
     5ce:	9b 01       	movw	r18, r22
     5d0:	ac 01       	movw	r20, r24
    resf = 100.0f / resf;

    resf = (TR_NTC_KFC * TR_NTC_T0_GRAD_K) / (TR_NTC_KFC + (TR_NTC_T0_GRAD_K * log(resf / TR_NTC_T0_RES_Kom))) - 273.15
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	88 ec       	ldi	r24, 0xC8	; 200
     5d8:	92 e4       	ldi	r25, 0x42	; 66
     5da:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__divsf3>
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	40 e6       	ldi	r20, 0x60	; 96
     5e4:	51 e4       	ldi	r21, 0x41	; 65
     5e6:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__divsf3>
     5ea:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <log>
	    + 0.5;

    return resf;
     5ee:	23 e3       	ldi	r18, 0x33	; 51
     5f0:	33 e9       	ldi	r19, 0x93	; 147
     5f2:	42 e9       	ldi	r20, 0x92	; 146
     5f4:	53 e4       	ldi	r21, 0x43	; 67
     5f6:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__mulsf3>
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	4f e2       	ldi	r20, 0x2F	; 47
     600:	55 e4       	ldi	r21, 0x45	; 69
     602:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__addsf3>
     606:	9b 01       	movw	r18, r22
     608:	ac 01       	movw	r20, r24
     60a:	60 e4       	ldi	r22, 0x40	; 64
     60c:	75 e6       	ldi	r23, 0x65	; 101
     60e:	88 e4       	ldi	r24, 0x48	; 72
     610:	99 e4       	ldi	r25, 0x49	; 73
     612:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__divsf3>
     616:	23 e3       	ldi	r18, 0x33	; 51
     618:	33 e9       	ldi	r19, 0x93	; 147
     61a:	48 e8       	ldi	r20, 0x88	; 136
     61c:	53 e4       	ldi	r21, 0x43	; 67
     61e:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <__subsf3>
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	5f e3       	ldi	r21, 0x3F	; 63
     62a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__addsf3>
}
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	cf 90       	pop	r12
     63a:	08 95       	ret

0000063c <bootVarsInit>:
void bootVarsInit(void)
{
    vent_add_prc = 0;
     63c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <vent_add_prc>
    temp_out_prc = 0;
     640:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <temp_out_prc>
    temp_out_delay = TEMP_OUT_DELAY;
     644:	82 e0       	ldi	r24, 0x02	; 2
     646:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <temp_out_delay>
    bootUp_delay = 0;
     64a:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <bootUp_delay>

//    powerUp_time_sec = 0;
    Ipid = 0.0f;
     64e:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <Ipid>
     652:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <Ipid+0x1>
     656:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <Ipid+0x2>
     65a:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <Ipid+0x3>
    last_delta = 0.0f;
     65e:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <last_delta>
     662:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <last_delta+0x1>
     666:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <last_delta+0x2>
     66a:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <last_delta+0x3>
    flags = 0;
     66e:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <flags>
    SET_FLAG(f_mode_hot);
     672:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
     676:	82 60       	ori	r24, 0x02	; 2
     678:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <flags>
    CLR_FLAG(f_cond_btn_press);
     67c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
     680:	8f 7e       	andi	r24, 0xEF	; 239
     682:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <flags>
//    downHeadFlag = 0;
//    upHeadFlag = 0;
    cond_needs_of_cool = 0;
     686:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cond_needs_of_cool>
     68a:	08 95       	ret

0000068c <getTempSalon>:
    /*   float ts =calcTempFromADC(IN_ADC_T_SALON);
     if(ts < )
     cond_over_cool_delta
     return ts;
     */
    return calcTempFromADC(IN_ADC_T_SALON);
     68c:	87 e0       	ldi	r24, 0x07	; 7
     68e:	0c 94 af 02 	jmp	0x55e	; 0x55e <calcTempFromADC>

00000692 <getTempIsparit>:
}

float getTempIsparit(void)
{
    return calcTempFromADC(IN_ADC_T_FROST);
     692:	86 e0       	ldi	r24, 0x06	; 6
     694:	0c 94 af 02 	jmp	0x55e	; 0x55e <calcTempFromADC>

00000698 <prc2Seg>:
}

uint8_t prc2Seg(uint8_t segs, uint8_t prc)
{
     698:	cf 93       	push	r28
     69a:	c8 2f       	mov	r28, r24
    prc = check_range(0, prc, 100);
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	44 e6       	ldi	r20, 0x64	; 100
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <check_range>
    uint16_t tmp = (segs * prc + segs) / 100;
    return tmp;
     6aa:	9c 01       	movw	r18, r24
     6ac:	33 27       	eor	r19, r19
     6ae:	2f 5f       	subi	r18, 0xFF	; 255
     6b0:	3f 4f       	sbci	r19, 0xFF	; 255
     6b2:	c2 9f       	mul	r28, r18
     6b4:	c0 01       	movw	r24, r0
     6b6:	c3 9f       	mul	r28, r19
     6b8:	90 0d       	add	r25, r0
     6ba:	11 24       	eor	r1, r1
     6bc:	64 e6       	ldi	r22, 0x64	; 100
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	0e 94 b6 10 	call	0x216c	; 0x216c <__divmodhi4>
     6c4:	86 2f       	mov	r24, r22
}
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <seg2Prc>:

uint8_t seg2Prc(uint8_t segs, uint8_t seg)
{
    //seg = check_range(0, seg, segs);
    uint16_t tmp = (seg * 100) / segs;
    return tmp;
     6ca:	94 e6       	ldi	r25, 0x64	; 100
     6cc:	69 9f       	mul	r22, r25
     6ce:	90 01       	movw	r18, r0
     6d0:	11 24       	eor	r1, r1
     6d2:	68 2f       	mov	r22, r24
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	c9 01       	movw	r24, r18
     6d8:	0e 94 b6 10 	call	0x216c	; 0x216c <__divmodhi4>
     6dc:	86 2f       	mov	r24, r22
}
     6de:	08 95       	ret

000006e0 <set_vent_seg>:

void set_vent_seg(uint8_t seg_vent, int8_t full_sync)
{
     6e0:	ff 92       	push	r15
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	06 2f       	mov	r16, r22
    seg_vent = check_range(0, seg_vent, VENT_SEGs);
     6ec:	68 2f       	mov	r22, r24
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	48 e0       	ldi	r20, 0x08	; 8
     6f2:	50 e0       	ldi	r21, 0x00	; 0
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <check_range>
     6fc:	ec 01       	movw	r28, r24
     6fe:	18 2f       	mov	r17, r24

    if (seg_vent == 0) { //add sync
     700:	81 11       	cpse	r24, r1
     702:	07 c0       	rjmp	.+14     	; 0x712 <set_vent_seg+0x32>
	switch_vent(0);
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	0e 94 69 02 	call	0x4d2	; 0x4d2 <switch_vent>
	switch_cond(0); // выключаем кондиционер
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	0e 94 8e 02 	call	0x51c	; 0x51c <switch_cond>
     710:	05 c0       	rjmp	.+10     	; 0x71c <set_vent_seg+0x3c>
    } else if (seg_vent == VENT_SEGs) {
     712:	88 30       	cpi	r24, 0x08	; 8
     714:	19 f4       	brne	.+6      	; 0x71c <set_vent_seg+0x3c>
	switch_vent(1);
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	0e 94 69 02 	call	0x4d2	; 0x4d2 <switch_vent>
    }

    if (vent_seg_cur != seg_vent) {
     71c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <vent_seg_cur>
     720:	9e 01       	movw	r18, r28
     722:	33 27       	eor	r19, r19
     724:	08 2e       	mov	r0, r24
     726:	00 0c       	add	r0, r0
     728:	99 0b       	sbc	r25, r25
     72a:	82 17       	cp	r24, r18
     72c:	93 07       	cpc	r25, r19
     72e:	e9 f1       	breq	.+122    	; 0x7aa <set_vent_seg+0xca>
	uint8_t seg_v = seg_vent;
	if (full_sync) {
     730:	00 23       	and	r16, r16
     732:	01 f1       	breq	.+64     	; 0x774 <set_vent_seg+0x94>
     734:	00 e0       	ldi	r16, 0x00	; 0
	    for (uint8_t i = 0; i < vent_seg_cur + 2; i++) {
     736:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <vent_seg_cur>
     73a:	08 2e       	mov	r0, r24
     73c:	00 0c       	add	r0, r0
     73e:	99 0b       	sbc	r25, r25
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	20 2f       	mov	r18, r16
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	82 17       	cp	r24, r18
     748:	93 07       	cpc	r25, r19
     74a:	2c f0       	brlt	.+10     	; 0x756 <set_vent_seg+0x76>
		switch_vent(0);
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <switch_vent>
    }

    if (vent_seg_cur != seg_vent) {
	uint8_t seg_v = seg_vent;
	if (full_sync) {
	    for (uint8_t i = 0; i < vent_seg_cur + 2; i++) {
     752:	0f 5f       	subi	r16, 0xFF	; 255
     754:	f0 cf       	rjmp	.-32     	; 0x736 <set_vent_seg+0x56>
		switch_vent(0);
	    }
	    delay_ms(DELAY_ENC_CKL_MS);
     756:	8e e1       	ldi	r24, 0x1E	; 30
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <delay_ms>
	    for (uint8_t i = 0; i < seg_vent; i++) {
     75e:	00 e0       	ldi	r16, 0x00	; 0
     760:	01 17       	cp	r16, r17
     762:	28 f4       	brcc	.+10     	; 0x76e <set_vent_seg+0x8e>
		switch_vent(1);
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	0e 94 69 02 	call	0x4d2	; 0x4d2 <switch_vent>
	if (full_sync) {
	    for (uint8_t i = 0; i < vent_seg_cur + 2; i++) {
		switch_vent(0);
	    }
	    delay_ms(DELAY_ENC_CKL_MS);
	    for (uint8_t i = 0; i < seg_vent; i++) {
     76a:	0f 5f       	subi	r16, 0xFF	; 255
     76c:	f9 cf       	rjmp	.-14     	; 0x760 <set_vent_seg+0x80>
	    }
	    for (uint8_t i = 0; i < seg_vent; i++) {
		switch_vent(up);
	    }
	}
	vent_seg_cur = seg_v;
     76e:	c0 93 69 01 	sts	0x0169, r28	; 0x800169 <vent_seg_cur>
     772:	1b c0       	rjmp	.+54     	; 0x7aa <set_vent_seg+0xca>
	    for (uint8_t i = 0; i < seg_vent; i++) {
		switch_vent(1);
	    }
	} else {
	    int8_t up = 0;
	    if (seg_vent > vent_seg_cur) {
     774:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <vent_seg_cur>
     778:	08 2e       	mov	r0, r24
     77a:	00 0c       	add	r0, r0
     77c:	99 0b       	sbc	r25, r25
     77e:	82 17       	cp	r24, r18
     780:	93 07       	cpc	r25, r19
     782:	3c f4       	brge	.+14     	; 0x792 <set_vent_seg+0xb2>
		seg_vent = seg_vent - vent_seg_cur; // delta
     784:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <vent_seg_cur>
     788:	1c 2f       	mov	r17, r28
     78a:	18 1b       	sub	r17, r24
		up = 1;
     78c:	ff 24       	eor	r15, r15
     78e:	f3 94       	inc	r15
     790:	04 c0       	rjmp	.+8      	; 0x79a <set_vent_seg+0xba>
	    } else {
		seg_vent = vent_seg_cur - seg_vent; // delta
     792:	10 91 69 01 	lds	r17, 0x0169	; 0x800169 <vent_seg_cur>
     796:	1c 1b       	sub	r17, r28
	    delay_ms(DELAY_ENC_CKL_MS);
	    for (uint8_t i = 0; i < seg_vent; i++) {
		switch_vent(1);
	    }
	} else {
	    int8_t up = 0;
     798:	f1 2c       	mov	r15, r1
		seg_vent = seg_vent - vent_seg_cur; // delta
		up = 1;
	    } else {
		seg_vent = vent_seg_cur - seg_vent; // delta
	    }
	    for (uint8_t i = 0; i < seg_vent; i++) {
     79a:	00 e0       	ldi	r16, 0x00	; 0
     79c:	10 17       	cp	r17, r16
     79e:	39 f3       	breq	.-50     	; 0x76e <set_vent_seg+0x8e>
		switch_vent(up);
     7a0:	8f 2d       	mov	r24, r15
     7a2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <switch_vent>
		seg_vent = seg_vent - vent_seg_cur; // delta
		up = 1;
	    } else {
		seg_vent = vent_seg_cur - seg_vent; // delta
	    }
	    for (uint8_t i = 0; i < seg_vent; i++) {
     7a6:	0f 5f       	subi	r16, 0xFF	; 255
     7a8:	f9 cf       	rjmp	.-14     	; 0x79c <set_vent_seg+0xbc>
		switch_vent(up);
	    }
	}
	vent_seg_cur = seg_v;
    }
}
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	08 95       	ret

000007b6 <set_vent_prc>:

void set_vent_prc(uint8_t prc, int8_t full_sync)
{
     7b6:	cf 93       	push	r28
     7b8:	c6 2f       	mov	r28, r22
    uint8_t seg_vent = prc2Seg(VENT_SEGs, prc);
     7ba:	68 2f       	mov	r22, r24
     7bc:	88 e0       	ldi	r24, 0x08	; 8
     7be:	0e 94 4c 03 	call	0x698	; 0x698 <prc2Seg>
    set_vent_seg(seg_vent, full_sync);
     7c2:	6c 2f       	mov	r22, r28
}
     7c4:	cf 91       	pop	r28
}

void set_vent_prc(uint8_t prc, int8_t full_sync)
{
    uint8_t seg_vent = prc2Seg(VENT_SEGs, prc);
    set_vent_seg(seg_vent, full_sync);
     7c6:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <set_vent_seg>

000007ca <set_temp>:
}

void set_temp(uint8_t prc, int8_t full_sync)
{
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	d6 2f       	mov	r29, r22
    uint8_t seg_temp = prc2Seg(TEMP_SEGs, prc);
     7d4:	68 2f       	mov	r22, r24
     7d6:	8f e0       	ldi	r24, 0x0F	; 15
     7d8:	0e 94 4c 03 	call	0x698	; 0x698 <prc2Seg>
     7dc:	c8 2f       	mov	r28, r24

    if (seg_temp == 0) { //add sync
     7de:	81 11       	cpse	r24, r1
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <set_temp+0x1c>
	switch_temp(0);
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	03 c0       	rjmp	.+6      	; 0x7ec <set_temp+0x22>
    } else if (seg_temp == TEMP_SEGs) {
     7e6:	8f 30       	cpi	r24, 0x0F	; 15
     7e8:	19 f4       	brne	.+6      	; 0x7f0 <set_temp+0x26>
	switch_temp(1);
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	0e 94 44 02 	call	0x488	; 0x488 <switch_temp>
    }

    if (temp_seg_cur != seg_temp) {
     7f0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <temp_seg_cur>
     7f4:	2c 2f       	mov	r18, r28
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	08 2e       	mov	r0, r24
     7fa:	00 0c       	add	r0, r0
     7fc:	99 0b       	sbc	r25, r25
     7fe:	82 17       	cp	r24, r18
     800:	93 07       	cpc	r25, r19
     802:	09 f4       	brne	.+2      	; 0x806 <set_temp+0x3c>
     804:	41 c0       	rjmp	.+130    	; 0x888 <set_temp+0xbe>
	uint8_t seg_t = seg_temp;
	if (full_sync) {
     806:	dd 23       	and	r29, r29
     808:	29 f1       	breq	.+74     	; 0x854 <set_temp+0x8a>
	    int8_t up = (temp_seg_cur > TEMP_SEGs / 2);
     80a:	10 91 4e 01 	lds	r17, 0x014E	; 0x80014e <temp_seg_cur>
     80e:	01 e0       	ldi	r16, 0x01	; 1
     810:	18 30       	cpi	r17, 0x08	; 8
     812:	0c f4       	brge	.+2      	; 0x816 <set_temp+0x4c>
     814:	00 e0       	ldi	r16, 0x00	; 0
     816:	d9 e0       	ldi	r29, 0x09	; 9
	    for (uint8_t i = 0; i < TEMP_SEGs / 2 + 2; i++) {
		switch_temp(up);
     818:	80 2f       	mov	r24, r16
     81a:	0e 94 44 02 	call	0x488	; 0x488 <switch_temp>
     81e:	d1 50       	subi	r29, 0x01	; 1

    if (temp_seg_cur != seg_temp) {
	uint8_t seg_t = seg_temp;
	if (full_sync) {
	    int8_t up = (temp_seg_cur > TEMP_SEGs / 2);
	    for (uint8_t i = 0; i < TEMP_SEGs / 2 + 2; i++) {
     820:	d9 f7       	brne	.-10     	; 0x818 <set_temp+0x4e>
		switch_temp(up);
	    }
	    if (up) {
     822:	18 30       	cpi	r17, 0x08	; 8
     824:	1c f0       	brlt	.+6      	; 0x82c <set_temp+0x62>
		seg_temp = TEMP_SEGs - seg_temp;
     826:	df e0       	ldi	r29, 0x0F	; 15
     828:	dc 1b       	sub	r29, r28
     82a:	01 c0       	rjmp	.+2      	; 0x82e <set_temp+0x64>
    set_vent_seg(seg_vent, full_sync);
}

void set_temp(uint8_t prc, int8_t full_sync)
{
    uint8_t seg_temp = prc2Seg(TEMP_SEGs, prc);
     82c:	dc 2f       	mov	r29, r28
		switch_temp(up);
	    }
	    if (up) {
		seg_temp = TEMP_SEGs - seg_temp;
	    }
	    up = !up;
     82e:	01 e0       	ldi	r16, 0x01	; 1
     830:	18 30       	cpi	r17, 0x08	; 8
     832:	0c f0       	brlt	.+2      	; 0x836 <set_temp+0x6c>
     834:	00 e0       	ldi	r16, 0x00	; 0
	    delay_ms(DELAY_ENC_CKL_MS);
     836:	8e e1       	ldi	r24, 0x1E	; 30
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <delay_ms>
	    for (uint8_t i = 0; i < seg_temp; i++) {
     83e:	10 e0       	ldi	r17, 0x00	; 0
     840:	d1 17       	cp	r29, r17
     842:	29 f0       	breq	.+10     	; 0x84e <set_temp+0x84>
		switch_temp(up);
     844:	80 2f       	mov	r24, r16
     846:	0e 94 44 02 	call	0x488	; 0x488 <switch_temp>
	    if (up) {
		seg_temp = TEMP_SEGs - seg_temp;
	    }
	    up = !up;
	    delay_ms(DELAY_ENC_CKL_MS);
	    for (uint8_t i = 0; i < seg_temp; i++) {
     84a:	1f 5f       	subi	r17, 0xFF	; 255
     84c:	f9 cf       	rjmp	.-14     	; 0x840 <set_temp+0x76>
	    }
	    for (uint8_t i = 0; i < seg_temp; i++) {
		switch_temp(up);
	    }
	}
	temp_seg_cur = seg_t;
     84e:	c0 93 4e 01 	sts	0x014E, r28	; 0x80014e <temp_seg_cur>
     852:	1a c0       	rjmp	.+52     	; 0x888 <set_temp+0xbe>
	    for (uint8_t i = 0; i < seg_temp; i++) {
		switch_temp(up);
	    }
	} else {
	    int8_t up = 0;
	    if (seg_temp > temp_seg_cur) {
     854:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <temp_seg_cur>
     858:	08 2e       	mov	r0, r24
     85a:	00 0c       	add	r0, r0
     85c:	99 0b       	sbc	r25, r25
     85e:	82 17       	cp	r24, r18
     860:	93 07       	cpc	r25, r19
     862:	34 f4       	brge	.+12     	; 0x870 <set_temp+0xa6>
		seg_temp = seg_temp - temp_seg_cur; // delta
     864:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <temp_seg_cur>
     868:	dc 2f       	mov	r29, r28
     86a:	d8 1b       	sub	r29, r24
		up = 1;
     86c:	01 e0       	ldi	r16, 0x01	; 1
     86e:	04 c0       	rjmp	.+8      	; 0x878 <set_temp+0xae>
	    } else {
		seg_temp = temp_seg_cur - seg_temp; // delta
     870:	d0 91 4e 01 	lds	r29, 0x014E	; 0x80014e <temp_seg_cur>
     874:	dc 1b       	sub	r29, r28
	    delay_ms(DELAY_ENC_CKL_MS);
	    for (uint8_t i = 0; i < seg_temp; i++) {
		switch_temp(up);
	    }
	} else {
	    int8_t up = 0;
     876:	00 e0       	ldi	r16, 0x00	; 0
		seg_temp = seg_temp - temp_seg_cur; // delta
		up = 1;
	    } else {
		seg_temp = temp_seg_cur - seg_temp; // delta
	    }
	    for (uint8_t i = 0; i < seg_temp; i++) {
     878:	10 e0       	ldi	r17, 0x00	; 0
     87a:	d1 17       	cp	r29, r17
     87c:	41 f3       	breq	.-48     	; 0x84e <set_temp+0x84>
		switch_temp(up);
     87e:	80 2f       	mov	r24, r16
     880:	0e 94 44 02 	call	0x488	; 0x488 <switch_temp>
		seg_temp = seg_temp - temp_seg_cur; // delta
		up = 1;
	    } else {
		seg_temp = temp_seg_cur - seg_temp; // delta
	    }
	    for (uint8_t i = 0; i < seg_temp; i++) {
     884:	1f 5f       	subi	r17, 0xFF	; 255
     886:	f9 cf       	rjmp	.-14     	; 0x87a <set_temp+0xb0>
		switch_temp(up);
	    }
	}
	temp_seg_cur = seg_t;
    }
}
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	08 95       	ret

00000892 <calcCond>:
//****************************************************************************************

uint8_t cond_cicle = 0; // Время работы кондея в циклах (сейчас цикл около 15 сек.)

void calcCond(void)
{
     892:	cf 92       	push	r12
     894:	df 92       	push	r13
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	cf 93       	push	r28
     }
     } else if (upHeadFlag > 0) {
     CLR_FLAG(f_mode_hot);
     }
     */
    if (Ti > (vars.setup_temp + COND_UP_SETUP_T) || cond_needs_of_cool > 2) {
     89c:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <vars+0x1>
     8a0:	c0 90 49 01 	lds	r12, 0x0149	; 0x800149 <Ti>
     8a4:	d0 90 4a 01 	lds	r13, 0x014A	; 0x80014a <Ti+0x1>
     8a8:	e0 90 4b 01 	lds	r14, 0x014B	; 0x80014b <Ti+0x2>
     8ac:	f0 90 4c 01 	lds	r15, 0x014C	; 0x80014c <Ti+0x3>
     8b0:	06 2e       	mov	r0, r22
     8b2:	00 0c       	add	r0, r0
     8b4:	77 0b       	sbc	r23, r23
     8b6:	88 0b       	sbc	r24, r24
     8b8:	99 0b       	sbc	r25, r25
     8ba:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__floatsisf>
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	50 e4       	ldi	r21, 0x40	; 64
     8c6:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__addsf3>
     8ca:	a7 01       	movw	r20, r14
     8cc:	96 01       	movw	r18, r12
     8ce:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__cmpsf2>
     8d2:	87 fd       	sbrc	r24, 7
     8d4:	04 c0       	rjmp	.+8      	; 0x8de <calcCond+0x4c>
     8d6:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cond_needs_of_cool>
     8da:	83 30       	cpi	r24, 0x03	; 3
     8dc:	24 f0       	brlt	.+8      	; 0x8e6 <calcCond+0x54>
	CLR_FLAG(f_mode_hot);
     8de:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
     8e2:	8d 7f       	andi	r24, 0xFD	; 253
     8e4:	03 c0       	rjmp	.+6      	; 0x8ec <calcCond+0x5a>
    } else {
	SET_FLAG(f_mode_hot);
     8e6:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
     8ea:	82 60       	ori	r24, 0x02	; 2
     8ec:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <flags>
    }

    char c_on = 0;
    if (TST_FLAG(f_mode_frost_cicle_on)) {
     8f0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
	//if (Ti > (vars.setup_temp - COND_WORK_DELTA_T * 2) || cond_cicle < 5) {
	if (Ts > vars.setup_temp || cond_cicle < 5 || temp_out_prc < 10) {
     8f4:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <vars+0x1>
    } else {
	SET_FLAG(f_mode_hot);
    }

    char c_on = 0;
    if (TST_FLAG(f_mode_frost_cicle_on)) {
     8f8:	82 ff       	sbrs	r24, 2
     8fa:	20 c0       	rjmp	.+64     	; 0x93c <__stack+0x3d>
	//if (Ti > (vars.setup_temp - COND_WORK_DELTA_T * 2) || cond_cicle < 5) {
	if (Ts > vars.setup_temp || cond_cicle < 5 || temp_out_prc < 10) {
     8fc:	c0 90 45 01 	lds	r12, 0x0145	; 0x800145 <Ts>
     900:	d0 90 46 01 	lds	r13, 0x0146	; 0x800146 <Ts+0x1>
     904:	e0 90 47 01 	lds	r14, 0x0147	; 0x800147 <Ts+0x2>
     908:	f0 90 48 01 	lds	r15, 0x0148	; 0x800148 <Ts+0x3>
     90c:	06 2e       	mov	r0, r22
     90e:	00 0c       	add	r0, r0
     910:	77 0b       	sbc	r23, r23
     912:	88 0b       	sbc	r24, r24
     914:	99 0b       	sbc	r25, r25
     916:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__floatsisf>
     91a:	a7 01       	movw	r20, r14
     91c:	96 01       	movw	r18, r12
     91e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__cmpsf2>
     922:	87 fd       	sbrc	r24, 7
     924:	79 c0       	rjmp	.+242    	; 0xa18 <__stack+0x119>
     926:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     92a:	85 30       	cpi	r24, 0x05	; 5
     92c:	08 f4       	brcc	.+2      	; 0x930 <__stack+0x31>
     92e:	74 c0       	rjmp	.+232    	; 0xa18 <__stack+0x119>
     930:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <temp_out_prc>
     934:	8a 30       	cpi	r24, 0x0A	; 10
     936:	08 f4       	brcc	.+2      	; 0x93a <__stack+0x3b>
     938:	6f c0       	rjmp	.+222    	; 0xa18 <__stack+0x119>
     93a:	30 c0       	rjmp	.+96     	; 0x99c <__stack+0x9d>
	    c_on = 1;
	}
    } else {
	if (Ti > (vars.setup_temp - COND_WORK_DELTA_T) && Ts > (vars.setup_temp - COND_OVERCOOL_DELTA_T)) {
     93c:	c0 90 49 01 	lds	r12, 0x0149	; 0x800149 <Ti>
     940:	d0 90 4a 01 	lds	r13, 0x014A	; 0x80014a <Ti+0x1>
     944:	e0 90 4b 01 	lds	r14, 0x014B	; 0x80014b <Ti+0x2>
     948:	f0 90 4c 01 	lds	r15, 0x014C	; 0x80014c <Ti+0x3>
     94c:	06 2e       	mov	r0, r22
     94e:	00 0c       	add	r0, r0
     950:	77 0b       	sbc	r23, r23
     952:	65 50       	subi	r22, 0x05	; 5
     954:	71 09       	sbc	r23, r1
     956:	07 2e       	mov	r0, r23
     958:	00 0c       	add	r0, r0
     95a:	88 0b       	sbc	r24, r24
     95c:	99 0b       	sbc	r25, r25
     95e:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__floatsisf>
     962:	a7 01       	movw	r20, r14
     964:	96 01       	movw	r18, r12
     966:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__cmpsf2>
     96a:	87 ff       	sbrs	r24, 7
     96c:	17 c0       	rjmp	.+46     	; 0x99c <__stack+0x9d>
     96e:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <vars+0x1>
     972:	c0 90 45 01 	lds	r12, 0x0145	; 0x800145 <Ts>
     976:	d0 90 46 01 	lds	r13, 0x0146	; 0x800146 <Ts+0x1>
     97a:	e0 90 47 01 	lds	r14, 0x0147	; 0x800147 <Ts+0x2>
     97e:	f0 90 48 01 	lds	r15, 0x0148	; 0x800148 <Ts+0x3>
     982:	06 2e       	mov	r0, r22
     984:	00 0c       	add	r0, r0
     986:	77 0b       	sbc	r23, r23
     988:	88 0b       	sbc	r24, r24
     98a:	99 0b       	sbc	r25, r25
     98c:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__floatsisf>
     990:	a7 01       	movw	r20, r14
     992:	96 01       	movw	r18, r12
     994:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__cmpsf2>
     998:	87 fd       	sbrc	r24, 7
     99a:	3e c0       	rjmp	.+124    	; 0xa18 <__stack+0x119>
    }

    if (c_on && Ti > vars.const_cnd_frost_t) {
	SET_FLAG(f_mode_frost_cicle_on);
    } else {
	CLR_FLAG(f_mode_frost_cicle_on);
     99c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
     9a0:	8b 7f       	andi	r24, 0xFB	; 251
     9a2:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <flags>
    }

    char mode_cond_on = 0;
    if ((!TST_FLAG(f_mode_hot) || test_cond_ON()) && TST_FLAG(f_mode_frost_cicle_on)) {
     9a6:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
     9aa:	81 fd       	sbrc	r24, 1
     9ac:	05 c0       	rjmp	.+10     	; 0x9b8 <__stack+0xb9>
     9ae:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
     9b2:	82 fd       	sbrc	r24, 2
     9b4:	06 c0       	rjmp	.+12     	; 0x9c2 <__stack+0xc3>
     9b6:	0d c0       	rjmp	.+26     	; 0x9d2 <__stack+0xd3>
     9b8:	0e 94 aa 02 	call	0x554	; 0x554 <test_cond_ON>
     9bc:	81 11       	cpse	r24, r1
     9be:	f7 cf       	rjmp	.-18     	; 0x9ae <__stack+0xaf>
     9c0:	08 c0       	rjmp	.+16     	; 0x9d2 <__stack+0xd3>
	mode_cond_on = 1;
	if (cond_cicle < 64)
     9c2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     9c6:	80 34       	cpi	r24, 0x40	; 64
     9c8:	40 f4       	brcc	.+16     	; 0x9da <__stack+0xdb>
	    cond_cicle++;
     9ca:	8f 5f       	subi	r24, 0xFF	; 255
     9cc:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__stack+0xdb>
    } else {
	cond_cicle = 0;
     9d2:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
	SET_FLAG(f_mode_frost_cicle_on);
    } else {
	CLR_FLAG(f_mode_frost_cicle_on);
    }

    char mode_cond_on = 0;
     9d6:	c0 e0       	ldi	r28, 0x00	; 0
     9d8:	01 c0       	rjmp	.+2      	; 0x9dc <__stack+0xdd>
    if ((!TST_FLAG(f_mode_hot) || test_cond_ON()) && TST_FLAG(f_mode_frost_cicle_on)) {
	mode_cond_on = 1;
     9da:	c1 e0       	ldi	r28, 0x01	; 1
	    cond_cicle++;
    } else {
	cond_cicle = 0;
    }

    switch_cond(mode_cond_on);
     9dc:	8c 2f       	mov	r24, r28
     9de:	0e 94 8e 02 	call	0x51c	; 0x51c <switch_cond>

    int_to_uart("Mh", TST_FLAG(f_mode_hot));
     9e2:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <flags>
     9e6:	62 70       	andi	r22, 0x02	; 2
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	88 e1       	ldi	r24, 0x18	; 24
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	0e 94 d5 00 	call	0x1aa	; 0x1aa <int_to_uart>
    int_to_uart("Mf", TST_FLAG(f_mode_frost_cicle_on));
     9f2:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <flags>
     9f6:	64 70       	andi	r22, 0x04	; 4
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	8b e1       	ldi	r24, 0x1B	; 27
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	0e 94 d5 00 	call	0x1aa	; 0x1aa <int_to_uart>
    int_to_uart("Mc", mode_cond_on);
     a02:	6c 2f       	mov	r22, r28
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	8e e1       	ldi	r24, 0x1E	; 30
     a08:	91 e0       	ldi	r25, 0x01	; 1
}
     a0a:	cf 91       	pop	r28
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	cf 90       	pop	r12

    switch_cond(mode_cond_on);

    int_to_uart("Mh", TST_FLAG(f_mode_hot));
    int_to_uart("Mf", TST_FLAG(f_mode_frost_cicle_on));
    int_to_uart("Mc", mode_cond_on);
     a14:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <int_to_uart>
	if (Ti > (vars.setup_temp - COND_WORK_DELTA_T) && Ts > (vars.setup_temp - COND_OVERCOOL_DELTA_T)) {
	    c_on = 1;
	}
    }

    if (c_on && Ti > vars.const_cnd_frost_t) {
     a18:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <vars+0x8>
     a1c:	c0 90 49 01 	lds	r12, 0x0149	; 0x800149 <Ti>
     a20:	d0 90 4a 01 	lds	r13, 0x014A	; 0x80014a <Ti+0x1>
     a24:	e0 90 4b 01 	lds	r14, 0x014B	; 0x80014b <Ti+0x2>
     a28:	f0 90 4c 01 	lds	r15, 0x014C	; 0x80014c <Ti+0x3>
     a2c:	06 2e       	mov	r0, r22
     a2e:	00 0c       	add	r0, r0
     a30:	77 0b       	sbc	r23, r23
     a32:	88 0b       	sbc	r24, r24
     a34:	99 0b       	sbc	r25, r25
     a36:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__floatsisf>
     a3a:	a7 01       	movw	r20, r14
     a3c:	96 01       	movw	r18, r12
     a3e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__cmpsf2>
     a42:	87 ff       	sbrs	r24, 7
     a44:	ab cf       	rjmp	.-170    	; 0x99c <__stack+0x9d>
	SET_FLAG(f_mode_frost_cicle_on);
     a46:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
     a4a:	84 60       	ori	r24, 0x04	; 4
     a4c:	aa cf       	rjmp	.-172    	; 0x9a2 <__stack+0xa3>

00000a4e <calcVent>:
    int_to_uart("Mf", TST_FLAG(f_mode_frost_cicle_on));
    int_to_uart("Mc", mode_cond_on);
}

void calcVent(float id)
{
     a4e:	4f 92       	push	r4
     a50:	5f 92       	push	r5
     a52:	6f 92       	push	r6
     a54:	7f 92       	push	r7
     a56:	8f 92       	push	r8
     a58:	9f 92       	push	r9
     a5a:	af 92       	push	r10
     a5c:	bf 92       	push	r11
     a5e:	cf 92       	push	r12
     a60:	df 92       	push	r13
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	6b 01       	movw	r12, r22
     a6c:	7c 01       	movw	r14, r24
    float vent_nom_prc = seg2Prc(VENT_SEGs, vars.vent_nom_seg);
     a6e:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <vars+0x2>
     a72:	84 e6       	ldi	r24, 0x64	; 100
     a74:	68 9f       	mul	r22, r24
     a76:	b0 01       	movw	r22, r0
     a78:	11 24       	eor	r1, r1
     a7a:	93 e0       	ldi	r25, 0x03	; 3
     a7c:	75 95       	asr	r23
     a7e:	67 95       	ror	r22
     a80:	9a 95       	dec	r25
     a82:	e1 f7       	brne	.-8      	; 0xa7c <calcVent+0x2e>
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__floatunsisf>
     a8e:	2b 01       	movw	r4, r22
     a90:	3c 01       	movw	r6, r24
    //delta = (delta / (float) vars.setup_temp) * (float) VENT_ADD_CTRL_CFC;

    float p = last_delta * (float) vars.vent_var_kfc/* * (float) vars.pid_P_kfc*/;
     a92:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <vars+0x6>
     a96:	80 90 4f 01 	lds	r8, 0x014F	; 0x80014f <last_delta>
     a9a:	90 90 50 01 	lds	r9, 0x0150	; 0x800150 <last_delta+0x1>
     a9e:	a0 90 51 01 	lds	r10, 0x0151	; 0x800151 <last_delta+0x2>
     aa2:	b0 90 52 01 	lds	r11, 0x0152	; 0x800152 <last_delta+0x3>
     aa6:	06 2e       	mov	r0, r22
     aa8:	00 0c       	add	r0, r0
     aaa:	77 0b       	sbc	r23, r23
     aac:	88 0b       	sbc	r24, r24
     aae:	99 0b       	sbc	r25, r25
     ab0:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__floatsisf>
     ab4:	a5 01       	movw	r20, r10
     ab6:	94 01       	movw	r18, r8
     ab8:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__mulsf3>
     abc:	4b 01       	movw	r8, r22
     abe:	5c 01       	movw	r10, r24
    //float_to_uart("Vp", p);

    if (id < 0.0f) {
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	a9 01       	movw	r20, r18
     ac6:	c7 01       	movw	r24, r14
     ac8:	b6 01       	movw	r22, r12
     aca:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__cmpsf2>
     ace:	87 ff       	sbrs	r24, 7
     ad0:	04 c0       	rjmp	.+8      	; 0xada <calcVent+0x8c>
	p = -p;
     ad2:	b7 fa       	bst	r11, 7
     ad4:	b0 94       	com	r11
     ad6:	b7 f8       	bld	r11, 7
     ad8:	b0 94       	com	r11
    }

    float rng = vent_nom_prc / 2.0f;
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	40 e0       	ldi	r20, 0x00	; 0
     ae0:	5f e3       	ldi	r21, 0x3F	; 63
     ae2:	c3 01       	movw	r24, r6
     ae4:	b2 01       	movw	r22, r4
     ae6:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__mulsf3>
     aea:	7b 01       	movw	r14, r22
     aec:	8c 01       	movw	r16, r24
    p = check_rangef(-rng, p, rng);
     aee:	90 58       	subi	r25, 0x80	; 128
     af0:	a5 01       	movw	r20, r10
     af2:	94 01       	movw	r18, r8
     af4:	0e 94 01 09 	call	0x1202	; 0x1202 <check_rangef>
     af8:	9b 01       	movw	r18, r22
     afa:	ac 01       	movw	r20, r24
    //float_to_uart("Vn", p);

    vent_add_prc = check_rangef(0.0f, p + vent_nom_prc, 100.0f);
     afc:	c3 01       	movw	r24, r6
     afe:	b2 01       	movw	r22, r4
     b00:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__addsf3>
     b04:	9b 01       	movw	r18, r22
     b06:	ac 01       	movw	r20, r24
     b08:	e1 2c       	mov	r14, r1
     b0a:	f1 2c       	mov	r15, r1
     b0c:	08 ec       	ldi	r16, 0xC8	; 200
     b0e:	12 e4       	ldi	r17, 0x42	; 66
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	cb 01       	movw	r24, r22
     b16:	0e 94 01 09 	call	0x1202	; 0x1202 <check_rangef>
     b1a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
     b1e:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <vent_add_prc>
    int_to_uart("Va", vent_add_prc);
     b22:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <vent_add_prc>
     b26:	06 2e       	mov	r0, r22
     b28:	00 0c       	add	r0, r0
     b2a:	77 0b       	sbc	r23, r23
     b2c:	81 e2       	ldi	r24, 0x21	; 33
     b2e:	91 e0       	ldi	r25, 0x01	; 1
}
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	ff 90       	pop	r15
     b36:	ef 90       	pop	r14
     b38:	df 90       	pop	r13
     b3a:	cf 90       	pop	r12
     b3c:	bf 90       	pop	r11
     b3e:	af 90       	pop	r10
     b40:	9f 90       	pop	r9
     b42:	8f 90       	pop	r8
     b44:	7f 90       	pop	r7
     b46:	6f 90       	pop	r6
     b48:	5f 90       	pop	r5
     b4a:	4f 90       	pop	r4
    float rng = vent_nom_prc / 2.0f;
    p = check_rangef(-rng, p, rng);
    //float_to_uart("Vn", p);

    vent_add_prc = check_rangef(0.0f, p + vent_nom_prc, 100.0f);
    int_to_uart("Va", vent_add_prc);
     b4c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <int_to_uart>

00000b50 <calcVal>:
}

void calcVal(void)
{
     b50:	4f 92       	push	r4
     b52:	5f 92       	push	r5
     b54:	6f 92       	push	r6
     b56:	7f 92       	push	r7
     b58:	8f 92       	push	r8
     b5a:	9f 92       	push	r9
     b5c:	af 92       	push	r10
     b5e:	bf 92       	push	r11
     b60:	cf 92       	push	r12
     b62:	df 92       	push	r13
     b64:	ef 92       	push	r14
     b66:	ff 92       	push	r15
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	00 d0       	rcall	.+0      	; 0xb72 <calcVal+0x22>
     b72:	00 d0       	rcall	.+0      	; 0xb74 <calcVal+0x24>
     b74:	1f 92       	push	r1
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
    if (bootUp_delay < 4) {  // Инициализация некоторых значений при старте.
     b7a:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <bootUp_delay>
     b7e:	84 30       	cpi	r24, 0x04	; 4
     b80:	08 f0       	brcs	.+2      	; 0xb84 <calcVal+0x34>
     b82:	54 c0       	rjmp	.+168    	; 0xc2c <calcVal+0xdc>
	if (bootUp_delay < 2) {
     b84:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <bootUp_delay>
     b88:	82 30       	cpi	r24, 0x02	; 2
     b8a:	08 f0       	brcs	.+2      	; 0xb8e <calcVal+0x3e>
     b8c:	46 c0       	rjmp	.+140    	; 0xc1a <calcVal+0xca>
	    Ipid = (Ts - Ti);
     b8e:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <Ts>
     b92:	70 91 46 01 	lds	r23, 0x0146	; 0x800146 <Ts+0x1>
     b96:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <Ts+0x2>
     b9a:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <Ts+0x3>
     b9e:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <Ti>
     ba2:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <Ti+0x1>
     ba6:	40 91 4b 01 	lds	r20, 0x014B	; 0x80014b <Ti+0x2>
     baa:	50 91 4c 01 	lds	r21, 0x014C	; 0x80014c <Ti+0x3>
     bae:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <__subsf3>
     bb2:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <Ipid>
     bb6:	70 93 57 01 	sts	0x0157, r23	; 0x800157 <Ipid+0x1>
     bba:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <Ipid+0x2>
     bbe:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <Ipid+0x3>
	    if (Ipid < 0) {
     bc2:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <Ipid>
     bc6:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <Ipid+0x1>
     bca:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <Ipid+0x2>
     bce:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <Ipid+0x3>
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	a9 01       	movw	r20, r18
     bd8:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__cmpsf2>
     bdc:	87 ff       	sbrs	r24, 7
     bde:	09 c0       	rjmp	.+18     	; 0xbf2 <calcVal+0xa2>
		Ipid = 0;
     be0:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <Ipid>
     be4:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <Ipid+0x1>
     be8:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <Ipid+0x2>
     bec:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <Ipid+0x3>
     bf0:	14 c0       	rjmp	.+40     	; 0xc1a <calcVal+0xca>
	    } else {
		Ipid = Ipid * 2.0f;
     bf2:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <Ipid>
     bf6:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <Ipid+0x1>
     bfa:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <Ipid+0x2>
     bfe:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <Ipid+0x3>
     c02:	9b 01       	movw	r18, r22
     c04:	ac 01       	movw	r20, r24
     c06:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__addsf3>
     c0a:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <Ipid>
     c0e:	70 93 57 01 	sts	0x0157, r23	; 0x800157 <Ipid+0x1>
     c12:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <Ipid+0x2>
     c16:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <Ipid+0x3>
	    }
	}

	//SET_FLAG(f_mode_hot);
	switch_cond(0);
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	0e 94 8e 02 	call	0x51c	; 0x51c <switch_cond>
	bootUp_delay++;
     c20:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <bootUp_delay>
     c24:	8f 5f       	subi	r24, 0xFF	; 255
     c26:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <bootUp_delay>
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <calcVal+0xe0>
    } else {
	calcCond();
     c2c:	0e 94 49 04 	call	0x892	; 0x892 <calcCond>
    }

    float_to_uart("Ti", Ti);
     c30:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <Ti>
     c34:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <Ti+0x1>
     c38:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <Ti+0x2>
     c3c:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <Ti+0x3>
//    buf[cnt];
}

void float_to_uart(char *id, float num)
{
    int_to_uart(id, num);
     c40:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
     c44:	84 e2       	ldi	r24, 0x24	; 36
     c46:	91 e0       	ldi	r25, 0x01	; 1
     c48:	0e 94 d5 00 	call	0x1aa	; 0x1aa <int_to_uart>
    float_to_uart("Ts", Ts);
     c4c:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <Ts>
     c50:	70 91 46 01 	lds	r23, 0x0146	; 0x800146 <Ts+0x1>
     c54:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <Ts+0x2>
     c58:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <Ts+0x3>
     c5c:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
     c60:	87 e2       	ldi	r24, 0x27	; 39
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	0e 94 d5 00 	call	0x1aa	; 0x1aa <int_to_uart>

    float delta = (float) vars.setup_temp;
     c68:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <vars+0x1>
     c6c:	06 2e       	mov	r0, r22
     c6e:	00 0c       	add	r0, r0
     c70:	77 0b       	sbc	r23, r23
     c72:	88 0b       	sbc	r24, r24
     c74:	99 0b       	sbc	r25, r25
     c76:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__floatsisf>
     c7a:	6b 01       	movw	r12, r22
     c7c:	7c 01       	movw	r14, r24
    if (vars.cond_enabled) {
     c7e:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <vars+0x9>
     c82:	88 23       	and	r24, r24
     c84:	51 f0       	breq	.+20     	; 0xc9a <calcVal+0x14a>
	delta += COND_UP_SETUP_T; // если активен кондей - сместим установку температуры вверх
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	50 e4       	ldi	r21, 0x40	; 64
     c8e:	c7 01       	movw	r24, r14
     c90:	b6 01       	movw	r22, r12
     c92:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__addsf3>
     c96:	6b 01       	movw	r12, r22
     c98:	7c 01       	movw	r14, r24
    }

    int_to_uart("St", delta);
     c9a:	c7 01       	movw	r24, r14
     c9c:	b6 01       	movw	r22, r12
     c9e:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
     ca2:	8a e2       	ldi	r24, 0x2A	; 42
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <int_to_uart>
    float_to_uart("lD", last_delta);
     caa:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <last_delta>
     cae:	70 91 50 01 	lds	r23, 0x0150	; 0x800150 <last_delta+0x1>
     cb2:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <last_delta+0x2>
     cb6:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <last_delta+0x3>
     cba:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
     cbe:	8d e2       	ldi	r24, 0x2D	; 45
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <int_to_uart>

    delta = check_rangef(-40.0f, delta - Ts, 40.0f);
     cc6:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <Ts>
     cca:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <Ts+0x1>
     cce:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <Ts+0x2>
     cd2:	50 91 48 01 	lds	r21, 0x0148	; 0x800148 <Ts+0x3>
     cd6:	c7 01       	movw	r24, r14
     cd8:	b6 01       	movw	r22, r12
     cda:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <__subsf3>
     cde:	9b 01       	movw	r18, r22
     ce0:	ac 01       	movw	r20, r24
     ce2:	e1 2c       	mov	r14, r1
     ce4:	f1 2c       	mov	r15, r1
     ce6:	00 e2       	ldi	r16, 0x20	; 32
     ce8:	12 e4       	ldi	r17, 0x42	; 66
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	80 e2       	ldi	r24, 0x20	; 32
     cf0:	92 ec       	ldi	r25, 0xC2	; 194
     cf2:	0e 94 01 09 	call	0x1202	; 0x1202 <check_rangef>
     cf6:	6b 01       	movw	r12, r22
     cf8:	7c 01       	movw	r14, r24

    float delta_v_cfc;
    float id;
    if (fabs(delta) < 0.2f) {
     cfa:	9f 77       	andi	r25, 0x7F	; 127
     cfc:	2d ec       	ldi	r18, 0xCD	; 205
     cfe:	3c ec       	ldi	r19, 0xCC	; 204
     d00:	4c e4       	ldi	r20, 0x4C	; 76
     d02:	5e e3       	ldi	r21, 0x3E	; 62
     d04:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__cmpsf2>
     d08:	87 ff       	sbrs	r24, 7
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <calcVal+0x1e4>
	delta = 0.0f;
	id = -last_delta;
     d0c:	80 90 4f 01 	lds	r8, 0x014F	; 0x80014f <last_delta>
     d10:	90 90 50 01 	lds	r9, 0x0150	; 0x800150 <last_delta+0x1>
     d14:	a0 90 51 01 	lds	r10, 0x0151	; 0x800151 <last_delta+0x2>
     d18:	b0 90 52 01 	lds	r11, 0x0152	; 0x800152 <last_delta+0x3>
     d1c:	b7 fa       	bst	r11, 7
     d1e:	b0 94       	com	r11
     d20:	b7 f8       	bld	r11, 7
     d22:	b0 94       	com	r11
	delta_v_cfc = 0;
     d24:	19 82       	std	Y+1, r1	; 0x01
     d26:	1a 82       	std	Y+2, r1	; 0x02
     d28:	1b 82       	std	Y+3, r1	; 0x03
     d2a:	1c 82       	std	Y+4, r1	; 0x04
    delta = check_rangef(-40.0f, delta - Ts, 40.0f);

    float delta_v_cfc;
    float id;
    if (fabs(delta) < 0.2f) {
	delta = 0.0f;
     d2c:	c1 2c       	mov	r12, r1
     d2e:	d1 2c       	mov	r13, r1
     d30:	76 01       	movw	r14, r12
     d32:	19 c0       	rjmp	.+50     	; 0xd66 <calcVal+0x216>
	id = -last_delta;
	delta_v_cfc = 0;
    } else {
	id = delta - last_delta;
     d34:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <last_delta>
     d38:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <last_delta+0x1>
     d3c:	40 91 51 01 	lds	r20, 0x0151	; 0x800151 <last_delta+0x2>
     d40:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <last_delta+0x3>
     d44:	c7 01       	movw	r24, r14
     d46:	b6 01       	movw	r22, r12
     d48:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <__subsf3>
     d4c:	4b 01       	movw	r8, r22
     d4e:	5c 01       	movw	r10, r24
	delta_v_cfc = fabs(id / delta);
     d50:	a7 01       	movw	r20, r14
     d52:	96 01       	movw	r18, r12
     d54:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__divsf3>
     d58:	9b 01       	movw	r18, r22
     d5a:	ac 01       	movw	r20, r24
     d5c:	5f 77       	andi	r21, 0x7F	; 127
     d5e:	29 83       	std	Y+1, r18	; 0x01
     d60:	3a 83       	std	Y+2, r19	; 0x02
     d62:	4b 83       	std	Y+3, r20	; 0x03
     d64:	5c 83       	std	Y+4, r21	; 0x04
     d66:	c7 01       	movw	r24, r14
     d68:	b6 01       	movw	r22, r12
     d6a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
     d6e:	80 e3       	ldi	r24, 0x30	; 48
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	0e 94 d5 00 	call	0x1aa	; 0x1aa <int_to_uart>
     d76:	c5 01       	movw	r24, r10
     d78:	b4 01       	movw	r22, r8
     d7a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
     d7e:	83 e3       	ldi	r24, 0x33	; 51
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	0e 94 d5 00 	call	0x1aa	; 0x1aa <int_to_uart>
     } else if (delta < 0.0f) {
     upHeadFlag |= 1;
     }
     */

    last_delta = delta;
     d86:	c0 92 4f 01 	sts	0x014F, r12	; 0x80014f <last_delta>
     d8a:	d0 92 50 01 	sts	0x0150, r13	; 0x800150 <last_delta+0x1>
     d8e:	e0 92 51 01 	sts	0x0151, r14	; 0x800151 <last_delta+0x2>
     d92:	f0 92 52 01 	sts	0x0152, r15	; 0x800152 <last_delta+0x3>

    float pid = (delta + (Ipid * (float) vars.pid_I_kfc) / 10.0f) * (float) vars.pid_P_kfc;
     d96:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <vars+0x5>
     d9a:	40 90 56 01 	lds	r4, 0x0156	; 0x800156 <Ipid>
     d9e:	50 90 57 01 	lds	r5, 0x0157	; 0x800157 <Ipid+0x1>
     da2:	60 90 58 01 	lds	r6, 0x0158	; 0x800158 <Ipid+0x2>
     da6:	70 90 59 01 	lds	r7, 0x0159	; 0x800159 <Ipid+0x3>
     daa:	30 91 60 01 	lds	r19, 0x0160	; 0x800160 <vars+0x4>
     dae:	3d 83       	std	Y+5, r19	; 0x05
     db0:	06 2e       	mov	r0, r22
     db2:	00 0c       	add	r0, r0
     db4:	77 0b       	sbc	r23, r23
     db6:	88 0b       	sbc	r24, r24
     db8:	99 0b       	sbc	r25, r25
     dba:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__floatsisf>
     dbe:	a3 01       	movw	r20, r6
     dc0:	92 01       	movw	r18, r4
     dc2:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__mulsf3>
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 e2       	ldi	r20, 0x20	; 32
     dcc:	51 e4       	ldi	r21, 0x41	; 65
     dce:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__divsf3>
     dd2:	a7 01       	movw	r20, r14
     dd4:	96 01       	movw	r18, r12
     dd6:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__addsf3>
     dda:	2b 01       	movw	r4, r22
     ddc:	3c 01       	movw	r6, r24
     dde:	4d 81       	ldd	r20, Y+5	; 0x05
     de0:	64 2f       	mov	r22, r20
     de2:	44 0f       	add	r20, r20
     de4:	77 0b       	sbc	r23, r23
     de6:	88 0b       	sbc	r24, r24
     de8:	99 0b       	sbc	r25, r25
     dea:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__floatsisf>
     dee:	9b 01       	movw	r18, r22
     df0:	ac 01       	movw	r20, r24
     df2:	c3 01       	movw	r24, r6
     df4:	b2 01       	movw	r22, r4
     df6:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__mulsf3>
     dfa:	2b 01       	movw	r4, r22
     dfc:	3c 01       	movw	r6, r24

    //if (!(pid > 100.0f && delta > 0.0f) && !(pid < -100.0f && delta < 0.0f)) {
    //if ((pid > 100.0f && delta > 0.0f) || (pid < -100.0f && delta < 0.0f)) {
    if ((pid > 100.0f && delta > 0.0f) || (Ipid < 0.0f && delta < 0.0f)) {
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	48 ec       	ldi	r20, 0xC8	; 200
     e04:	52 e4       	ldi	r21, 0x42	; 66
     e06:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__gesf2>
     e0a:	18 16       	cp	r1, r24
     e0c:	4c f4       	brge	.+18     	; 0xe20 <calcVal+0x2d0>
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	a9 01       	movw	r20, r18
     e14:	c7 01       	movw	r24, r14
     e16:	b6 01       	movw	r22, r12
     e18:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__gesf2>
     e1c:	18 16       	cp	r1, r24
     e1e:	64 f1       	brlt	.+88     	; 0xe78 <calcVal+0x328>
     e20:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <Ipid>
     e24:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <Ipid+0x1>
     e28:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <Ipid+0x2>
     e2c:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <Ipid+0x3>
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	a9 01       	movw	r20, r18
     e36:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__cmpsf2>
     e3a:	87 ff       	sbrs	r24, 7
     e3c:	09 c0       	rjmp	.+18     	; 0xe50 <calcVal+0x300>
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	a9 01       	movw	r20, r18
     e44:	c7 01       	movw	r24, r14
     e46:	b6 01       	movw	r22, r12
     e48:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__cmpsf2>
     e4c:	87 fd       	sbrc	r24, 7
     e4e:	14 c0       	rjmp	.+40     	; 0xe78 <calcVal+0x328>
    } else {
	Ipid += delta;
     e50:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <Ipid>
     e54:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <Ipid+0x1>
     e58:	40 91 58 01 	lds	r20, 0x0158	; 0x800158 <Ipid+0x2>
     e5c:	50 91 59 01 	lds	r21, 0x0159	; 0x800159 <Ipid+0x3>
     e60:	c7 01       	movw	r24, r14
     e62:	b6 01       	movw	r22, r12
     e64:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__addsf3>
     e68:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <Ipid>
     e6c:	70 93 57 01 	sts	0x0157, r23	; 0x800157 <Ipid+0x1>
     e70:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <Ipid+0x2>
     e74:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <Ipid+0x3>
    }

    float_to_uart("Ip", Ipid);
     e78:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <Ipid>
     e7c:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <Ipid+0x1>
     e80:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <Ipid+0x2>
     e84:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <Ipid+0x3>
     e88:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
     e8c:	86 e3       	ldi	r24, 0x36	; 54
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	0e 94 d5 00 	call	0x1aa	; 0x1aa <int_to_uart>
     e94:	c3 01       	movw	r24, r6
     e96:	b2 01       	movw	r22, r4
     e98:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
     e9c:	89 e3       	ldi	r24, 0x39	; 57
     e9e:	91 e0       	ldi	r25, 0x01	; 1
     ea0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <int_to_uart>
    float_to_uart("pid", pid);

    if (delta < 0.0f && temp_seg_cur <= TEMP_SEGs) {
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	a9 01       	movw	r20, r18
     eaa:	c7 01       	movw	r24, r14
     eac:	b6 01       	movw	r22, r12
     eae:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__cmpsf2>
     eb2:	87 ff       	sbrs	r24, 7
     eb4:	2c c0       	rjmp	.+88     	; 0xf0e <calcVal+0x3be>
     eb6:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <temp_seg_cur>
     eba:	80 31       	cpi	r24, 0x10	; 16
     ebc:	44 f5       	brge	.+80     	; 0xf0e <calcVal+0x3be>
	if (delta_v_cfc < D_COND_KFC || id < 0.0) {
     ebe:	2a e0       	ldi	r18, 0x0A	; 10
     ec0:	37 ed       	ldi	r19, 0xD7	; 215
     ec2:	43 e2       	ldi	r20, 0x23	; 35
     ec4:	5c e3       	ldi	r21, 0x3C	; 60
     ec6:	69 81       	ldd	r22, Y+1	; 0x01
     ec8:	7a 81       	ldd	r23, Y+2	; 0x02
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	9c 81       	ldd	r25, Y+4	; 0x04
     ece:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__cmpsf2>
     ed2:	87 fd       	sbrc	r24, 7
     ed4:	09 c0       	rjmp	.+18     	; 0xee8 <calcVal+0x398>
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	a9 01       	movw	r20, r18
     edc:	c5 01       	movw	r24, r10
     ede:	b4 01       	movw	r22, r8
     ee0:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__cmpsf2>
     ee4:	87 ff       	sbrs	r24, 7
     ee6:	15 c0       	rjmp	.+42     	; 0xf12 <calcVal+0x3c2>
	    cond_needs_of_cool += fabs(delta);
     ee8:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <cond_needs_of_cool>
     eec:	06 2e       	mov	r0, r22
     eee:	00 0c       	add	r0, r0
     ef0:	77 0b       	sbc	r23, r23
     ef2:	88 0b       	sbc	r24, r24
     ef4:	99 0b       	sbc	r25, r25
     ef6:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__floatsisf>
     efa:	a7 01       	movw	r20, r14
     efc:	96 01       	movw	r18, r12
     efe:	5f 77       	andi	r21, 0x7F	; 127
     f00:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__addsf3>
     f04:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
     f08:	60 93 4d 01 	sts	0x014D, r22	; 0x80014d <cond_needs_of_cool>
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <calcVal+0x3c2>
	}
    } else {
	cond_needs_of_cool = 0;
     f0e:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cond_needs_of_cool>
    }

    int_to_uart("CO", cond_needs_of_cool);
     f12:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <cond_needs_of_cool>
     f16:	06 2e       	mov	r0, r22
     f18:	00 0c       	add	r0, r0
     f1a:	77 0b       	sbc	r23, r23
     f1c:	8d e3       	ldi	r24, 0x3D	; 61
     f1e:	91 e0       	ldi	r25, 0x01	; 1
     f20:	0e 94 d5 00 	call	0x1aa	; 0x1aa <int_to_uart>
 /*   temp_out_delay++;
    if (temp_out_delay > vars.temp_seg_delay) {
	temp_out_delay = 0;
	*/
	//temp_out_prc = (check_rangef(0, pid, 101) + temp_out_prc) / 2;
    temp_out_prc = check_rangef(0, pid, 101);
     f24:	e1 2c       	mov	r14, r1
     f26:	f1 2c       	mov	r15, r1
     f28:	0a ec       	ldi	r16, 0xCA	; 202
     f2a:	12 e4       	ldi	r17, 0x42	; 66
     f2c:	a3 01       	movw	r20, r6
     f2e:	92 01       	movw	r18, r4
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	cb 01       	movw	r24, r22
     f36:	0e 94 01 09 	call	0x1202	; 0x1202 <check_rangef>
     f3a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <__fixunssfsi>
     f3e:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <temp_out_prc>
    //}
    /*
     int_to_uart("UHF", upHeadFlag);
     int_to_uart("DHF", downHeadFlag);
     */
    int_to_uart("out", temp_out_prc);
     f42:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <temp_out_prc>
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	80 e4       	ldi	r24, 0x40	; 64
     f4a:	91 e0       	ldi	r25, 0x01	; 1
     f4c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <int_to_uart>

    //calcVent(id);
    calcVent(pid);
     f50:	c3 01       	movw	r24, r6
     f52:	b2 01       	movw	r22, r4
     f54:	0e 94 27 05 	call	0xa4e	; 0xa4e <calcVent>

    uart_nl();
}
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	ff 90       	pop	r15
     f6c:	ef 90       	pop	r14
     f6e:	df 90       	pop	r13
     f70:	cf 90       	pop	r12
     f72:	bf 90       	pop	r11
     f74:	af 90       	pop	r10
     f76:	9f 90       	pop	r9
     f78:	8f 90       	pop	r8
     f7a:	7f 90       	pop	r7
     f7c:	6f 90       	pop	r6
     f7e:	5f 90       	pop	r5
     f80:	4f 90       	pop	r4
    int_to_uart("out", temp_out_prc);

    //calcVent(id);
    calcVent(pid);

    uart_nl();
     f82:	0c 94 1b 01 	jmp	0x236	; 0x236 <uart_nl>

00000f86 <recycleSwitch>:

#include "calc.c"

void recycleSwitch(void) // эмуляция нажатия
{
    pin_low(OUT_BTN_Recycle);
     f86:	58 98       	cbi	0x0b, 0	; 11
    set_dir_out(OUT_BTN_Recycle);
     f88:	50 9a       	sbi	0x0a, 0	; 10
    delay_ms(50);
     f8a:	82 e3       	ldi	r24, 0x32	; 50
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <delay_ms>
//    pin_high(OUT_BTN_Recycle);
    set_dir_in(OUT_BTN_Recycle);
     f92:	50 98       	cbi	0x0a, 0	; 10
     f94:	08 95       	ret

00000f96 <prefAirSwitch>:
}

void prefAirSwitch(void) // эмуляция нажатия
{
    pin_low(OUT_BTN_MODE_UP_DOWN);
     f96:	40 98       	cbi	0x08, 0	; 8
    set_dir_out(OUT_BTN_MODE_UP_DOWN);
     f98:	38 9a       	sbi	0x07, 0	; 7
    delay_ms(50);
     f9a:	82 e3       	ldi	r24, 0x32	; 50
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <delay_ms>
    set_dir_in(OUT_BTN_MODE_UP_DOWN);
     fa2:	38 98       	cbi	0x07, 0	; 7
     fa4:	08 95       	ret

00000fa6 <hiAirSwitch>:
}

void hiAirSwitch(void) // эмуляция нажатия
{
    pin_low(IN_BTN_HI_MODE);
     fa6:	44 98       	cbi	0x08, 4	; 8
    set_dir_out(IN_BTN_HI_MODE);
     fa8:	3c 9a       	sbi	0x07, 4	; 7
    delay_ms(50);
     faa:	82 e3       	ldi	r24, 0x32	; 50
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 dd 08 	call	0x11ba	; 0x11ba <delay_ms>
    set_dir_in(IN_BTN_HI_MODE);
     fb2:	3c 98       	cbi	0x07, 4	; 7
     fb4:	08 95       	ret

00000fb6 <setup_pins>:
}

void setup_pins(void)
{
    PORTB = 0;
     fb6:	15 b8       	out	0x05, r1	; 5
    PORTC = 0;
     fb8:	18 b8       	out	0x08, r1	; 8
    PORTD = 0;
     fba:	1b b8       	out	0x0b, r1	; 11
    DDRB = 0; //dir to in
     fbc:	14 b8       	out	0x04, r1	; 4
    DDRC = 0; //dir to in
     fbe:	17 b8       	out	0x07, r1	; 7
    DDRD = 0; //dir to in
     fc0:	1a b8       	out	0x0a, r1	; 10
     set_dir_in(IN_BTN_V_DWN);
     set_dir_in(IN_ACC);
     IN_NIGHT_BR
     set_dir_in(IN_FROST_BTN);*/

    pin_low(OUT_FROST_SW);
     fc2:	45 98       	cbi	0x08, 5	; 8
    set_dir_out(OUT_FROST_SW);
     fc4:	3d 9a       	sbi	0x07, 5	; 7
    pin_low(OUT_FROST_IND);
     fc6:	41 98       	cbi	0x08, 1	; 8
    set_dir_out(OUT_FROST_IND);
     fc8:	39 9a       	sbi	0x07, 1	; 7
    set_dir_out(OUT_BTN_T_UP);
     fca:	55 9a       	sbi	0x0a, 5	; 10
    set_dir_out(OUT_BTN_T_DWN);
     fcc:	54 9a       	sbi	0x0a, 4	; 10
    set_dir_out(OUT_BTN_V_UP);
     fce:	56 9a       	sbi	0x0a, 6	; 10
    set_dir_out(OUT_BTN_V_DWN);
     fd0:	21 9a       	sbi	0x04, 1	; 4
     fd2:	08 95       	ret

00000fd4 <setup_display>:
}

void setup_display(void)
{
    Send_7219(0x09, 0x00); //режим декодирования
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	89 e0       	ldi	r24, 0x09	; 9
     fd8:	0e 94 0a 08 	call	0x1014	; 0x1014 <Send_7219>
    int8_t br_dsp = DISP_BRG_MIN;
    if (!get_input(IN_NIGHT_BR)) {
     fdc:	32 99       	sbic	0x06, 2	; 6
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <setup_display+0x10>
	br_dsp = DISP_BRG_MAX;
     fe0:	67 e0       	ldi	r22, 0x07	; 7
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <setup_display+0x12>
}

void setup_display(void)
{
    Send_7219(0x09, 0x00); //режим декодирования
    int8_t br_dsp = DISP_BRG_MIN;
     fe4:	61 e0       	ldi	r22, 0x01	; 1
    if (!get_input(IN_NIGHT_BR)) {
	br_dsp = DISP_BRG_MAX;
    }
    Send_7219(0x0A, br_dsp); //яркость
     fe6:	8a e0       	ldi	r24, 0x0A	; 10
     fe8:	0e 94 0a 08 	call	0x1014	; 0x1014 <Send_7219>
    Send_7219(0x0B, DISP_LEN - 1); //сколько разрядов используем
     fec:	63 e0       	ldi	r22, 0x03	; 3
     fee:	8b e0       	ldi	r24, 0x0B	; 11
     ff0:	0e 94 0a 08 	call	0x1014	; 0x1014 <Send_7219>
    Send_7219(0x0C, 1); //включим индикатор
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	8c e0       	ldi	r24, 0x0C	; 12
     ff8:	0e 94 0a 08 	call	0x1014	; 0x1014 <Send_7219>
    Send_7219(0x0F, 0x00);
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	8f e0       	ldi	r24, 0x0F	; 15
    1000:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <Send_7219>

00001004 <display_off>:
}

void display_off(void)
{
    Send_7219(0, 0);
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	0e 94 0a 08 	call	0x1014	; 0x1014 <Send_7219>
    Send_7219(0x0C, 0); //выключим индикатор
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	8c e0       	ldi	r24, 0x0C	; 12
    1010:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <Send_7219>

00001014 <Send_7219>:
#include "disp.h"
#include "io.h"
#include <stdlib.h>

void Send_7219(int8_t rg, int8_t dt)
{
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	16 2f       	mov	r17, r22
    pin_low(SPI_SS);
    101c:	2a 98       	cbi	0x05, 2	; 5
{
    if (__count == 0)
	__asm__ __volatile__( "rjmp 1f\n 1:" );
    // 2 cycles
    else
	__asm__ __volatile__ (
    101e:	c2 e0       	ldi	r28, 0x02	; 2
    1020:	d0 e0       	ldi	r29, 0x00	; 0
    1022:	fe 01       	movw	r30, r28
    1024:	31 97       	sbiw	r30, 0x01	; 1
    1026:	f1 f7       	brne	.-4      	; 0x1024 <Send_7219+0x10>
    delay(1);
    SPI_SendByte(rg);
    1028:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <SPI_SendByte>
    SPI_SendByte(dt);
    102c:	81 2f       	mov	r24, r17
    102e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <SPI_SendByte>
    1032:	21 97       	sbiw	r28, 0x01	; 1
    1034:	f1 f7       	brne	.-4      	; 0x1032 <Send_7219+0x1e>
    delay(1);
    pin_high(SPI_SS);
    1036:	2a 9a       	sbi	0x05, 2	; 5
}
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	1f 91       	pop	r17
    103e:	08 95       	ret

00001040 <Clear_7219>:

void Clear_7219(void)
{
    1040:	cf 93       	push	r28
    int8_t i = DISP_LEN;
    1042:	c4 e0       	ldi	r28, 0x04	; 4
    // Loop until 0, but don't run for zero
    do {
	// Set each display in use to blank
	Send_7219(i, 0xF); //int8_t BLANK
    1044:	6f e0       	ldi	r22, 0x0F	; 15
    1046:	8c 2f       	mov	r24, r28
    1048:	0e 94 0a 08 	call	0x1014	; 0x1014 <Send_7219>
    104c:	c1 50       	subi	r28, 0x01	; 1
    } while (--i);
    104e:	d1 f7       	brne	.-12     	; 0x1044 <Clear_7219+0x4>
}
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret

00001054 <Disp_Bars>:
	0, 0b1000, 0b10000000, 0b100, 0b10000, 1, 0b100000, 0b10, 0b1000000 };
	*/
static uint8_t bar_conv_full[] = {
	0, 0b1000, 136, 140, 156, 157, 189, 191, 255 };
void Disp_Bars(uint8_t dt)
{
    1054:	cf 93       	push	r28
    if (dt < 9) {
	dt = bar_conv_full[dt];
    1056:	e8 2f       	mov	r30, r24
	*/
static uint8_t bar_conv_full[] = {
	0, 0b1000, 136, 140, 156, 157, 189, 191, 255 };
void Disp_Bars(uint8_t dt)
{
    if (dt < 9) {
    1058:	89 30       	cpi	r24, 0x09	; 9
    105a:	48 f4       	brcc	.+18     	; 0x106e <Disp_Bars+0x1a>
	dt = bar_conv_full[dt];
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	e6 5f       	subi	r30, 0xF6	; 246
    1060:	fe 4f       	sbci	r31, 0xFE	; 254
    1062:	c0 81       	ld	r28, Z
	Send_7219(BAR1_SEG, 0);
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	82 e0       	ldi	r24, 0x02	; 2
    1068:	0e 94 0a 08 	call	0x1014	; 0x1014 <Send_7219>
    106c:	0b c0       	rjmp	.+22     	; 0x1084 <Disp_Bars+0x30>
    } else {
	if (dt > 10)
	    dt = 10;
	Send_7219(BAR1_SEG, bar_conv_full[dt - 8]);
    106e:	8b 30       	cpi	r24, 0x0B	; 11
    1070:	08 f0       	brcs	.+2      	; 0x1074 <Disp_Bars+0x20>
    1072:	ea e0       	ldi	r30, 0x0A	; 10
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	ee 5f       	subi	r30, 0xFE	; 254
    1078:	fe 4f       	sbci	r31, 0xFE	; 254
    107a:	60 81       	ld	r22, Z
    107c:	82 e0       	ldi	r24, 0x02	; 2
    107e:	0e 94 0a 08 	call	0x1014	; 0x1014 <Send_7219>
	dt = 255;
    1082:	cf ef       	ldi	r28, 0xFF	; 255
    }
    Send_7219(BAR0_SEG, dt);
    1084:	6c 2f       	mov	r22, r28
    1086:	81 e0       	ldi	r24, 0x01	; 1
}
    1088:	cf 91       	pop	r28
	if (dt > 10)
	    dt = 10;
	Send_7219(BAR1_SEG, bar_conv_full[dt - 8]);
	dt = 255;
    }
    Send_7219(BAR0_SEG, dt);
    108a:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <Send_7219>

0000108e <Disp_Num_Seg>:

static uint8_t num_conv_singl[10] = {
	0b10111101, 0b10000001, 0b11111000, 0b11101001, 0b11000101, 0b1101101, 0b1111101, 0b10001001, 0b11111101,
	0b11101101 };
void Disp_Num_Seg(uint8_t seg, uint8_t num, uint8_t dot)
{
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    if (num < 10) {
    1092:	6a 30       	cpi	r22, 0x0A	; 10
    1094:	30 f4       	brcc	.+12     	; 0x10a2 <Disp_Num_Seg+0x14>
	num = num_conv_singl[num];
    1096:	e6 2f       	mov	r30, r22
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	e0 50       	subi	r30, 0x00	; 0
    109c:	ff 4f       	sbci	r31, 0xFF	; 255
    109e:	60 81       	ld	r22, Z
    10a0:	36 c0       	rjmp	.+108    	; 0x110e <Disp_Num_Seg+0x80>
    } else {
	switch (num) {
    10a2:	06 2f       	mov	r16, r22
    10a4:	10 e0       	ldi	r17, 0x00	; 0
    10a6:	f8 01       	movw	r30, r16
    10a8:	ff 97       	sbiw	r30, 0x3f	; 63
    10aa:	eb 33       	cpi	r30, 0x3B	; 59
    10ac:	f1 05       	cpc	r31, r1
    10ae:	60 f5       	brcc	.+88     	; 0x1108 <Disp_Num_Seg+0x7a>
    10b0:	e2 5b       	subi	r30, 0xB2	; 178
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__tablejump2__>
	case 'S':
	    num = num_conv_singl[5];
    10b8:	6d e6       	ldi	r22, 0x6D	; 109
    10ba:	29 c0       	rjmp	.+82     	; 0x110e <Disp_Num_Seg+0x80>
	case 'a':
	    num = 0b11011101;
	    break;
	case 'b':
	case 'B':
	    num = 0b01110101;
    10bc:	65 e7       	ldi	r22, 0x75	; 117
	    break;
    10be:	27 c0       	rjmp	.+78     	; 0x110e <Disp_Num_Seg+0x80>
	case 'C':
	    num = 0b00111100;
    10c0:	6c e3       	ldi	r22, 0x3C	; 60
	    break;
    10c2:	25 c0       	rjmp	.+74     	; 0x110e <Disp_Num_Seg+0x80>
	case 'c':
	    num = 0b01110000;
    10c4:	60 e7       	ldi	r22, 0x70	; 112
	    break;
    10c6:	23 c0       	rjmp	.+70     	; 0x110e <Disp_Num_Seg+0x80>
	case 'D':
	case 'd':
	    num = 0b11110001;
    10c8:	61 ef       	ldi	r22, 0xF1	; 241
	    break;
    10ca:	21 c0       	rjmp	.+66     	; 0x110e <Disp_Num_Seg+0x80>
	case 'E':
	case 'e':
	    num = 0b01111100;
    10cc:	6c e7       	ldi	r22, 0x7C	; 124
	    break;
    10ce:	1f c0       	rjmp	.+62     	; 0x110e <Disp_Num_Seg+0x80>
	case 'F':
	case 'f':
	    num = 0b01011100;
    10d0:	6c e5       	ldi	r22, 0x5C	; 92
	    break;
    10d2:	1d c0       	rjmp	.+58     	; 0x110e <Disp_Num_Seg+0x80>
	case 'h':
	    num = 0b01010101;
    10d4:	65 e5       	ldi	r22, 0x55	; 85
	    break;
    10d6:	1b c0       	rjmp	.+54     	; 0x110e <Disp_Num_Seg+0x80>
	case 'H':
	    num = 0b11010101;
    10d8:	65 ed       	ldi	r22, 0xD5	; 213
	    break;
    10da:	19 c0       	rjmp	.+50     	; 0x110e <Disp_Num_Seg+0x80>
	case 'n':
	    num = 0b01010001;
    10dc:	61 e5       	ldi	r22, 0x51	; 81
	    break;
    10de:	17 c0       	rjmp	.+46     	; 0x110e <Disp_Num_Seg+0x80>
	case 'o':
	    num = 0b01110001;
    10e0:	61 e7       	ldi	r22, 0x71	; 113
	    break;
    10e2:	15 c0       	rjmp	.+42     	; 0x110e <Disp_Num_Seg+0x80>
	case 't':
	    num = 0b01110100;
	    break;
	case 'L':
	    num = 0b00110100;
    10e4:	64 e3       	ldi	r22, 0x34	; 52
	    break;
    10e6:	13 c0       	rjmp	.+38     	; 0x110e <Disp_Num_Seg+0x80>
	case 'i':
	    num = 0b00000001;
    10e8:	61 e0       	ldi	r22, 0x01	; 1
	    break;
    10ea:	11 c0       	rjmp	.+34     	; 0x110e <Disp_Num_Seg+0x80>
	case 'I':
	    num = 0b00010100;
    10ec:	64 e1       	ldi	r22, 0x14	; 20
	    break;
    10ee:	0f c0       	rjmp	.+30     	; 0x110e <Disp_Num_Seg+0x80>
	case 'r':
	    num = 0b01010000;
    10f0:	60 e5       	ldi	r22, 0x50	; 80
	    break;
    10f2:	0d c0       	rjmp	.+26     	; 0x110e <Disp_Num_Seg+0x80>
	case 'P':
	    num = 0b11011100;
    10f4:	6c ed       	ldi	r22, 0xDC	; 220
	    break;
    10f6:	0b c0       	rjmp	.+22     	; 0x110e <Disp_Num_Seg+0x80>
	case 'u':
	    num = 0b00110001;
    10f8:	61 e3       	ldi	r22, 0x31	; 49
	    break;
    10fa:	09 c0       	rjmp	.+18     	; 0x110e <Disp_Num_Seg+0x80>
	case 'U':
	    num = 0b10110101;
    10fc:	65 eb       	ldi	r22, 0xB5	; 181
	    break;
    10fe:	07 c0       	rjmp	.+14     	; 0x110e <Disp_Num_Seg+0x80>
	case 'y':
	    num = 0b11100101;
    1100:	65 ee       	ldi	r22, 0xE5	; 229
	    break;
    1102:	05 c0       	rjmp	.+10     	; 0x110e <Disp_Num_Seg+0x80>
	case '?':
	    num = 0b11011000;
    1104:	68 ed       	ldi	r22, 0xD8	; 216
	    break;
    1106:	03 c0       	rjmp	.+6      	; 0x110e <Disp_Num_Seg+0x80>
	default:
	    num = 0b01000000;
    1108:	60 e4       	ldi	r22, 0x40	; 64
    110a:	01 c0       	rjmp	.+2      	; 0x110e <Disp_Num_Seg+0x80>
	case 'S':
	    num = num_conv_singl[5];
	    break;
	case 'A':
	case 'a':
	    num = 0b11011101;
    110c:	6d ed       	ldi	r22, 0xDD	; 221
	    break;
	default:
	    num = 0b01000000;
	}
    }
    if (dot)
    110e:	41 11       	cpse	r20, r1
	num |= 2;
    1110:	62 60       	ori	r22, 0x02	; 2
    Send_7219(seg, num);
}
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
	    num = 0b01000000;
	}
    }
    if (dot)
	num |= 2;
    Send_7219(seg, num);
    1116:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <Send_7219>

0000111a <Disp_Num>:
}

void Disp_Num(int8_t num, uint8_t dot)
{
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	28 2f       	mov	r18, r24
    1120:	d6 2f       	mov	r29, r22
    uint8_t dot1 = 0;
    uint8_t st, ml;
    if (num < 0) {
    1122:	87 ff       	sbrs	r24, 7
    1124:	03 c0       	rjmp	.+6      	; 0x112c <Disp_Num+0x12>
	dot1 = 1;
	num = abs(num);
    1126:	21 95       	neg	r18
void Disp_Num(int8_t num, uint8_t dot)
{
    uint8_t dot1 = 0;
    uint8_t st, ml;
    if (num < 0) {
	dot1 = 1;
    1128:	41 e0       	ldi	r20, 0x01	; 1
    112a:	01 c0       	rjmp	.+2      	; 0x112e <Disp_Num+0x14>
    Send_7219(seg, num);
}

void Disp_Num(int8_t num, uint8_t dot)
{
    uint8_t dot1 = 0;
    112c:	40 e0       	ldi	r20, 0x00	; 0
    uint8_t st, ml;
    if (num < 0) {
	dot1 = 1;
	num = abs(num);
    }
    if (num > 99) {
    112e:	24 36       	cpi	r18, 0x64	; 100
    1130:	54 f4       	brge	.+20     	; 0x1146 <Disp_Num+0x2c>
	st = 'h';
	ml = 'i';
    } else {
	st = num / 10;
    1132:	82 2f       	mov	r24, r18
    1134:	6a e0       	ldi	r22, 0x0A	; 10
    1136:	0e 94 a8 10 	call	0x2150	; 0x2150 <__divmodqi4>
	ml = num - (st * 10);
    113a:	c2 2f       	mov	r28, r18
    113c:	9a e0       	ldi	r25, 0x0A	; 10
    113e:	89 9f       	mul	r24, r25
    1140:	c0 19       	sub	r28, r0
    1142:	11 24       	eor	r1, r1
    1144:	02 c0       	rjmp	.+4      	; 0x114a <Disp_Num+0x30>
	dot1 = 1;
	num = abs(num);
    }
    if (num > 99) {
	st = 'h';
	ml = 'i';
    1146:	c9 e6       	ldi	r28, 0x69	; 105
    if (num < 0) {
	dot1 = 1;
	num = abs(num);
    }
    if (num > 99) {
	st = 'h';
    1148:	88 e6       	ldi	r24, 0x68	; 104
    } else {
	st = num / 10;
	ml = num - (st * 10);
    }

    Disp_Num_Seg(NUM0_SEG, st, dot1);
    114a:	68 2f       	mov	r22, r24
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	0e 94 47 08 	call	0x108e	; 0x108e <Disp_Num_Seg>
    Disp_Num_Seg(NUM1_SEG, ml, dot);
    1152:	4d 2f       	mov	r20, r29
    1154:	6c 2f       	mov	r22, r28
    1156:	84 e0       	ldi	r24, 0x04	; 4
}
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
	st = num / 10;
	ml = num - (st * 10);
    }

    Disp_Num_Seg(NUM0_SEG, st, dot1);
    Disp_Num_Seg(NUM1_SEG, ml, dot);
    115c:	0c 94 47 08 	jmp	0x108e	; 0x108e <Disp_Num_Seg>

00001160 <USART_Init>:
#define USART_BAUDRATE 38400
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1) 

void USART_Init(void)
{
    UBRR0L = (uint8_t) (BAUD_PRESCALE & 0xff);
    1160:	8c e0       	ldi	r24, 0x0C	; 12
    1162:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    UBRR0H = (uint8_t) (BAUD_PRESCALE >> 8);
    1166:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    //UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
    UCSR0B = (1 << TXEN0);
    116a:	88 e0       	ldi	r24, 0x08	; 8
    116c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    set_dir_out(OUT_UART_TX);
    1170:	51 9a       	sbi	0x0a, 1	; 10
    1172:	08 95       	ret

00001174 <USART_PutChar>:
    1174:	22 e0       	ldi	r18, 0x02	; 2
    1176:	30 e0       	ldi	r19, 0x00	; 0

//______________________________________________________________________________
//помещает символ в буфер, инициирует начало передачи
void USART_PutChar(char sym)
{
    while (!( UCSR0A & (1 << UDRE0)))
    1178:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    117c:	95 fd       	sbrc	r25, 5
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <USART_PutChar+0x14>
    1180:	f9 01       	movw	r30, r18
    1182:	31 97       	sbiw	r30, 0x01	; 1
    1184:	f1 f7       	brne	.-4      	; 0x1182 <USART_PutChar+0xe>
    1186:	f8 cf       	rjmp	.-16     	; 0x1178 <USART_PutChar+0x4>
	delay(1);
    UDR0 = sym;
    1188:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    118c:	08 95       	ret

0000118e <USART_SendStr>:
}

//функция посылающая строку по usart`у
void USART_SendStr(char * data)
{
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	ec 01       	movw	r28, r24
    uint8_t sym;
    while (*data) {
    1194:	89 91       	ld	r24, Y+
    1196:	88 23       	and	r24, r24
    1198:	19 f0       	breq	.+6      	; 0x11a0 <USART_SendStr+0x12>
	sym = *data++;
	USART_PutChar(sym);
    119a:	0e 94 ba 08 	call	0x1174	; 0x1174 <USART_PutChar>
    119e:	fa cf       	rjmp	.-12     	; 0x1194 <USART_SendStr+0x6>
    }
}
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	08 95       	ret

000011a6 <delay_ms0>:
    11a6:	20 ed       	ldi	r18, 0xD0	; 208
    11a8:	37 e0       	ldi	r19, 0x07	; 7
#include "disp.h"
#include "io.h"

void delay_ms0(uint8_t ms)
{
    while (ms > 0) {
    11aa:	88 23       	and	r24, r24
    11ac:	29 f0       	breq	.+10     	; 0x11b8 <delay_ms0+0x12>
    11ae:	f9 01       	movw	r30, r18
    11b0:	31 97       	sbiw	r30, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <delay_ms0+0xa>
	delay(1000);
	ms--;
    11b4:	81 50       	subi	r24, 0x01	; 1
    11b6:	f9 cf       	rjmp	.-14     	; 0x11aa <delay_ms0+0x4>
    }
//	wdt_reset();
}
    11b8:	08 95       	ret

000011ba <delay_ms>:
    11ba:	20 ed       	ldi	r18, 0xD0	; 208
    11bc:	37 e0       	ldi	r19, 0x07	; 7

void delay_ms(uint16_t ms)
{
    while (ms > 0) {
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	29 f0       	breq	.+10     	; 0x11cc <delay_ms+0x12>
    11c2:	f9 01       	movw	r30, r18
    11c4:	31 97       	sbiw	r30, 0x01	; 1
    11c6:	f1 f7       	brne	.-4      	; 0x11c4 <delay_ms+0xa>
	delay(1000);
	ms--;
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	f9 cf       	rjmp	.-14     	; 0x11be <delay_ms+0x4>
    }
//	wdt_reset();
}
    11cc:	08 95       	ret

000011ce <delay_s>:

void delay_s(uint8_t s)
{
    11ce:	cf 93       	push	r28
    11d0:	c8 2f       	mov	r28, r24
    while (s > 0) {
    11d2:	cc 23       	and	r28, r28
    11d4:	31 f0       	breq	.+12     	; 0x11e2 <delay_s+0x14>
	delay_ms(1000);
    11d6:	88 ee       	ldi	r24, 0xE8	; 232
    11d8:	93 e0       	ldi	r25, 0x03	; 3
    11da:	0e 94 dd 08 	call	0x11ba	; 0x11ba <delay_ms>
	s--;
    11de:	c1 50       	subi	r28, 0x01	; 1
    11e0:	f8 cf       	rjmp	.-16     	; 0x11d2 <delay_s+0x4>
    }
//	wdt_reset();
}
    11e2:	cf 91       	pop	r28
    11e4:	08 95       	ret

000011e6 <check_range>:

int16_t check_range(int16_t min, int16_t in, int16_t max)
{
    11e6:	f8 2f       	mov	r31, r24
    11e8:	e9 2f       	mov	r30, r25
    11ea:	9b 01       	movw	r18, r22
    11ec:	46 17       	cp	r20, r22
    11ee:	57 07       	cpc	r21, r23
    11f0:	0c f4       	brge	.+2      	; 0x11f4 <check_range+0xe>
    11f2:	9a 01       	movw	r18, r20
    if (in > max)
	in = max;
    if (in < min)
	in = min;
    return in;
    11f4:	8f 2f       	mov	r24, r31
    11f6:	9e 2f       	mov	r25, r30
    11f8:	82 17       	cp	r24, r18
    11fa:	93 07       	cpc	r25, r19
    11fc:	0c f4       	brge	.+2      	; 0x1200 <check_range+0x1a>
    11fe:	c9 01       	movw	r24, r18
}
    1200:	08 95       	ret

00001202 <check_rangef>:

float check_rangef(float min, float in, float max)
{
    1202:	8f 92       	push	r8
    1204:	9f 92       	push	r9
    1206:	af 92       	push	r10
    1208:	bf 92       	push	r11
    120a:	cf 92       	push	r12
    120c:	df 92       	push	r13
    120e:	ef 92       	push	r14
    1210:	ff 92       	push	r15
    1212:	0f 93       	push	r16
    1214:	1f 93       	push	r17
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	4b 01       	movw	r8, r22
    121c:	5c 01       	movw	r10, r24
    121e:	69 01       	movw	r12, r18
    1220:	d4 2f       	mov	r29, r20
    1222:	c5 2f       	mov	r28, r21
    if (in > max)
    1224:	97 01       	movw	r18, r14
    1226:	a8 01       	movw	r20, r16
    1228:	b6 01       	movw	r22, r12
    122a:	8d 2f       	mov	r24, r29
    122c:	9c 2f       	mov	r25, r28
    122e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__gesf2>
    1232:	18 16       	cp	r1, r24
    1234:	1c f4       	brge	.+6      	; 0x123c <check_rangef+0x3a>
	in = max;
    1236:	67 01       	movw	r12, r14
    1238:	d0 2f       	mov	r29, r16
    123a:	c1 2f       	mov	r28, r17
    if (in < min)
    123c:	94 01       	movw	r18, r8
    123e:	a5 01       	movw	r20, r10
    1240:	b6 01       	movw	r22, r12
    1242:	8d 2f       	mov	r24, r29
    1244:	9c 2f       	mov	r25, r28
    1246:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__cmpsf2>
    124a:	87 ff       	sbrs	r24, 7
    124c:	03 c0       	rjmp	.+6      	; 0x1254 <check_rangef+0x52>
	in = min;
    124e:	64 01       	movw	r12, r8
    1250:	da 2d       	mov	r29, r10
    1252:	cb 2d       	mov	r28, r11
    return in;
}
    1254:	b6 01       	movw	r22, r12
    1256:	8d 2f       	mov	r24, r29
    1258:	9c 2f       	mov	r25, r28
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	1f 91       	pop	r17
    1260:	0f 91       	pop	r16
    1262:	ff 90       	pop	r15
    1264:	ef 90       	pop	r14
    1266:	df 90       	pop	r13
    1268:	cf 90       	pop	r12
    126a:	bf 90       	pop	r11
    126c:	af 90       	pop	r10
    126e:	9f 90       	pop	r9
    1270:	8f 90       	pop	r8
    1272:	08 95       	ret

00001274 <delay_btn_check>:

int8_t delay_btn_check(int8_t *delay_var)
{
    1274:	fc 01       	movw	r30, r24
    if (*delay_var) {
    1276:	80 81       	ld	r24, Z
    1278:	88 23       	and	r24, r24
    127a:	29 f0       	breq	.+10     	; 0x1286 <delay_btn_check+0x12>
	if (*delay_var > BTN_LONG_DELAY) {
    127c:	83 30       	cpi	r24, 0x03	; 3
    127e:	34 f0       	brlt	.+12     	; 0x128c <delay_btn_check+0x18>
	    *delay_var = 0;
    1280:	10 82       	st	Z, r1
	    return 1;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	08 95       	ret
	}
    } else {
	*delay_var = 1;
    1286:	91 e0       	ldi	r25, 0x01	; 1
    1288:	90 83       	st	Z, r25
    128a:	08 95       	ret
    }
    return 0;
    128c:	80 e0       	ldi	r24, 0x00	; 0
}
    128e:	08 95       	ret

00001290 <num_to_str>:

void num_to_str(struct m2bytes *nbuf)
{
    1290:	fc 01       	movw	r30, r24
    uint8_t tmp, num;
//m2bytes nbuf;

    num = nbuf->one;
    1292:	20 81       	ld	r18, Z
    1294:	24 36       	cpi	r18, 0x64	; 100
    1296:	08 f0       	brcs	.+2      	; 0x129a <num_to_str+0xa>
    1298:	23 e6       	ldi	r18, 0x63	; 99
    if (num > 99)
	num = 99;
    tmp = num / 10;
    129a:	82 2f       	mov	r24, r18
    129c:	6a e0       	ldi	r22, 0x0A	; 10
    129e:	0e 94 9c 10 	call	0x2138	; 0x2138 <__udivmodqi4>
    nbuf->one = tmp + '0';
    12a2:	90 e3       	ldi	r25, 0x30	; 48
    12a4:	98 0f       	add	r25, r24
    12a6:	90 83       	st	Z, r25
    num -= tmp * 10;
    nbuf->two = num + '0';
    12a8:	20 5d       	subi	r18, 0xD0	; 208
    12aa:	9a e0       	ldi	r25, 0x0A	; 10
    12ac:	89 9f       	mul	r24, r25
    12ae:	20 19       	sub	r18, r0
    12b0:	11 24       	eor	r1, r1
    12b2:	21 83       	std	Z+1, r18	; 0x01
    12b4:	08 95       	ret

000012b6 <SPI_SendByte>:
 }
 */

void SPI_SendByte(int8_t byte)
{
    SPDR = byte;
    12b6:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)))
    12b8:	0d b4       	in	r0, 0x2d	; 45
    12ba:	07 fe       	sbrs	r0, 7
    12bc:	fd cf       	rjmp	.-6      	; 0x12b8 <SPI_SendByte+0x2>
	;
}
    12be:	08 95       	ret

000012c0 <SPI_init>:

void SPI_init(void)
{
//    PORTB &= ~((1 << PORTB3) | (1 << PORTB5)); //низкий уровень
//    PORTB |= (1 << PORTB2);
    pin_high(SPI_SS);
    12c0:	2a 9a       	sbi	0x05, 2	; 5
    pin_low(SPI_MOSI);
    12c2:	2b 98       	cbi	0x05, 3	; 5
    pin_low(SPI_SCK);
    12c4:	2d 98       	cbi	0x05, 5	; 5

    //    DDRB = DDRB & ~((1 << PORTB2) | (1 << PORTB3) | (1 << PORTB4) | (1 << PORTB5));
    //    DDRB |= ((1 << PORTB2) | (1 << PORTB3) | (1 << PORTB5)); //ножки SPI на выход
    set_dir_in(SPI_MISO);
    12c6:	24 98       	cbi	0x04, 4	; 4
    set_dir_out(SPI_MOSI);
    12c8:	23 9a       	sbi	0x04, 3	; 4
    set_dir_out(SPI_SS);
    12ca:	22 9a       	sbi	0x04, 2	; 4
    set_dir_out(SPI_SCK);
    12cc:	25 9a       	sbi	0x04, 5	; 4

    //SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0); //включим шину, объ¤вим ведущим, делитель 16
    /*разрешение spi,старший бит вперед,мастер, режим 0*/
    SPCR = (1 << SPE) | (0 << DORD) | (1 << MSTR) | (0 << CPOL) | (0 << CPHA) | (0 << SPR1) | (0 << SPR0);
    12ce:	80 e5       	ldi	r24, 0x50	; 80
    12d0:	8c bd       	out	0x2c, r24	; 44
    SPSR = 0;    //(0 << SPI2X);
    12d2:	1d bc       	out	0x2d, r1	; 45
    12d4:	08 95       	ret

000012d6 <SPI_deInit>:
}

void SPI_deInit()
{
    SPCR = 0;
    12d6:	1c bc       	out	0x2c, r1	; 44
    set_dir_in(SPI_MISO);
    12d8:	24 98       	cbi	0x04, 4	; 4
    set_dir_in(SPI_MOSI);
    12da:	23 98       	cbi	0x04, 3	; 4
    set_dir_in(SPI_SS);
    12dc:	22 98       	cbi	0x04, 2	; 4
    set_dir_in(SPI_SCK);
    12de:	25 98       	cbi	0x04, 5	; 4
    12e0:	08 95       	ret

000012e2 <ADC_Init>:
}

void ADC_Init()
{
    ADCSRA = (1 << ADEN) // Включаем АЦП
    12e2:	83 e8       	ldi	r24, 0x83	; 131
    12e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    | (1 << ADPS1) | (1 << ADPS0);    // устанавливаем предделитель преобразователя на 8
    ADMUX = (1 << REFS1) | (1 << REFS0); //Подключен внутренний ион 1.1В, с внешним конденсатором на AREF пине
    12e8:	80 ec       	ldi	r24, 0xC0	; 192
    12ea:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    12ee:	08 95       	ret

000012f0 <ADC_Mux>:
}

void ADC_Mux(adc_in_type input)
{
    ADMUX &= ~(0b1111);
    12f0:	ec e7       	ldi	r30, 0x7C	; 124
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	90 81       	ld	r25, Z
    12f6:	90 7f       	andi	r25, 0xF0	; 240
    12f8:	90 83       	st	Z, r25
    ADMUX |= (input & 0b1111);
    12fa:	90 81       	ld	r25, Z
    12fc:	8f 70       	andi	r24, 0x0F	; 15
    12fe:	98 2b       	or	r25, r24
    1300:	90 83       	st	Z, r25
    delay_ms(1); // TODO
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <delay_ms>

0000130a <ADC_Start>:
}

void ADC_Start()
{
    ADCSRA |= (1 << ADSC);    // Начинаем преобразование
    130a:	ea e7       	ldi	r30, 0x7A	; 122
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	80 64       	ori	r24, 0x40	; 64
    1312:	80 83       	st	Z, r24
    1314:	08 95       	ret

00001316 <ADC_GetData>:
}

uint16_t ADC_GetData()
{
    return (ADCL | ADCH << 8); // Считываем  полученное значение
    1316:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    131a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    131e:	90 e0       	ldi	r25, 0x00	; 0
}
    1320:	92 2b       	or	r25, r18
    1322:	08 95       	ret

00001324 <eeprom_write_byte1>:

void eeprom_write_byte1(uint16_t addr, uint8_t data)
{
    /*wait until previous write any*/
    while (EECR & (1 << EEPE))
    1324:	f9 99       	sbic	0x1f, 1	; 31
    1326:	fe cf       	rjmp	.-4      	; 0x1324 <eeprom_write_byte1>
	;
    EEAR = addr;
    1328:	92 bd       	out	0x22, r25	; 34
    132a:	81 bd       	out	0x21, r24	; 33
    EEDR = data;
    132c:	60 bd       	out	0x20, r22	; 32
    EECR |= (1 << EEMPE);
    132e:	fa 9a       	sbi	0x1f, 2	; 31
    EECR |= (1 << EEPE);
    1330:	f9 9a       	sbi	0x1f, 1	; 31
    1332:	08 95       	ret

00001334 <eeprom_read_byte1>:
}

uint8_t eeprom_read_byte1(uint16_t addr)
{
    /*wait until previous write any*/
    while (EECR & (1 << EEPE))
    1334:	f9 99       	sbic	0x1f, 1	; 31
    1336:	fe cf       	rjmp	.-4      	; 0x1334 <eeprom_read_byte1>
	;
    EEAR = addr;
    1338:	92 bd       	out	0x22, r25	; 34
    133a:	81 bd       	out	0x21, r24	; 33
    EECR |= (1 << EERE);
    133c:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    133e:	80 b5       	in	r24, 0x20	; 32
}
    1340:	08 95       	ret

00001342 <eeprom_read_buf>:

void eeprom_read_buf(uint8_t *data, uint16_t addr, uint16_t len)
{
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	8c 01       	movw	r16, r24
    1350:	04 0f       	add	r16, r20
    1352:	15 1f       	adc	r17, r21
    for (uint16_t i = 0; i < len; i++) {
    1354:	ec 01       	movw	r28, r24
	data[i] = eeprom_read_byte1(addr + i);
    1356:	7b 01       	movw	r14, r22
    1358:	e8 1a       	sub	r14, r24
    135a:	f9 0a       	sbc	r15, r25
    return EEDR;
}

void eeprom_read_buf(uint8_t *data, uint16_t addr, uint16_t len)
{
    for (uint16_t i = 0; i < len; i++) {
    135c:	c0 17       	cp	r28, r16
    135e:	d1 07       	cpc	r29, r17
    1360:	39 f0       	breq	.+14     	; 0x1370 <eeprom_read_buf+0x2e>
	data[i] = eeprom_read_byte1(addr + i);
    1362:	c7 01       	movw	r24, r14
    1364:	8c 0f       	add	r24, r28
    1366:	9d 1f       	adc	r25, r29
    1368:	0e 94 9a 09 	call	0x1334	; 0x1334 <eeprom_read_byte1>
    136c:	89 93       	st	Y+, r24
    136e:	f6 cf       	rjmp	.-20     	; 0x135c <eeprom_read_buf+0x1a>
    }
    while (EECR & (1 << EEPE))
    1370:	f9 99       	sbic	0x1f, 1	; 31
    1372:	fe cf       	rjmp	.-4      	; 0x1370 <eeprom_read_buf+0x2e>
	;
}
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	ff 90       	pop	r15
    137e:	ef 90       	pop	r14
    1380:	08 95       	ret

00001382 <eeprom_update_buf>:

void eeprom_update_buf(uint16_t addr, uint8_t *data, uint16_t len)
{
    1382:	cf 92       	push	r12
    1384:	df 92       	push	r13
    1386:	ef 92       	push	r14
    1388:	ff 92       	push	r15
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	8b 01       	movw	r16, r22
    1394:	04 0f       	add	r16, r20
    1396:	15 1f       	adc	r17, r21
    for (uint16_t i = 0; i < len; i++) {
    1398:	eb 01       	movw	r28, r22
    139a:	6c 01       	movw	r12, r24
    139c:	c6 1a       	sub	r12, r22
    139e:	d7 0a       	sbc	r13, r23
    13a0:	c0 17       	cp	r28, r16
    13a2:	d1 07       	cpc	r29, r17
    13a4:	69 f0       	breq	.+26     	; 0x13c0 <eeprom_update_buf+0x3e>
    13a6:	76 01       	movw	r14, r12
    13a8:	ec 0e       	add	r14, r28
    13aa:	fd 1e       	adc	r15, r29
	uint8_t b = eeprom_read_byte1(addr + i);
    13ac:	c7 01       	movw	r24, r14
    13ae:	0e 94 9a 09 	call	0x1334	; 0x1334 <eeprom_read_byte1>
	if (b != data[i]) {
    13b2:	69 91       	ld	r22, Y+
    13b4:	86 17       	cp	r24, r22
    13b6:	a1 f3       	breq	.-24     	; 0x13a0 <eeprom_update_buf+0x1e>
	    eeprom_write_byte1(addr + i, data[i]);
    13b8:	c7 01       	movw	r24, r14
    13ba:	0e 94 92 09 	call	0x1324	; 0x1324 <eeprom_write_byte1>
    13be:	f0 cf       	rjmp	.-32     	; 0x13a0 <eeprom_update_buf+0x1e>
	}
    }
    while (EECR & (1 << EEPE))
    13c0:	f9 99       	sbic	0x1f, 1	; 31
    13c2:	fe cf       	rjmp	.-4      	; 0x13c0 <eeprom_update_buf+0x3e>
	;
}
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	1f 91       	pop	r17
    13ca:	0f 91       	pop	r16
    13cc:	ff 90       	pop	r15
    13ce:	ef 90       	pop	r14
    13d0:	df 90       	pop	r13
    13d2:	cf 90       	pop	r12
    13d4:	08 95       	ret

000013d6 <main>:
}

int main(void)
{
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	1f 92       	push	r1
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    wdt_reset();
    13e0:	a8 95       	wdr
    cli();
    13e2:	f8 94       	cli
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    13e4:	98 e2       	ldi	r25, 0x28	; 40
    13e6:	88 e1       	ldi	r24, 0x18	; 24
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	a8 95       	wdr
    13ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    wdt_enable(WDTO_4S);
    wdt_reset();
    13f8:	a8 95       	wdr
    int8_t disp_num = 0;
    uint8_t disp_bar = 0;
    int8_t tmp;
    uint8_t time_cnt;
    int8_t smode = 0;
    int8_t bdelay = 0;
    13fa:	19 82       	std	Y+1, r1	; 0x01

    bootVarsInit();
    13fc:	0e 94 1e 03 	call	0x63c	; 0x63c <bootVarsInit>

    setup_pins();
    1400:	0e 94 db 07 	call	0xfb6	; 0xfb6 <setup_pins>

    while (!get_input(IN_ACC)) { //ACC off
    1404:	33 99       	sbic	0x06, 3	; 6
    1406:	07 c0       	rjmp	.+14     	; 0x1416 <main+0x40>
	wdt_reset();
    1408:	a8 95       	wdr
	delay_s(1); // wait for ACC
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <delay_s>
	display_off();
    1410:	0e 94 02 08 	call	0x1004	; 0x1004 <display_off>
    1414:	f7 cf       	rjmp	.-18     	; 0x1404 <main+0x2e>
    }

    delay_ms(10);
    1416:	8a e0       	ldi	r24, 0x0A	; 10
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <delay_ms>
    myread_eeprom();
    141e:	0e 94 1d 02 	call	0x43a	; 0x43a <myread_eeprom>

    //TODO sei();

    ADC_Init();
    1422:	0e 94 71 09 	call	0x12e2	; 0x12e2 <ADC_Init>
    USART_Init();
    1426:	0e 94 b0 08 	call	0x1160	; 0x1160 <USART_Init>
    //int_to_uart("T", 0);

    SPI_init();
    142a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <SPI_init>
    delay_ms(1);
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0e 94 dd 08 	call	0x11ba	; 0x11ba <delay_ms>

    //int_to_uart("T", 1);
    Send_7219(0, 0);
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	0e 94 0a 08 	call	0x1014	; 0x1014 <Send_7219>
    delay_ms(1);
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	0e 94 dd 08 	call	0x11ba	; 0x11ba <delay_ms>
    Clear_7219();
    1446:	0e 94 20 08 	call	0x1040	; 0x1040 <Clear_7219>
    Send_7219(0x09, 0x00); //режим декодирования
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	89 e0       	ldi	r24, 0x09	; 9
    144e:	0e 94 0a 08 	call	0x1014	; 0x1014 <Send_7219>
    Send_7219(0x0A, 0x01); //яркость
    1452:	61 e0       	ldi	r22, 0x01	; 1
    1454:	8a e0       	ldi	r24, 0x0A	; 10
    1456:	0e 94 0a 08 	call	0x1014	; 0x1014 <Send_7219>
    Send_7219(0x0B, DISP_LEN - 1); //сколько разрядов используем
    145a:	63 e0       	ldi	r22, 0x03	; 3
    145c:	8b e0       	ldi	r24, 0x0B	; 11
    145e:	0e 94 0a 08 	call	0x1014	; 0x1014 <Send_7219>
    Send_7219(0x0D, 0x00);
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	8d e0       	ldi	r24, 0x0D	; 13
    1466:	0e 94 0a 08 	call	0x1014	; 0x1014 <Send_7219>
    Send_7219(0x0E, 0x00);
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	8e e0       	ldi	r24, 0x0E	; 14
    146e:	0e 94 0a 08 	call	0x1014	; 0x1014 <Send_7219>
    Send_7219(0x0F, 0x00);
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	8f e0       	ldi	r24, 0x0F	; 15
    1476:	0e 94 0a 08 	call	0x1014	; 0x1014 <Send_7219>
    delay_ms(1);
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <delay_ms>

    //int_to_uart("T", 2);
    wdt_reset();
    1482:	a8 95       	wdr

    disp_num = vars.setup_temp;
    1484:	f0 90 5d 01 	lds	r15, 0x015D	; 0x80015d <vars+0x1>
    Disp_Num(disp_num, 0);
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	8f 2d       	mov	r24, r15
    148c:	0e 94 8d 08 	call	0x111a	; 0x111a <Disp_Num>
    Send_7219(0x0C, 1); //включим индикатор
    1490:	61 e0       	ldi	r22, 0x01	; 1
    1492:	8c e0       	ldi	r24, 0x0C	; 12
    1494:	0e 94 0a 08 	call	0x1014	; 0x1014 <Send_7219>
    disp_bar = vars.vent_nom_seg;
    1498:	b0 90 5e 01 	lds	r11, 0x015E	; 0x80015e <vars+0x2>
    Disp_Bars(disp_bar);
    149c:	8b 2d       	mov	r24, r11
    149e:	0e 94 2a 08 	call	0x1054	; 0x1054 <Disp_Bars>

    cli();
    14a2:	f8 94       	cli
    //int_to_uart("T", 3);
//timer init
    TCCR1A = 0;  	//Т/С1 отсоединен от вывода ОС1, режим ШИМ отключен
    14a4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = 4;  	//Коэффициент деления частоты системной	синхронизации = 256
    14a8:	84 e0       	ldi	r24, 0x04	; 4
    14aa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCNT1 = 0x10000 - (F_CPU / 512); //Инициализируем счетный регистр
    14ae:	87 ef       	ldi	r24, 0xF7	; 247
    14b0:	92 ec       	ldi	r25, 0xC2	; 194
    14b2:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    14b6:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

    TIFR1 = 0;       //Сбрасываем все флаги прерываний от Т/С1
    14ba:	16 ba       	out	0x16, r1	; 22
    TIMSK1 = 1 << TOIE1;  	//Разрешаем прерывание при переполнении Т/С1
    14bc:	91 e0       	ldi	r25, 0x01	; 1
    14be:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

    //interrupt setup
    EICRA = 0; // External Interrupt Control Register A
    14c2:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    EIMSK = 0; //External Interrupt Mask Register
    14c6:	1d ba       	out	0x1d, r1	; 29
    EIMSK = (1 << INT0) | (1 << INT1);
    14c8:	83 e0       	ldi	r24, 0x03	; 3
    14ca:	8d bb       	out	0x1d, r24	; 29
    EICRA = (1 << ISC00) | (1 << ISC10); // set INT0 + INT1 to trigger on ANY logic change
    14cc:	85 e0       	ldi	r24, 0x05	; 5
    14ce:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>

    //int_to_uart("T", 4);

    //set by IN_BTN_V_DWN  + IN_BTN_V_UP
    PCMSK0 = (1 << PCINT0);  // set PCINT0 to trigger an interrupt on state change
    14d2:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    PCMSK2 = (1 << PCINT23);  // set PCINT23 to trigger an interrupt on state change
    14d6:	90 e8       	ldi	r25, 0x80	; 128
    14d8:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
    PCICR = (1 << PCIE0) | (1 << PCIE2);    // Pin Change Interrupt Control Register
    14dc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>

//todo	GIMSK = 0;     	//Запрет внешних прерываний
    //int_to_uart("T", 5);
    delay_ms(10);
    14e0:	8a e0       	ldi	r24, 0x0A	; 10
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 dd 08 	call	0x11ba	; 0x11ba <delay_ms>
    sei();
    14e8:	78 94       	sei

    vent_enc = 0;
    14ea:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <vent_enc>
    temp_enc = 0;
    14ee:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <temp_enc>
    time_cnt = 0;

    wdt_reset();
    14f2:	a8 95       	wdr
    /*    vent_seg_cur = VENT_SEGs;
     temp_seg_cur = TEMP_SEGs;
     */
    vent_seg_cur = -1;
    14f4:	8f ef       	ldi	r24, 0xFF	; 255
    14f6:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <vent_seg_cur>
    temp_seg_cur = -1;
    14fa:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <temp_seg_cur>
    set_vent_seg(0, 1);
    14fe:	61 e0       	ldi	r22, 0x01	; 1
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	0e 94 70 03 	call	0x6e0	; 0x6e0 <set_vent_seg>
    set_temp(0, 1);
    1506:	61 e0       	ldi	r22, 0x01	; 1
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <set_temp>
    150e:	98 e2       	ldi	r25, 0x28	; 40
    1510:	88 e1       	ldi	r24, 0x18	; 24
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	a8 95       	wdr
    1518:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>

    wdt_enable(WDTO_4S);
    //int_to_uart("T", 10);

    tmp = 5;
    while (tmp--) {
    1522:	16 e0       	ldi	r17, 0x06	; 6
    1524:	11 50       	subi	r17, 0x01	; 1
    1526:	f1 f0       	breq	.+60     	; 0x1564 <main+0x18e>
	wdt_reset();
    1528:	a8 95       	wdr
	Ts = getTempSalon();
    152a:	0e 94 46 03 	call	0x68c	; 0x68c <getTempSalon>
    152e:	60 93 45 01 	sts	0x0145, r22	; 0x800145 <Ts>
    1532:	70 93 46 01 	sts	0x0146, r23	; 0x800146 <Ts+0x1>
    1536:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <Ts+0x2>
    153a:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <Ts+0x3>
	delay_ms(1);
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 dd 08 	call	0x11ba	; 0x11ba <delay_ms>
	Ti = getTempIsparit();
    1546:	0e 94 49 03 	call	0x692	; 0x692 <getTempIsparit>
    154a:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <Ti>
    154e:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <Ti+0x1>
    1552:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <Ti+0x2>
    1556:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <Ti+0x3>
	delay_ms(100);
    155a:	84 e6       	ldi	r24, 0x64	; 100
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <delay_ms>
    1562:	e0 cf       	rjmp	.-64     	; 0x1524 <main+0x14e>
    }

    if (vars.auto_defrost) {
    1564:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <vars+0xa>
    1568:	88 23       	and	r24, r24
    156a:	e1 f0       	breq	.+56     	; 0x15a4 <main+0x1ce>
	tmp = vars.auto_defrost - 3;
    156c:	00 91 66 01 	lds	r16, 0x0166	; 0x800166 <vars+0xa>
    1570:	03 50       	subi	r16, 0x03	; 3
	if (Ts < tmp) {
    1572:	40 90 45 01 	lds	r4, 0x0145	; 0x800145 <Ts>
    1576:	50 90 46 01 	lds	r5, 0x0146	; 0x800146 <Ts+0x1>
    157a:	60 90 47 01 	lds	r6, 0x0147	; 0x800147 <Ts+0x2>
    157e:	70 90 48 01 	lds	r7, 0x0148	; 0x800148 <Ts+0x3>
    1582:	60 2f       	mov	r22, r16
    1584:	00 2e       	mov	r0, r16
    1586:	00 0c       	add	r0, r0
    1588:	77 0b       	sbc	r23, r23
    158a:	88 0b       	sbc	r24, r24
    158c:	99 0b       	sbc	r25, r25
    158e:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__floatsisf>
    1592:	a3 01       	movw	r20, r6
    1594:	92 01       	movw	r18, r4
    1596:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__gesf2>
    159a:	18 16       	cp	r1, r24
    159c:	34 f4       	brge	.+12     	; 0x15aa <main+0x1d4>
	    smode = smode_hi_mode;
    159e:	64 e6       	ldi	r22, 0x64	; 100
    15a0:	e6 2e       	mov	r14, r22
    15a2:	04 c0       	rjmp	.+8      	; 0x15ac <main+0x1d6>
    wdt_reset();
    int8_t disp_num = 0;
    uint8_t disp_bar = 0;
    int8_t tmp;
    uint8_t time_cnt;
    int8_t smode = 0;
    15a4:	e1 2c       	mov	r14, r1

    wdt_enable(WDTO_4S);
    //int_to_uart("T", 10);

    tmp = 5;
    while (tmp--) {
    15a6:	0f ef       	ldi	r16, 0xFF	; 255
    15a8:	01 c0       	rjmp	.+2      	; 0x15ac <main+0x1d6>
    wdt_reset();
    int8_t disp_num = 0;
    uint8_t disp_bar = 0;
    int8_t tmp;
    uint8_t time_cnt;
    int8_t smode = 0;
    15aa:	e1 2c       	mov	r14, r1
    }

    //Ipid = (float) vars.setup_temp;
    //Ipid = check_rangef(-(100 / PID_I_KFC), Ipid - Ts, 100 / PID_I_KFC);

    setup_display();
    15ac:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <setup_display>
    wdt_reset();
    15b0:	a8 95       	wdr
     if (!get_input(IN_FROST_BTN)) { // Если при включении нажата Setup сразу
     smode = 1;
     tmp = 'c';
     }
     */
    vent_enc = 0;
    15b2:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <vent_enc>
    temp_enc = 0;
    15b6:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <temp_enc>
    delay_ms(10);
    sei();

    vent_enc = 0;
    temp_enc = 0;
    time_cnt = 0;
    15ba:	10 e0       	ldi	r17, 0x00	; 0
		} else {
		    if (TST_FLAG(f_cond_btn_press)) {
			if (vars.cond_enabled) {
			    vars.cond_enabled = 0;
			} else {
			    vars.cond_enabled = 1;
    15bc:	aa 24       	eor	r10, r10
    15be:	a3 94       	inc	r10
}

uint8_t seg2Prc(uint8_t segs, uint8_t seg)
{
    //seg = check_range(0, seg, segs);
    uint16_t tmp = (seg * 100) / segs;
    15c0:	5f e0       	ldi	r21, 0x0F	; 15
    15c2:	c5 2e       	mov	r12, r21
    15c4:	d1 2c       	mov	r13, r1
     */
    vent_enc = 0;
    temp_enc = 0;

    while (1) {
	if (get_input(IN_ACC)) { //ACC on
    15c6:	33 9b       	sbis	0x06, 3	; 6
    15c8:	c1 c2       	rjmp	.+1410   	; 0x1b4c <main+0x776>

	    if (smode == smode_hi_mode) {	//HI_MODE
    15ca:	24 e6       	ldi	r18, 0x64	; 100
    15cc:	e2 12       	cpse	r14, r18
    15ce:	1d c0       	rjmp	.+58     	; 0x160a <main+0x234>
		time_cnt = 0;
		tmp = 10;
		if (get_input(IN_BTN_HI_MODE)) { // не нажата
    15d0:	34 9b       	sbis	0x06, 4	; 6
    15d2:	06 c0       	rjmp	.+12     	; 0x15e0 <main+0x20a>
		    recycleSwitch(); //recycle mode on
    15d4:	0e 94 c3 07 	call	0xf86	; 0xf86 <recycleSwitch>
		    hiAirSwitch(); // обдув на лобовое
    15d8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <hiAirSwitch>
		    smode = smode_hi_mode_work;
    15dc:	45 e6       	ldi	r20, 0x65	; 101
    15de:	e4 2e       	mov	r14, r20
		}

		set_temp(100, 1);
    15e0:	61 e0       	ldi	r22, 0x01	; 1
    15e2:	84 e6       	ldi	r24, 0x64	; 100
    15e4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <set_temp>
		set_vent_seg(tmp, 1);
    15e8:	61 e0       	ldi	r22, 0x01	; 1
    15ea:	8a e0       	ldi	r24, 0x0A	; 10
    15ec:	0e 94 70 03 	call	0x6e0	; 0x6e0 <set_vent_seg>

		Disp_Num_Seg(NUM0_SEG, 'H', 0);
    15f0:	40 e0       	ldi	r20, 0x00	; 0
    15f2:	68 e4       	ldi	r22, 0x48	; 72
    15f4:	83 e0       	ldi	r24, 0x03	; 3
    15f6:	0e 94 47 08 	call	0x108e	; 0x108e <Disp_Num_Seg>
		Disp_Num_Seg(NUM1_SEG, 'I', 0);
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	69 e4       	ldi	r22, 0x49	; 73
    15fe:	84 e0       	ldi	r24, 0x04	; 4
    1600:	0e 94 47 08 	call	0x108e	; 0x108e <Disp_Num_Seg>

    while (1) {
	if (get_input(IN_ACC)) { //ACC on

	    if (smode == smode_hi_mode) {	//HI_MODE
		time_cnt = 0;
    1604:	10 e0       	ldi	r17, 0x00	; 0
		tmp = 10;
    1606:	0a e0       	ldi	r16, 0x0A	; 10
    1608:	8c c2       	rjmp	.+1304   	; 0x1b22 <main+0x74c>
		set_vent_seg(tmp, 1);

		Disp_Num_Seg(NUM0_SEG, 'H', 0);
		Disp_Num_Seg(NUM1_SEG, 'I', 0);

	    } else if (smode == smode_hi_mode_work) {		//HI_MODE WORK
    160a:	85 e6       	ldi	r24, 0x65	; 101
    160c:	e8 12       	cpse	r14, r24
    160e:	3d c0       	rjmp	.+122    	; 0x168a <main+0x2b4>
		//if (time_cnt > 2)
		{
		    uint8_t ti = get_input(IN_BTN_HI_MODE);
    1610:	86 b1       	in	r24, 0x06	; 6
    1612:	80 71       	andi	r24, 0x10	; 16
    1614:	98 2e       	mov	r9, r24
		    uint8_t tp1 = get_input(OUT_BTN_MODE_UP_DOWN);
    1616:	86 b0       	in	r8, 0x06	; 6
		    if ((time_cnt > HI_HOT_TMO_S && (int) getTempSalon() > HI_HOT_T_c) || !ti || !tp1) {
    1618:	11 3f       	cpi	r17, 0xF1	; 241
    161a:	18 f4       	brcc	.+6      	; 0x1622 <main+0x24c>
    161c:	99 20       	and	r9, r9
    161e:	41 f0       	breq	.+16     	; 0x1630 <main+0x25a>
    1620:	0e c0       	rjmp	.+28     	; 0x163e <main+0x268>
    1622:	0e 94 46 03 	call	0x68c	; 0x68c <getTempSalon>
    1626:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
    162a:	6b 30       	cpi	r22, 0x0B	; 11
    162c:	71 05       	cpc	r23, r1
    162e:	b4 f3       	brlt	.-20     	; 0x161c <main+0x246>
			smode = 0;
			time_cnt = 0;
			recycleSwitch(); //recycle mode off
    1630:	0e 94 c3 07 	call	0xf86	; 0xf86 <recycleSwitch>
			if (ti) { // Если не нажата HI переходим в выбранный рабочий режим
    1634:	99 20       	and	r9, r9
    1636:	31 f0       	breq	.+12     	; 0x1644 <main+0x26e>
			    prefAirSwitch(); // переключаем в любимый режим обдува
    1638:	0e 94 cb 07 	call	0xf96	; 0xf96 <prefAirSwitch>
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <main+0x26e>
	    } else if (smode == smode_hi_mode_work) {		//HI_MODE WORK
		//if (time_cnt > 2)
		{
		    uint8_t ti = get_input(IN_BTN_HI_MODE);
		    uint8_t tp1 = get_input(OUT_BTN_MODE_UP_DOWN);
		    if ((time_cnt > HI_HOT_TMO_S && (int) getTempSalon() > HI_HOT_T_c) || !ti || !tp1) {
    163e:	80 fe       	sbrs	r8, 0
    1640:	f7 cf       	rjmp	.-18     	; 0x1630 <main+0x25a>
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <main+0x272>
			smode = 0;
    1644:	e1 2c       	mov	r14, r1
			time_cnt = 0;
    1646:	10 e0       	ldi	r17, 0x00	; 0
			    prefAirSwitch(); // переключаем в любимый режим обдува
			}
		    }
		}

		if (vent_enc) {
    1648:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <vent_enc>
    164c:	88 23       	and	r24, r24
    164e:	99 f0       	breq	.+38     	; 0x1676 <main+0x2a0>
		    tmp = check_range(0, tmp + vent_enc, VENT_SEGs);
    1650:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <vent_enc>
    1654:	06 2e       	mov	r0, r22
    1656:	00 0c       	add	r0, r0
    1658:	77 0b       	sbc	r23, r23
    165a:	60 0f       	add	r22, r16
    165c:	71 1d       	adc	r23, r1
    165e:	07 fd       	sbrc	r16, 7
    1660:	7a 95       	dec	r23
    1662:	48 e0       	ldi	r20, 0x08	; 8
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <check_range>
    166e:	08 2f       	mov	r16, r24
		    time_cnt = 0;
		    vent_enc = 0;
    1670:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <vent_enc>
		    }
		}

		if (vent_enc) {
		    tmp = check_range(0, tmp + vent_enc, VENT_SEGs);
		    time_cnt = 0;
    1674:	10 e0       	ldi	r17, 0x00	; 0
		    vent_enc = 0;
		}

		set_temp(100, 1); // Синхронизация Т к 100%
    1676:	61 e0       	ldi	r22, 0x01	; 1
    1678:	84 e6       	ldi	r24, 0x64	; 100
    167a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <set_temp>
		set_vent_seg(tmp, 1);
    167e:	61 e0       	ldi	r22, 0x01	; 1
    1680:	80 2f       	mov	r24, r16
    1682:	0e 94 70 03 	call	0x6e0	; 0x6e0 <set_vent_seg>

		//Disp_Num_Seg(NUM0_SEG, 'H', 0);
		//Disp_Num_Seg(NUM1_SEG, 'I', 0);
		Disp_Bars(tmp);
    1686:	80 2f       	mov	r24, r16
    1688:	4a c2       	rjmp	.+1172   	; 0x1b1e <main+0x748>

	    } else if (smode) {		//Setup mode
    168a:	ee 20       	and	r14, r14
    168c:	09 f4       	brne	.+2      	; 0x1690 <main+0x2ba>
    168e:	1f c1       	rjmp	.+574    	; 0x18ce <main+0x4f8>

		if (time_cnt > SETUP_TMO_S) {
    1690:	16 30       	cpi	r17, 0x06	; 6
    1692:	90 f0       	brcs	.+36     	; 0x16b8 <main+0x2e2>
		    smode = 0;
		    time_cnt = 0;
		    disp_num = vars.setup_temp;
    1694:	f0 90 5d 01 	lds	r15, 0x015D	; 0x80015d <vars+0x1>
		    //cbtn = 0;
		    if (vars.wmode == wmode_auto) {
    1698:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <vars>
    169c:	88 23       	and	r24, r24
    169e:	19 f0       	breq	.+6      	; 0x16a6 <main+0x2d0>
		Disp_Bars(tmp);

	    } else if (smode) {		//Setup mode

		if (time_cnt > SETUP_TMO_S) {
		    smode = 0;
    16a0:	e1 2c       	mov	r14, r1
		    time_cnt = 0;
    16a2:	10 e0       	ldi	r17, 0x00	; 0
    16a4:	90 cf       	rjmp	.-224    	; 0x15c6 <main+0x1f0>
		    disp_num = vars.setup_temp;
		    //cbtn = 0;
		    if (vars.wmode == wmode_auto) {
			set_vent_seg(1, 1);
    16a6:	61 e0       	ldi	r22, 0x01	; 1
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	0e 94 70 03 	call	0x6e0	; 0x6e0 <set_vent_seg>
			set_temp(0, 1);
    16ae:	61 e0       	ldi	r22, 0x01	; 1
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <set_temp>
    16b6:	f4 cf       	rjmp	.-24     	; 0x16a0 <main+0x2ca>
		    }
		    continue;
		}

		if (vent_enc) { // переключаем пункты настройки
    16b8:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <vent_enc>
    16bc:	88 23       	and	r24, r24
    16be:	b9 f0       	breq	.+46     	; 0x16ee <main+0x318>
		    smode = check_range(1, smode + vent_enc, smode_SETUP_LAST - 1);
    16c0:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <vent_enc>
    16c4:	06 2e       	mov	r0, r22
    16c6:	00 0c       	add	r0, r0
    16c8:	77 0b       	sbc	r23, r23
    16ca:	6e 0d       	add	r22, r14
    16cc:	71 1d       	adc	r23, r1
    16ce:	e7 fc       	sbrc	r14, 7
    16d0:	7a 95       	dec	r23
    16d2:	4a e0       	ldi	r20, 0x0A	; 10
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <check_range>
    16de:	e8 2e       	mov	r14, r24
		    time_cnt = 0;
		    vent_enc = 0;
    16e0:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <vent_enc>
		    disp_num = smode - 1;
    16e4:	ff 24       	eor	r15, r15
    16e6:	fa 94       	dec	r15
    16e8:	f8 0e       	add	r15, r24
		    tmp = 'c';
    16ea:	03 e6       	ldi	r16, 0x63	; 99
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <main+0x31c>
		}

		int8_t lf = 0;
		if (time_cnt > 0) {
    16ee:	11 11       	cpse	r17, r1
    16f0:	03 c0       	rjmp	.+6      	; 0x16f8 <main+0x322>
		if (vent_enc) { // переключаем пункты настройки
		    smode = check_range(1, smode + vent_enc, smode_SETUP_LAST - 1);
		    time_cnt = 0;
		    vent_enc = 0;
		    disp_num = smode - 1;
		    tmp = 'c';
    16f2:	10 e0       	ldi	r17, 0x00	; 0
		}

		int8_t lf = 0;
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	01 c0       	rjmp	.+2      	; 0x16fa <main+0x324>
		if (time_cnt > 0) {
		    lf = 1;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
		}

		if (temp_enc) { //изменение параметра
    16fa:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <temp_enc>
    16fe:	91 11       	cpse	r25, r1
    1700:	04 c0       	rjmp	.+8      	; 0x170a <main+0x334>
		    lf = 1;
		    time_cnt = 0;
		}

		if (lf) {
    1702:	88 23       	and	r24, r24
    1704:	09 f4       	brne	.+2      	; 0x1708 <main+0x332>
    1706:	d0 c0       	rjmp	.+416    	; 0x18a8 <main+0x4d2>
    1708:	01 c0       	rjmp	.+2      	; 0x170c <main+0x336>
		    lf = 1;
		}

		if (temp_enc) { //изменение параметра
		    lf = 1;
		    time_cnt = 0;
    170a:	10 e0       	ldi	r17, 0x00	; 0
		}

		if (lf) {
		    tmp = 0;
		    switch (smode) {
    170c:	8e 2d       	mov	r24, r14
    170e:	0e 2c       	mov	r0, r14
    1710:	00 0c       	add	r0, r0
    1712:	99 0b       	sbc	r25, r25
    1714:	aa 0b       	sbc	r26, r26
    1716:	bb 0b       	sbc	r27, r27
    1718:	fc 01       	movw	r30, r24
    171a:	31 97       	sbiw	r30, 0x01	; 1
    171c:	ea 30       	cpi	r30, 0x0A	; 10
    171e:	f1 05       	cpc	r31, r1
    1720:	08 f0       	brcs	.+2      	; 0x1724 <main+0x34e>
    1722:	b8 c0       	rjmp	.+368    	; 0x1894 <main+0x4be>
    1724:	ec 5c       	subi	r30, 0xCC	; 204
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__tablejump2__>
		    case smode_manual: // в ручной режим
			tmp = 'r';
			vars.wmode = check_range(0, vars.wmode + temp_enc, 1);
    172c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <vars>
    1730:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <temp_enc>
    1734:	06 2e       	mov	r0, r22
    1736:	00 0c       	add	r0, r0
    1738:	77 0b       	sbc	r23, r23
    173a:	68 0f       	add	r22, r24
    173c:	71 1d       	adc	r23, r1
    173e:	41 e0       	ldi	r20, 0x01	; 1
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <check_range>
    174a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <vars>
			if (vars.wmode == wmode_auto) {
    174e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <vars>

		if (lf) {
		    tmp = 0;
		    switch (smode) {
		    case smode_manual: // в ручной режим
			tmp = 'r';
    1752:	02 e7       	ldi	r16, 0x72	; 114
			vars.wmode = check_range(0, vars.wmode + temp_enc, 1);
			if (vars.wmode == wmode_auto) {
    1754:	88 23       	and	r24, r24
    1756:	09 f4       	brne	.+2      	; 0x175a <main+0x384>
    1758:	9f c0       	rjmp	.+318    	; 0x1898 <main+0x4c2>
			    disp_num = 'A';
			} else {
			    disp_num = 'P';
    175a:	30 e5       	ldi	r19, 0x50	; 80
    175c:	f3 2e       	mov	r15, r19
    175e:	a2 c0       	rjmp	.+324    	; 0x18a4 <main+0x4ce>
			}
			break;
		    case smode_auto_defrost: // авто подогрев лобового при включении зажигания если температура < 0
			tmp = 'H';
			vars.auto_defrost = check_range(0, vars.auto_defrost + temp_enc, 5);
    1760:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <vars+0xa>
    1764:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <temp_enc>
    1768:	06 2e       	mov	r0, r22
    176a:	00 0c       	add	r0, r0
    176c:	77 0b       	sbc	r23, r23
    176e:	68 0f       	add	r22, r24
    1770:	71 1d       	adc	r23, r1
    1772:	87 fd       	sbrc	r24, 7
    1774:	7a 95       	dec	r23
    1776:	45 e0       	ldi	r20, 0x05	; 5
    1778:	50 e0       	ldi	r21, 0x00	; 0
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <check_range>
    1782:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <vars+0xa>
			disp_num = vars.auto_defrost;
    1786:	f0 90 66 01 	lds	r15, 0x0166	; 0x800166 <vars+0xa>
			} else {
			    disp_num = 'P';
			}
			break;
		    case smode_auto_defrost: // авто подогрев лобового при включении зажигания если температура < 0
			tmp = 'H';
    178a:	08 e4       	ldi	r16, 0x48	; 72
			vars.auto_defrost = check_range(0, vars.auto_defrost + temp_enc, 5);
			disp_num = vars.auto_defrost;
			break;
    178c:	8b c0       	rjmp	.+278    	; 0x18a4 <main+0x4ce>
		    case smode_cnd_frost: //температура обмерзания кондиционера
			tmp = 'C';
			vars.const_cnd_frost_t = check_range(0, vars.const_cnd_frost_t + temp_enc, 9);
    178e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <vars+0x8>
    1792:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <temp_enc>
    1796:	06 2e       	mov	r0, r22
    1798:	00 0c       	add	r0, r0
    179a:	77 0b       	sbc	r23, r23
    179c:	68 0f       	add	r22, r24
    179e:	71 1d       	adc	r23, r1
    17a0:	87 fd       	sbrc	r24, 7
    17a2:	7a 95       	dec	r23
    17a4:	49 e0       	ldi	r20, 0x09	; 9
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <check_range>
    17b0:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <vars+0x8>
			disp_num = vars.const_cnd_frost_t;
    17b4:	f0 90 64 01 	lds	r15, 0x0164	; 0x800164 <vars+0x8>
			tmp = 'H';
			vars.auto_defrost = check_range(0, vars.auto_defrost + temp_enc, 5);
			disp_num = vars.auto_defrost;
			break;
		    case smode_cnd_frost: //температура обмерзания кондиционера
			tmp = 'C';
    17b8:	03 e4       	ldi	r16, 0x43	; 67
			vars.const_cnd_frost_t = check_range(0, vars.const_cnd_frost_t + temp_enc, 9);
			disp_num = vars.const_cnd_frost_t;
			break;
    17ba:	74 c0       	rjmp	.+232    	; 0x18a4 <main+0x4ce>
		    case smode_seg_delay: // пропуск изменений заслонки
			tmp = 'd';
			vars.temp_seg_delay = check_range(0, vars.temp_seg_delay + temp_enc, 5);
    17bc:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <vars+0x7>
    17c0:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <temp_enc>
    17c4:	06 2e       	mov	r0, r22
    17c6:	00 0c       	add	r0, r0
    17c8:	77 0b       	sbc	r23, r23
    17ca:	68 0f       	add	r22, r24
    17cc:	71 1d       	adc	r23, r1
    17ce:	87 fd       	sbrc	r24, 7
    17d0:	7a 95       	dec	r23
    17d2:	45 e0       	ldi	r20, 0x05	; 5
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <check_range>
    17de:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <vars+0x7>
			disp_num = vars.temp_seg_delay;
    17e2:	f0 90 63 01 	lds	r15, 0x0163	; 0x800163 <vars+0x7>
			tmp = 'C';
			vars.const_cnd_frost_t = check_range(0, vars.const_cnd_frost_t + temp_enc, 9);
			disp_num = vars.const_cnd_frost_t;
			break;
		    case smode_seg_delay: // пропуск изменений заслонки
			tmp = 'd';
    17e6:	04 e6       	ldi	r16, 0x64	; 100
			vars.temp_seg_delay = check_range(0, vars.temp_seg_delay + temp_enc, 5);
			disp_num = vars.temp_seg_delay;
			break;
    17e8:	5d c0       	rjmp	.+186    	; 0x18a4 <main+0x4ce>
		    case smode_vent_kfc: //кфц отклонения вентилятора на изменения Т
			tmp = 'u';
			vars.vent_var_kfc = check_range(0, vars.vent_var_kfc + temp_enc, 20);
    17ea:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <vars+0x6>
    17ee:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <temp_enc>
    17f2:	06 2e       	mov	r0, r22
    17f4:	00 0c       	add	r0, r0
    17f6:	77 0b       	sbc	r23, r23
    17f8:	68 0f       	add	r22, r24
    17fa:	71 1d       	adc	r23, r1
    17fc:	87 fd       	sbrc	r24, 7
    17fe:	7a 95       	dec	r23
    1800:	44 e1       	ldi	r20, 0x14	; 20
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <check_range>
    180c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <vars+0x6>
			disp_num = vars.vent_var_kfc;
    1810:	f0 90 62 01 	lds	r15, 0x0162	; 0x800162 <vars+0x6>
			tmp = 'd';
			vars.temp_seg_delay = check_range(0, vars.temp_seg_delay + temp_enc, 5);
			disp_num = vars.temp_seg_delay;
			break;
		    case smode_vent_kfc: //кфц отклонения вентилятора на изменения Т
			tmp = 'u';
    1814:	05 e7       	ldi	r16, 0x75	; 117
			vars.vent_var_kfc = check_range(0, vars.vent_var_kfc + temp_enc, 20);
			disp_num = vars.vent_var_kfc;
			break;
    1816:	46 c0       	rjmp	.+140    	; 0x18a4 <main+0x4ce>
		    case smode_pid_P_kfc: //P кфц
			//tmp = 'P';
			vars.pid_P_kfc = check_range(1, vars.pid_P_kfc + temp_enc, 20);
    1818:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <vars+0x4>
    181c:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <temp_enc>
    1820:	06 2e       	mov	r0, r22
    1822:	00 0c       	add	r0, r0
    1824:	77 0b       	sbc	r23, r23
    1826:	68 0f       	add	r22, r24
    1828:	71 1d       	adc	r23, r1
    182a:	87 fd       	sbrc	r24, 7
    182c:	7a 95       	dec	r23
    182e:	44 e1       	ldi	r20, 0x14	; 20
    1830:	50 e0       	ldi	r21, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <check_range>
    183a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <vars+0x4>
			disp_num = vars.pid_P_kfc;
    183e:	f0 90 60 01 	lds	r15, 0x0160	; 0x800160 <vars+0x4>
    1842:	28 c0       	rjmp	.+80     	; 0x1894 <main+0x4be>
			break;
		    case smode_pid_I_kfc: //I кфц
			//tmp = 'I';
			vars.pid_I_kfc = check_range(1, vars.pid_I_kfc + temp_enc, 30);
    1844:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <vars+0x5>
    1848:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <temp_enc>
    184c:	06 2e       	mov	r0, r22
    184e:	00 0c       	add	r0, r0
    1850:	77 0b       	sbc	r23, r23
    1852:	68 0f       	add	r22, r24
    1854:	71 1d       	adc	r23, r1
    1856:	87 fd       	sbrc	r24, 7
    1858:	7a 95       	dec	r23
    185a:	4e e1       	ldi	r20, 0x1E	; 30
    185c:	50 e0       	ldi	r21, 0x00	; 0
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <check_range>
    1866:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <vars+0x5>
			disp_num = vars.pid_I_kfc;
    186a:	f0 90 61 01 	lds	r15, 0x0161	; 0x800161 <vars+0x5>
    186e:	12 c0       	rjmp	.+36     	; 0x1894 <main+0x4be>
			break;
		    case smode_load_def: // загрузить данные по умолчанию
			tmp = 'L';
			disp_num = '?';
			if (!get_input(IN_FROST_BTN)) { // press setup mode
    1870:	1c 99       	sbic	0x03, 4	; 3
    1872:	15 c0       	rjmp	.+42     	; 0x189e <main+0x4c8>
			    set_def_vals();
    1874:	0e 94 09 02 	call	0x412	; 0x412 <set_def_vals>
			    smode = 1;
    1878:	ee 24       	eor	r14, r14
    187a:	e3 94       	inc	r14
			    disp_num = 0;
			    tmp = 'c';
			    time_cnt = 0;
    187c:	10 e0       	ldi	r17, 0x00	; 0
			disp_num = '?';
			if (!get_input(IN_FROST_BTN)) { // press setup mode
			    set_def_vals();
			    smode = 1;
			    disp_num = 0;
			    tmp = 'c';
    187e:	03 e6       	ldi	r16, 0x63	; 99
			tmp = 'L';
			disp_num = '?';
			if (!get_input(IN_FROST_BTN)) { // press setup mode
			    set_def_vals();
			    smode = 1;
			    disp_num = 0;
    1880:	f1 2c       	mov	r15, r1
    1882:	10 c0       	rjmp	.+32     	; 0x18a4 <main+0x4ce>
			    tmp = 'c';
			    time_cnt = 0;
			}
			break;
		    case smode_disp_T_isp: //просмотр датчиков
			disp_num = getTempIsparit();
    1884:	0e 94 49 03 	call	0x692	; 0x692 <getTempIsparit>
    1888:	02 c0       	rjmp	.+4      	; 0x188e <main+0x4b8>
			break;
		    case smode_disp_T_salon:
			disp_num = getTempSalon();
    188a:	0e 94 46 03 	call	0x68c	; 0x68c <getTempSalon>
    188e:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
    1892:	f6 2e       	mov	r15, r22
		    lf = 1;
		    time_cnt = 0;
		}

		if (lf) {
		    tmp = 0;
    1894:	00 e0       	ldi	r16, 0x00	; 0
    1896:	06 c0       	rjmp	.+12     	; 0x18a4 <main+0x4ce>
		    switch (smode) {
		    case smode_manual: // в ручной режим
			tmp = 'r';
			vars.wmode = check_range(0, vars.wmode + temp_enc, 1);
			if (vars.wmode == wmode_auto) {
			    disp_num = 'A';
    1898:	21 e4       	ldi	r18, 0x41	; 65
    189a:	f2 2e       	mov	r15, r18
    189c:	03 c0       	rjmp	.+6      	; 0x18a4 <main+0x4ce>
			//tmp = 'I';
			vars.pid_I_kfc = check_range(1, vars.pid_I_kfc + temp_enc, 30);
			disp_num = vars.pid_I_kfc;
			break;
		    case smode_load_def: // загрузить данные по умолчанию
			tmp = 'L';
    189e:	0c e4       	ldi	r16, 0x4C	; 76
			disp_num = '?';
    18a0:	9f e3       	ldi	r25, 0x3F	; 63
    18a2:	f9 2e       	mov	r15, r25
			break;
		    case smode_disp_T_salon:
			disp_num = getTempSalon();
			break;
		    }
		    temp_enc = 0;
    18a4:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <temp_enc>
		}

		if (tmp) {
    18a8:	00 23       	and	r16, r16
    18aa:	59 f0       	breq	.+22     	; 0x18c2 <main+0x4ec>
		    Disp_Num_Seg(NUM0_SEG, tmp, 0);
    18ac:	40 e0       	ldi	r20, 0x00	; 0
    18ae:	60 2f       	mov	r22, r16
    18b0:	83 e0       	ldi	r24, 0x03	; 3
    18b2:	0e 94 47 08 	call	0x108e	; 0x108e <Disp_Num_Seg>
		    Disp_Num_Seg(NUM1_SEG, disp_num, 0);
    18b6:	40 e0       	ldi	r20, 0x00	; 0
    18b8:	6f 2d       	mov	r22, r15
    18ba:	84 e0       	ldi	r24, 0x04	; 4
    18bc:	0e 94 47 08 	call	0x108e	; 0x108e <Disp_Num_Seg>
    18c0:	04 c0       	rjmp	.+8      	; 0x18ca <main+0x4f4>
		} else {
		    Disp_Num(disp_num, 0);
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	8f 2d       	mov	r24, r15
    18c6:	0e 94 8d 08 	call	0x111a	; 0x111a <Disp_Num>
		}
		Disp_Bars(smode);
    18ca:	8e 2d       	mov	r24, r14
    18cc:	28 c1       	rjmp	.+592    	; 0x1b1e <main+0x748>

	    } else { // work mode

		if (vars.wmode == wmode_auto) {
    18ce:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <vars>
    18d2:	81 11       	cpse	r24, r1
    18d4:	91 c0       	rjmp	.+290    	; 0x19f8 <main+0x622>
		    switch (time_cnt) {
    18d6:	81 2f       	mov	r24, r17
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	80 31       	cpi	r24, 0x10	; 16
    18dc:	91 05       	cpc	r25, r1
    18de:	08 f0       	brcs	.+2      	; 0x18e2 <main+0x50c>
    18e0:	4b c0       	rjmp	.+150    	; 0x1978 <main+0x5a2>
    18e2:	fc 01       	movw	r30, r24
    18e4:	e2 5c       	subi	r30, 0xC2	; 194
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__tablejump2__>
		    case 0:
			setup_display();
    18ec:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <setup_display>
			time_cnt++;
    18f0:	11 e0       	ldi	r17, 0x01	; 1
			break;
    18f2:	48 c0       	rjmp	.+144    	; 0x1984 <main+0x5ae>
		    case 1 ... 6:
			break;
		    case 7:
			Ti = getTempIsparit();
    18f4:	0e 94 49 03 	call	0x692	; 0x692 <getTempIsparit>
    18f8:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <Ti>
    18fc:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <Ti+0x1>
    1900:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <Ti+0x2>
    1904:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <Ti+0x3>
			time_cnt = 8;
    1908:	18 e0       	ldi	r17, 0x08	; 8
			break;
    190a:	3c c0       	rjmp	.+120    	; 0x1984 <main+0x5ae>
		    case 8:
			break;
		    case 9:
			Ts = getTempSalon();
    190c:	0e 94 46 03 	call	0x68c	; 0x68c <getTempSalon>
    1910:	60 93 45 01 	sts	0x0145, r22	; 0x800145 <Ts>
    1914:	70 93 46 01 	sts	0x0146, r23	; 0x800146 <Ts+0x1>
    1918:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <Ts+0x2>
    191c:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <Ts+0x3>
			float t = Ts + 0.4;
    1920:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <Ts>
    1924:	70 91 46 01 	lds	r23, 0x0146	; 0x800146 <Ts+0x1>
    1928:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <Ts+0x2>
    192c:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <Ts+0x3>
			disp_num = t;
    1930:	2d ec       	ldi	r18, 0xCD	; 205
    1932:	3c ec       	ldi	r19, 0xCC	; 204
    1934:	4c ec       	ldi	r20, 0xCC	; 204
    1936:	5e e3       	ldi	r21, 0x3E	; 62
    1938:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__addsf3>
    193c:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixsfsi>
    1940:	f6 2e       	mov	r15, r22
			time_cnt++;
    1942:	1a e0       	ldi	r17, 0x0A	; 10
			break;
    1944:	1f c0       	rjmp	.+62     	; 0x1984 <main+0x5ae>
		    case 10:
			break;
		    case 11: //calc
			calcVal();
    1946:	0e 94 a8 05 	call	0xb50	; 0xb50 <calcVal>
			time_cnt++;
    194a:	1c e0       	ldi	r17, 0x0C	; 12
			break;
    194c:	1b c0       	rjmp	.+54     	; 0x1984 <main+0x5ae>
		    case 12:
			break;
		    case 13:
			set_temp(temp_out_prc, 1);
    194e:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <temp_out_prc>
    1952:	61 e0       	ldi	r22, 0x01	; 1
    1954:	0e 94 e5 03 	call	0x7ca	; 0x7ca <set_temp>
			time_cnt++;
    1958:	1e e0       	ldi	r17, 0x0E	; 14
			break;
    195a:	14 c0       	rjmp	.+40     	; 0x1984 <main+0x5ae>
		    case 14:
			break;
		    case 15:
			set_vent_prc(vent_add_prc, 1);
    195c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <vent_add_prc>
    1960:	61 e0       	ldi	r22, 0x01	; 1
    1962:	0e 94 db 03 	call	0x7b6	; 0x7b6 <set_vent_prc>
			disp_bar = vent_seg_cur;
    1966:	b0 90 69 01 	lds	r11, 0x0169	; 0x800169 <vent_seg_cur>
			SET_FLAG(f_num_dot)
    196a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
    196e:	88 60       	ori	r24, 0x08	; 8
    1970:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <flags>
			time_cnt++;
    1974:	10 e1       	ldi	r17, 0x10	; 16
			break;
    1976:	06 c0       	rjmp	.+12     	; 0x1984 <main+0x5ae>
		    default: //  цикл
			time_cnt = 0;
			CLR_FLAG(f_num_dot)
    1978:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
    197c:	87 7f       	andi	r24, 0xF7	; 247
    197e:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <flags>
			disp_bar = vent_seg_cur;
			SET_FLAG(f_num_dot)
			time_cnt++;
			break;
		    default: //  цикл
			time_cnt = 0;
    1982:	10 e0       	ldi	r17, 0x00	; 0
			CLR_FLAG(f_num_dot)
		    }

		    if (vent_enc) {
    1984:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <vent_enc>
    1988:	88 23       	and	r24, r24
    198a:	c1 f0       	breq	.+48     	; 0x19bc <main+0x5e6>
			vars.vent_nom_seg = check_range(0, vars.vent_nom_seg + vent_enc, VENT_SEGs + 2);
    198c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <vars+0x2>
    1990:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <vent_enc>
    1994:	06 2e       	mov	r0, r22
    1996:	00 0c       	add	r0, r0
    1998:	77 0b       	sbc	r23, r23
    199a:	68 0f       	add	r22, r24
    199c:	71 1d       	adc	r23, r1
    199e:	87 fd       	sbrc	r24, 7
    19a0:	7a 95       	dec	r23
    19a2:	4a e0       	ldi	r20, 0x0A	; 10
    19a4:	50 e0       	ldi	r21, 0x00	; 0
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <check_range>
    19ae:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <vars+0x2>
			disp_bar = vars.vent_nom_seg;
    19b2:	b0 90 5e 01 	lds	r11, 0x015E	; 0x80015e <vars+0x2>
			time_cnt = 10;
			vent_enc = 0;
    19b6:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <vent_enc>
		    }

		    if (vent_enc) {
			vars.vent_nom_seg = check_range(0, vars.vent_nom_seg + vent_enc, VENT_SEGs + 2);
			disp_bar = vars.vent_nom_seg;
			time_cnt = 10;
    19ba:	1a e0       	ldi	r17, 0x0A	; 10
			vent_enc = 0;
		    }

		    if (temp_enc) {
    19bc:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <temp_enc>
    19c0:	88 23       	and	r24, r24
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <main+0x5f0>
    19c4:	69 c0       	rjmp	.+210    	; 0x1a98 <main+0x6c2>
			vars.setup_temp = check_range(15, vars.setup_temp + temp_enc, 30);
    19c6:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <vars+0x1>
    19ca:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <temp_enc>
    19ce:	06 2e       	mov	r0, r22
    19d0:	00 0c       	add	r0, r0
    19d2:	77 0b       	sbc	r23, r23
    19d4:	68 0f       	add	r22, r24
    19d6:	71 1d       	adc	r23, r1
    19d8:	87 fd       	sbrc	r24, 7
    19da:	7a 95       	dec	r23
    19dc:	4e e1       	ldi	r20, 0x1E	; 30
    19de:	50 e0       	ldi	r21, 0x00	; 0
    19e0:	8f e0       	ldi	r24, 0x0F	; 15
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <check_range>
    19e8:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <vars+0x1>
			disp_num = vars.setup_temp;
    19ec:	f0 90 5d 01 	lds	r15, 0x015D	; 0x80015d <vars+0x1>
			time_cnt = 0;
			temp_enc = 0;
    19f0:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <temp_enc>
		    }

		    if (temp_enc) {
			vars.setup_temp = check_range(15, vars.setup_temp + temp_enc, 30);
			disp_num = vars.setup_temp;
			time_cnt = 0;
    19f4:	10 e0       	ldi	r17, 0x00	; 0
    19f6:	50 c0       	rjmp	.+160    	; 0x1a98 <main+0x6c2>
			temp_enc = 0;
		    }

		} else { // manual

		    if (time_cnt > 10) {
    19f8:	1b 30       	cpi	r17, 0x0B	; 11
    19fa:	18 f0       	brcs	.+6      	; 0x1a02 <main+0x62c>
			setup_display();
    19fc:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <setup_display>
			time_cnt = 0;
    1a00:	10 e0       	ldi	r17, 0x00	; 0
		    }

		    if (vent_enc) {
    1a02:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <vent_enc>
    1a06:	88 23       	and	r24, r24
    1a08:	a9 f0       	breq	.+42     	; 0x1a34 <main+0x65e>
			vars.vent_nom_seg = check_range(0, vars.vent_nom_seg + vent_enc, VENT_SEGs);
    1a0a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <vars+0x2>
    1a0e:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <vent_enc>
    1a12:	06 2e       	mov	r0, r22
    1a14:	00 0c       	add	r0, r0
    1a16:	77 0b       	sbc	r23, r23
    1a18:	68 0f       	add	r22, r24
    1a1a:	71 1d       	adc	r23, r1
    1a1c:	87 fd       	sbrc	r24, 7
    1a1e:	7a 95       	dec	r23
    1a20:	48 e0       	ldi	r20, 0x08	; 8
    1a22:	50 e0       	ldi	r21, 0x00	; 0
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <check_range>
    1a2c:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <vars+0x2>
			vent_enc = 0;
    1a30:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <vent_enc>
		    }

		    if (temp_enc) {
    1a34:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <temp_enc>
    1a38:	88 23       	and	r24, r24
    1a3a:	a9 f0       	breq	.+42     	; 0x1a66 <main+0x690>
			vars.temp_seg = check_range(0, vars.temp_seg + temp_enc, TEMP_SEGs);
    1a3c:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <vars+0x3>
    1a40:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <temp_enc>
    1a44:	06 2e       	mov	r0, r22
    1a46:	00 0c       	add	r0, r0
    1a48:	77 0b       	sbc	r23, r23
    1a4a:	68 0f       	add	r22, r24
    1a4c:	71 1d       	adc	r23, r1
    1a4e:	87 fd       	sbrc	r24, 7
    1a50:	7a 95       	dec	r23
    1a52:	4f e0       	ldi	r20, 0x0F	; 15
    1a54:	50 e0       	ldi	r21, 0x00	; 0
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <check_range>
    1a5e:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <vars+0x3>
			temp_enc = 0;
    1a62:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <temp_enc>
		    }
		    disp_bar = vars.vent_nom_seg;
    1a66:	b0 90 5e 01 	lds	r11, 0x015E	; 0x80015e <vars+0x2>
		    disp_num = seg2Prc(TEMP_SEGs, vars.temp_seg);
    1a6a:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <vars+0x3>
    1a6e:	24 e6       	ldi	r18, 0x64	; 100
    1a70:	82 9f       	mul	r24, r18
    1a72:	c0 01       	movw	r24, r0
    1a74:	11 24       	eor	r1, r1
    1a76:	b6 01       	movw	r22, r12
    1a78:	0e 94 b6 10 	call	0x216c	; 0x216c <__divmodhi4>
    1a7c:	96 2e       	mov	r9, r22
    1a7e:	f6 2e       	mov	r15, r22
		    set_vent_seg(vars.vent_nom_seg, 0);
    1a80:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <vars+0x2>
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	0e 94 70 03 	call	0x6e0	; 0x6e0 <set_vent_seg>
		    set_temp(disp_num, 0);
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	89 2d       	mov	r24, r9
    1a8e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <set_temp>
		    switch_cond(1);
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	0e 94 8e 02 	call	0x51c	; 0x51c <switch_cond>
		}
// логика
// кнопки
		if (!get_input(IN_BTN_HI_MODE)) { // to hi hot mode
    1a98:	34 99       	sbic	0x06, 4	; 6
    1a9a:	09 c0       	rjmp	.+18     	; 0x1aae <main+0x6d8>
		    if (delay_btn_check(&bdelay)) {
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	0e 94 3a 09 	call	0x1274	; 0x1274 <delay_btn_check>
    1aa4:	88 23       	and	r24, r24
    1aa6:	99 f1       	breq	.+102    	; 0x1b0e <main+0x738>
			smode = smode_hi_mode;
    1aa8:	84 e6       	ldi	r24, 0x64	; 100
    1aaa:	e8 2e       	mov	r14, r24
    1aac:	30 c0       	rjmp	.+96     	; 0x1b0e <main+0x738>
		    }
		    time_cnt = 0;
		} else if (!get_input(IN_FROST_BTN)) { // to setup mode
    1aae:	1c 99       	sbic	0x03, 4	; 3
    1ab0:	1a c0       	rjmp	.+52     	; 0x1ae6 <main+0x710>
		    SET_FLAG(f_cond_btn_press);
    1ab2:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
    1ab6:	80 61       	ori	r24, 0x10	; 16
    1ab8:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <flags>
		    if (delay_btn_check(&bdelay)) {
    1abc:	ce 01       	movw	r24, r28
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	0e 94 3a 09 	call	0x1274	; 0x1274 <delay_btn_check>
    1ac4:	88 23       	and	r24, r24
    1ac6:	19 f1       	breq	.+70     	; 0x1b0e <main+0x738>
			smode = 1;
			disp_num = 0;
			tmp = 'c';
			CLR_FLAG(f_cond_btn_press);
    1ac8:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
    1acc:	8f 7e       	andi	r24, 0xEF	; 239
    1ace:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <flags>
			vent_enc = 0;
    1ad2:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <vent_enc>
			temp_enc = 0;
    1ad6:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <temp_enc>
		    }
		    time_cnt = 0;
		} else if (!get_input(IN_FROST_BTN)) { // to setup mode
		    SET_FLAG(f_cond_btn_press);
		    if (delay_btn_check(&bdelay)) {
			smode = 1;
    1ada:	ee 24       	eor	r14, r14
    1adc:	e3 94       	inc	r14
			tmp = 'c';
			CLR_FLAG(f_cond_btn_press);
			vent_enc = 0;
			temp_enc = 0;
		    }
		    time_cnt = 0;
    1ade:	10 e0       	ldi	r17, 0x00	; 0
		} else if (!get_input(IN_FROST_BTN)) { // to setup mode
		    SET_FLAG(f_cond_btn_press);
		    if (delay_btn_check(&bdelay)) {
			smode = 1;
			disp_num = 0;
			tmp = 'c';
    1ae0:	03 e6       	ldi	r16, 0x63	; 99
		    time_cnt = 0;
		} else if (!get_input(IN_FROST_BTN)) { // to setup mode
		    SET_FLAG(f_cond_btn_press);
		    if (delay_btn_check(&bdelay)) {
			smode = 1;
			disp_num = 0;
    1ae2:	f1 2c       	mov	r15, r1
    1ae4:	15 c0       	rjmp	.+42     	; 0x1b10 <main+0x73a>
			vent_enc = 0;
			temp_enc = 0;
		    }
		    time_cnt = 0;
		} else {
		    if (TST_FLAG(f_cond_btn_press)) {
    1ae6:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
    1aea:	84 ff       	sbrs	r24, 4
    1aec:	0e c0       	rjmp	.+28     	; 0x1b0a <main+0x734>
			if (vars.cond_enabled) {
    1aee:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <vars+0x9>
    1af2:	88 23       	and	r24, r24
    1af4:	19 f0       	breq	.+6      	; 0x1afc <main+0x726>
			    vars.cond_enabled = 0;
    1af6:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <vars+0x9>
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <main+0x72a>
			} else {
			    vars.cond_enabled = 1;
    1afc:	a0 92 65 01 	sts	0x0165, r10	; 0x800165 <vars+0x9>
			}
			CLR_FLAG(f_cond_btn_press);
    1b00:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
    1b04:	8f 7e       	andi	r24, 0xEF	; 239
    1b06:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <flags>
		    }
		    bdelay = 0;
    1b0a:	19 82       	std	Y+1, r1	; 0x01
    1b0c:	01 c0       	rjmp	.+2      	; 0x1b10 <main+0x73a>
			tmp = 'c';
			CLR_FLAG(f_cond_btn_press);
			vent_enc = 0;
			temp_enc = 0;
		    }
		    time_cnt = 0;
    1b0e:	10 e0       	ldi	r17, 0x00	; 0
		    }
		    bdelay = 0;
		}

//дисплей
		Disp_Num(disp_num, TST_FLAG(f_num_dot));
    1b10:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <flags>
    1b14:	68 70       	andi	r22, 0x08	; 8
    1b16:	8f 2d       	mov	r24, r15
    1b18:	0e 94 8d 08 	call	0x111a	; 0x111a <Disp_Num>
		Disp_Bars(disp_bar);
    1b1c:	8b 2d       	mov	r24, r11
    1b1e:	0e 94 2a 08 	call	0x1054	; 0x1054 <Disp_Bars>
	    }

	    if (TST_FLAG(f_e1sec)) {
    1b22:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
    1b26:	80 ff       	sbrs	r24, 0
    1b28:	34 c0       	rjmp	.+104    	; 0x1b92 <main+0x7bc>
		time_cnt++;
    1b2a:	1f 5f       	subi	r17, 0xFF	; 255
		if (bdelay) {
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	88 23       	and	r24, r24
    1b30:	11 f0       	breq	.+4      	; 0x1b36 <main+0x760>
		    bdelay++;
    1b32:	8f 5f       	subi	r24, 0xFF	; 255
    1b34:	89 83       	std	Y+1, r24	; 0x01
		}
		CLR_FLAG(f_e1sec);
    1b36:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
    1b3a:	8e 7f       	andi	r24, 0xFE	; 254
    1b3c:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <flags>

		if (TST_FLAG(f_cond_ind_flash)) {
    1b40:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <flags>
    1b44:	85 ff       	sbrs	r24, 5
    1b46:	25 c0       	rjmp	.+74     	; 0x1b92 <main+0x7bc>
		    pin_low(OUT_FROST_IND);
    1b48:	41 98       	cbi	0x08, 1	; 8
    1b4a:	23 c0       	rjmp	.+70     	; 0x1b92 <main+0x7bc>
		}
	    }

	} else { //poweroff prepare
	    time_cnt = 0;
	    wdt_reset();
    1b4c:	a8 95       	wdr
	    myupdate_eeprom();
    1b4e:	0e 94 2f 02 	call	0x45e	; 0x45e <myupdate_eeprom>
    1b52:	1a e0       	ldi	r17, 0x0A	; 10
	    for (uint8_t i = 0; i < VENT_SEGs + 2; i++) {
		switch_vent(0);
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	0e 94 69 02 	call	0x4d2	; 0x4d2 <switch_vent>
    1b5a:	11 50       	subi	r17, 0x01	; 1

	} else { //poweroff prepare
	    time_cnt = 0;
	    wdt_reset();
	    myupdate_eeprom();
	    for (uint8_t i = 0; i < VENT_SEGs + 2; i++) {
    1b5c:	d9 f7       	brne	.-10     	; 0x1b54 <main+0x77e>
    1b5e:	1f e0       	ldi	r17, 0x0F	; 15
		switch_vent(0);
	    }
	    for (uint8_t i = 0; i < TEMP_SEGs; i++) {
		switch_temp(0);
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	0e 94 44 02 	call	0x488	; 0x488 <switch_temp>
    1b66:	11 50       	subi	r17, 0x01	; 1
	    wdt_reset();
	    myupdate_eeprom();
	    for (uint8_t i = 0; i < VENT_SEGs + 2; i++) {
		switch_vent(0);
	    }
	    for (uint8_t i = 0; i < TEMP_SEGs; i++) {
    1b68:	d9 f7       	brne	.-10     	; 0x1b60 <main+0x78a>
		switch_temp(0);
	    }
	    display_off();
    1b6a:	0e 94 02 08 	call	0x1004	; 0x1004 <display_off>
	    delay_ms(10);
    1b6e:	8a e0       	ldi	r24, 0x0A	; 10
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	0e 94 dd 08 	call	0x11ba	; 0x11ba <delay_ms>
    1b76:	98 e0       	ldi	r25, 0x08	; 8
    1b78:	88 e1       	ldi	r24, 0x18	; 24
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	a8 95       	wdr
    1b80:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>

	    wdt_enable(WDTO_15MS); // reboot
	    while (1) {
		delay_s(1);
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <delay_s>
    1b90:	fc cf       	rjmp	.-8      	; 0x1b8a <main+0x7b4>
	    }
	}

	delay_ms(100);
    1b92:	84 e6       	ldi	r24, 0x64	; 100
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	0e 94 dd 08 	call	0x11ba	; 0x11ba <delay_ms>

	if (vars.cond_enabled) {
    1b9a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <vars+0x9>
    1b9e:	88 23       	and	r24, r24
    1ba0:	11 f0       	breq	.+4      	; 0x1ba6 <main+0x7d0>
	    pin_high(OUT_FROST_IND);
    1ba2:	41 9a       	sbi	0x08, 1	; 8
    1ba4:	04 c0       	rjmp	.+8      	; 0x1bae <main+0x7d8>
	} else {
	    pin_low(OUT_FROST_IND);
    1ba6:	41 98       	cbi	0x08, 1	; 8
	    switch_cond(0);
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	0e 94 8e 02 	call	0x51c	; 0x51c <switch_cond>
	}

	wdt_reset();
    1bae:	a8 95       	wdr
    1bb0:	0a cd       	rjmp	.-1516   	; 0x15c6 <main+0x1f0>

00001bb2 <__subsf3>:
    1bb2:	50 58       	subi	r21, 0x80	; 128

00001bb4 <__addsf3>:
    1bb4:	bb 27       	eor	r27, r27
    1bb6:	aa 27       	eor	r26, r26
    1bb8:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__addsf3x>
    1bbc:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__fp_round>
    1bc0:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__fp_pscA>
    1bc4:	38 f0       	brcs	.+14     	; 0x1bd4 <__addsf3+0x20>
    1bc6:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__fp_pscB>
    1bca:	20 f0       	brcs	.+8      	; 0x1bd4 <__addsf3+0x20>
    1bcc:	39 f4       	brne	.+14     	; 0x1bdc <__addsf3+0x28>
    1bce:	9f 3f       	cpi	r25, 0xFF	; 255
    1bd0:	19 f4       	brne	.+6      	; 0x1bd8 <__addsf3+0x24>
    1bd2:	26 f4       	brtc	.+8      	; 0x1bdc <__addsf3+0x28>
    1bd4:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__fp_nan>
    1bd8:	0e f4       	brtc	.+2      	; 0x1bdc <__addsf3+0x28>
    1bda:	e0 95       	com	r30
    1bdc:	e7 fb       	bst	r30, 7
    1bde:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__fp_inf>

00001be2 <__addsf3x>:
    1be2:	e9 2f       	mov	r30, r25
    1be4:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__fp_split3>
    1be8:	58 f3       	brcs	.-42     	; 0x1bc0 <__addsf3+0xc>
    1bea:	ba 17       	cp	r27, r26
    1bec:	62 07       	cpc	r22, r18
    1bee:	73 07       	cpc	r23, r19
    1bf0:	84 07       	cpc	r24, r20
    1bf2:	95 07       	cpc	r25, r21
    1bf4:	20 f0       	brcs	.+8      	; 0x1bfe <__addsf3x+0x1c>
    1bf6:	79 f4       	brne	.+30     	; 0x1c16 <__addsf3x+0x34>
    1bf8:	a6 f5       	brtc	.+104    	; 0x1c62 <__addsf3x+0x80>
    1bfa:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <__fp_zero>
    1bfe:	0e f4       	brtc	.+2      	; 0x1c02 <__addsf3x+0x20>
    1c00:	e0 95       	com	r30
    1c02:	0b 2e       	mov	r0, r27
    1c04:	ba 2f       	mov	r27, r26
    1c06:	a0 2d       	mov	r26, r0
    1c08:	0b 01       	movw	r0, r22
    1c0a:	b9 01       	movw	r22, r18
    1c0c:	90 01       	movw	r18, r0
    1c0e:	0c 01       	movw	r0, r24
    1c10:	ca 01       	movw	r24, r20
    1c12:	a0 01       	movw	r20, r0
    1c14:	11 24       	eor	r1, r1
    1c16:	ff 27       	eor	r31, r31
    1c18:	59 1b       	sub	r21, r25
    1c1a:	99 f0       	breq	.+38     	; 0x1c42 <__addsf3x+0x60>
    1c1c:	59 3f       	cpi	r21, 0xF9	; 249
    1c1e:	50 f4       	brcc	.+20     	; 0x1c34 <__addsf3x+0x52>
    1c20:	50 3e       	cpi	r21, 0xE0	; 224
    1c22:	68 f1       	brcs	.+90     	; 0x1c7e <__addsf3x+0x9c>
    1c24:	1a 16       	cp	r1, r26
    1c26:	f0 40       	sbci	r31, 0x00	; 0
    1c28:	a2 2f       	mov	r26, r18
    1c2a:	23 2f       	mov	r18, r19
    1c2c:	34 2f       	mov	r19, r20
    1c2e:	44 27       	eor	r20, r20
    1c30:	58 5f       	subi	r21, 0xF8	; 248
    1c32:	f3 cf       	rjmp	.-26     	; 0x1c1a <__addsf3x+0x38>
    1c34:	46 95       	lsr	r20
    1c36:	37 95       	ror	r19
    1c38:	27 95       	ror	r18
    1c3a:	a7 95       	ror	r26
    1c3c:	f0 40       	sbci	r31, 0x00	; 0
    1c3e:	53 95       	inc	r21
    1c40:	c9 f7       	brne	.-14     	; 0x1c34 <__addsf3x+0x52>
    1c42:	7e f4       	brtc	.+30     	; 0x1c62 <__addsf3x+0x80>
    1c44:	1f 16       	cp	r1, r31
    1c46:	ba 0b       	sbc	r27, r26
    1c48:	62 0b       	sbc	r22, r18
    1c4a:	73 0b       	sbc	r23, r19
    1c4c:	84 0b       	sbc	r24, r20
    1c4e:	ba f0       	brmi	.+46     	; 0x1c7e <__addsf3x+0x9c>
    1c50:	91 50       	subi	r25, 0x01	; 1
    1c52:	a1 f0       	breq	.+40     	; 0x1c7c <__addsf3x+0x9a>
    1c54:	ff 0f       	add	r31, r31
    1c56:	bb 1f       	adc	r27, r27
    1c58:	66 1f       	adc	r22, r22
    1c5a:	77 1f       	adc	r23, r23
    1c5c:	88 1f       	adc	r24, r24
    1c5e:	c2 f7       	brpl	.-16     	; 0x1c50 <__addsf3x+0x6e>
    1c60:	0e c0       	rjmp	.+28     	; 0x1c7e <__addsf3x+0x9c>
    1c62:	ba 0f       	add	r27, r26
    1c64:	62 1f       	adc	r22, r18
    1c66:	73 1f       	adc	r23, r19
    1c68:	84 1f       	adc	r24, r20
    1c6a:	48 f4       	brcc	.+18     	; 0x1c7e <__addsf3x+0x9c>
    1c6c:	87 95       	ror	r24
    1c6e:	77 95       	ror	r23
    1c70:	67 95       	ror	r22
    1c72:	b7 95       	ror	r27
    1c74:	f7 95       	ror	r31
    1c76:	9e 3f       	cpi	r25, 0xFE	; 254
    1c78:	08 f0       	brcs	.+2      	; 0x1c7c <__addsf3x+0x9a>
    1c7a:	b0 cf       	rjmp	.-160    	; 0x1bdc <__addsf3+0x28>
    1c7c:	93 95       	inc	r25
    1c7e:	88 0f       	add	r24, r24
    1c80:	08 f0       	brcs	.+2      	; 0x1c84 <__addsf3x+0xa2>
    1c82:	99 27       	eor	r25, r25
    1c84:	ee 0f       	add	r30, r30
    1c86:	97 95       	ror	r25
    1c88:	87 95       	ror	r24
    1c8a:	08 95       	ret

00001c8c <__cmpsf2>:
    1c8c:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__fp_cmp>
    1c90:	08 f4       	brcc	.+2      	; 0x1c94 <__cmpsf2+0x8>
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	08 95       	ret

00001c96 <__divsf3>:
    1c96:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__divsf3x>
    1c9a:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__fp_round>
    1c9e:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__fp_pscB>
    1ca2:	58 f0       	brcs	.+22     	; 0x1cba <__divsf3+0x24>
    1ca4:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__fp_pscA>
    1ca8:	40 f0       	brcs	.+16     	; 0x1cba <__divsf3+0x24>
    1caa:	29 f4       	brne	.+10     	; 0x1cb6 <__divsf3+0x20>
    1cac:	5f 3f       	cpi	r21, 0xFF	; 255
    1cae:	29 f0       	breq	.+10     	; 0x1cba <__divsf3+0x24>
    1cb0:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__fp_inf>
    1cb4:	51 11       	cpse	r21, r1
    1cb6:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__fp_szero>
    1cba:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__fp_nan>

00001cbe <__divsf3x>:
    1cbe:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__fp_split3>
    1cc2:	68 f3       	brcs	.-38     	; 0x1c9e <__divsf3+0x8>

00001cc4 <__divsf3_pse>:
    1cc4:	99 23       	and	r25, r25
    1cc6:	b1 f3       	breq	.-20     	; 0x1cb4 <__divsf3+0x1e>
    1cc8:	55 23       	and	r21, r21
    1cca:	91 f3       	breq	.-28     	; 0x1cb0 <__divsf3+0x1a>
    1ccc:	95 1b       	sub	r25, r21
    1cce:	55 0b       	sbc	r21, r21
    1cd0:	bb 27       	eor	r27, r27
    1cd2:	aa 27       	eor	r26, r26
    1cd4:	62 17       	cp	r22, r18
    1cd6:	73 07       	cpc	r23, r19
    1cd8:	84 07       	cpc	r24, r20
    1cda:	38 f0       	brcs	.+14     	; 0x1cea <__divsf3_pse+0x26>
    1cdc:	9f 5f       	subi	r25, 0xFF	; 255
    1cde:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce0:	22 0f       	add	r18, r18
    1ce2:	33 1f       	adc	r19, r19
    1ce4:	44 1f       	adc	r20, r20
    1ce6:	aa 1f       	adc	r26, r26
    1ce8:	a9 f3       	breq	.-22     	; 0x1cd4 <__divsf3_pse+0x10>
    1cea:	35 d0       	rcall	.+106    	; 0x1d56 <__divsf3_pse+0x92>
    1cec:	0e 2e       	mov	r0, r30
    1cee:	3a f0       	brmi	.+14     	; 0x1cfe <__divsf3_pse+0x3a>
    1cf0:	e0 e8       	ldi	r30, 0x80	; 128
    1cf2:	32 d0       	rcall	.+100    	; 0x1d58 <__divsf3_pse+0x94>
    1cf4:	91 50       	subi	r25, 0x01	; 1
    1cf6:	50 40       	sbci	r21, 0x00	; 0
    1cf8:	e6 95       	lsr	r30
    1cfa:	00 1c       	adc	r0, r0
    1cfc:	ca f7       	brpl	.-14     	; 0x1cf0 <__divsf3_pse+0x2c>
    1cfe:	2b d0       	rcall	.+86     	; 0x1d56 <__divsf3_pse+0x92>
    1d00:	fe 2f       	mov	r31, r30
    1d02:	29 d0       	rcall	.+82     	; 0x1d56 <__divsf3_pse+0x92>
    1d04:	66 0f       	add	r22, r22
    1d06:	77 1f       	adc	r23, r23
    1d08:	88 1f       	adc	r24, r24
    1d0a:	bb 1f       	adc	r27, r27
    1d0c:	26 17       	cp	r18, r22
    1d0e:	37 07       	cpc	r19, r23
    1d10:	48 07       	cpc	r20, r24
    1d12:	ab 07       	cpc	r26, r27
    1d14:	b0 e8       	ldi	r27, 0x80	; 128
    1d16:	09 f0       	breq	.+2      	; 0x1d1a <__divsf3_pse+0x56>
    1d18:	bb 0b       	sbc	r27, r27
    1d1a:	80 2d       	mov	r24, r0
    1d1c:	bf 01       	movw	r22, r30
    1d1e:	ff 27       	eor	r31, r31
    1d20:	93 58       	subi	r25, 0x83	; 131
    1d22:	5f 4f       	sbci	r21, 0xFF	; 255
    1d24:	3a f0       	brmi	.+14     	; 0x1d34 <__divsf3_pse+0x70>
    1d26:	9e 3f       	cpi	r25, 0xFE	; 254
    1d28:	51 05       	cpc	r21, r1
    1d2a:	78 f0       	brcs	.+30     	; 0x1d4a <__divsf3_pse+0x86>
    1d2c:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__fp_inf>
    1d30:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__fp_szero>
    1d34:	5f 3f       	cpi	r21, 0xFF	; 255
    1d36:	e4 f3       	brlt	.-8      	; 0x1d30 <__divsf3_pse+0x6c>
    1d38:	98 3e       	cpi	r25, 0xE8	; 232
    1d3a:	d4 f3       	brlt	.-12     	; 0x1d30 <__divsf3_pse+0x6c>
    1d3c:	86 95       	lsr	r24
    1d3e:	77 95       	ror	r23
    1d40:	67 95       	ror	r22
    1d42:	b7 95       	ror	r27
    1d44:	f7 95       	ror	r31
    1d46:	9f 5f       	subi	r25, 0xFF	; 255
    1d48:	c9 f7       	brne	.-14     	; 0x1d3c <__divsf3_pse+0x78>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	91 1d       	adc	r25, r1
    1d4e:	96 95       	lsr	r25
    1d50:	87 95       	ror	r24
    1d52:	97 f9       	bld	r25, 7
    1d54:	08 95       	ret
    1d56:	e1 e0       	ldi	r30, 0x01	; 1
    1d58:	66 0f       	add	r22, r22
    1d5a:	77 1f       	adc	r23, r23
    1d5c:	88 1f       	adc	r24, r24
    1d5e:	bb 1f       	adc	r27, r27
    1d60:	62 17       	cp	r22, r18
    1d62:	73 07       	cpc	r23, r19
    1d64:	84 07       	cpc	r24, r20
    1d66:	ba 07       	cpc	r27, r26
    1d68:	20 f0       	brcs	.+8      	; 0x1d72 <__divsf3_pse+0xae>
    1d6a:	62 1b       	sub	r22, r18
    1d6c:	73 0b       	sbc	r23, r19
    1d6e:	84 0b       	sbc	r24, r20
    1d70:	ba 0b       	sbc	r27, r26
    1d72:	ee 1f       	adc	r30, r30
    1d74:	88 f7       	brcc	.-30     	; 0x1d58 <__divsf3_pse+0x94>
    1d76:	e0 95       	com	r30
    1d78:	08 95       	ret

00001d7a <__fixsfsi>:
    1d7a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <__fixunssfsi>
    1d7e:	68 94       	set
    1d80:	b1 11       	cpse	r27, r1
    1d82:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__fp_szero>
    1d86:	08 95       	ret

00001d88 <__fixunssfsi>:
    1d88:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__fp_splitA>
    1d8c:	88 f0       	brcs	.+34     	; 0x1db0 <__fixunssfsi+0x28>
    1d8e:	9f 57       	subi	r25, 0x7F	; 127
    1d90:	98 f0       	brcs	.+38     	; 0x1db8 <__fixunssfsi+0x30>
    1d92:	b9 2f       	mov	r27, r25
    1d94:	99 27       	eor	r25, r25
    1d96:	b7 51       	subi	r27, 0x17	; 23
    1d98:	b0 f0       	brcs	.+44     	; 0x1dc6 <__fixunssfsi+0x3e>
    1d9a:	e1 f0       	breq	.+56     	; 0x1dd4 <__fixunssfsi+0x4c>
    1d9c:	66 0f       	add	r22, r22
    1d9e:	77 1f       	adc	r23, r23
    1da0:	88 1f       	adc	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	1a f0       	brmi	.+6      	; 0x1dac <__fixunssfsi+0x24>
    1da6:	ba 95       	dec	r27
    1da8:	c9 f7       	brne	.-14     	; 0x1d9c <__fixunssfsi+0x14>
    1daa:	14 c0       	rjmp	.+40     	; 0x1dd4 <__fixunssfsi+0x4c>
    1dac:	b1 30       	cpi	r27, 0x01	; 1
    1dae:	91 f0       	breq	.+36     	; 0x1dd4 <__fixunssfsi+0x4c>
    1db0:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__fp_zero>
    1db4:	b1 e0       	ldi	r27, 0x01	; 1
    1db6:	08 95       	ret
    1db8:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <__fp_zero>
    1dbc:	67 2f       	mov	r22, r23
    1dbe:	78 2f       	mov	r23, r24
    1dc0:	88 27       	eor	r24, r24
    1dc2:	b8 5f       	subi	r27, 0xF8	; 248
    1dc4:	39 f0       	breq	.+14     	; 0x1dd4 <__fixunssfsi+0x4c>
    1dc6:	b9 3f       	cpi	r27, 0xF9	; 249
    1dc8:	cc f3       	brlt	.-14     	; 0x1dbc <__fixunssfsi+0x34>
    1dca:	86 95       	lsr	r24
    1dcc:	77 95       	ror	r23
    1dce:	67 95       	ror	r22
    1dd0:	b3 95       	inc	r27
    1dd2:	d9 f7       	brne	.-10     	; 0x1dca <__fixunssfsi+0x42>
    1dd4:	3e f4       	brtc	.+14     	; 0x1de4 <__fixunssfsi+0x5c>
    1dd6:	90 95       	com	r25
    1dd8:	80 95       	com	r24
    1dda:	70 95       	com	r23
    1ddc:	61 95       	neg	r22
    1dde:	7f 4f       	sbci	r23, 0xFF	; 255
    1de0:	8f 4f       	sbci	r24, 0xFF	; 255
    1de2:	9f 4f       	sbci	r25, 0xFF	; 255
    1de4:	08 95       	ret

00001de6 <__floatunsisf>:
    1de6:	e8 94       	clt
    1de8:	09 c0       	rjmp	.+18     	; 0x1dfc <__floatsisf+0x12>

00001dea <__floatsisf>:
    1dea:	97 fb       	bst	r25, 7
    1dec:	3e f4       	brtc	.+14     	; 0x1dfc <__floatsisf+0x12>
    1dee:	90 95       	com	r25
    1df0:	80 95       	com	r24
    1df2:	70 95       	com	r23
    1df4:	61 95       	neg	r22
    1df6:	7f 4f       	sbci	r23, 0xFF	; 255
    1df8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1dfc:	99 23       	and	r25, r25
    1dfe:	a9 f0       	breq	.+42     	; 0x1e2a <__floatsisf+0x40>
    1e00:	f9 2f       	mov	r31, r25
    1e02:	96 e9       	ldi	r25, 0x96	; 150
    1e04:	bb 27       	eor	r27, r27
    1e06:	93 95       	inc	r25
    1e08:	f6 95       	lsr	r31
    1e0a:	87 95       	ror	r24
    1e0c:	77 95       	ror	r23
    1e0e:	67 95       	ror	r22
    1e10:	b7 95       	ror	r27
    1e12:	f1 11       	cpse	r31, r1
    1e14:	f8 cf       	rjmp	.-16     	; 0x1e06 <__floatsisf+0x1c>
    1e16:	fa f4       	brpl	.+62     	; 0x1e56 <__floatsisf+0x6c>
    1e18:	bb 0f       	add	r27, r27
    1e1a:	11 f4       	brne	.+4      	; 0x1e20 <__floatsisf+0x36>
    1e1c:	60 ff       	sbrs	r22, 0
    1e1e:	1b c0       	rjmp	.+54     	; 0x1e56 <__floatsisf+0x6c>
    1e20:	6f 5f       	subi	r22, 0xFF	; 255
    1e22:	7f 4f       	sbci	r23, 0xFF	; 255
    1e24:	8f 4f       	sbci	r24, 0xFF	; 255
    1e26:	9f 4f       	sbci	r25, 0xFF	; 255
    1e28:	16 c0       	rjmp	.+44     	; 0x1e56 <__floatsisf+0x6c>
    1e2a:	88 23       	and	r24, r24
    1e2c:	11 f0       	breq	.+4      	; 0x1e32 <__floatsisf+0x48>
    1e2e:	96 e9       	ldi	r25, 0x96	; 150
    1e30:	11 c0       	rjmp	.+34     	; 0x1e54 <__floatsisf+0x6a>
    1e32:	77 23       	and	r23, r23
    1e34:	21 f0       	breq	.+8      	; 0x1e3e <__floatsisf+0x54>
    1e36:	9e e8       	ldi	r25, 0x8E	; 142
    1e38:	87 2f       	mov	r24, r23
    1e3a:	76 2f       	mov	r23, r22
    1e3c:	05 c0       	rjmp	.+10     	; 0x1e48 <__floatsisf+0x5e>
    1e3e:	66 23       	and	r22, r22
    1e40:	71 f0       	breq	.+28     	; 0x1e5e <__floatsisf+0x74>
    1e42:	96 e8       	ldi	r25, 0x86	; 134
    1e44:	86 2f       	mov	r24, r22
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	60 e0       	ldi	r22, 0x00	; 0
    1e4a:	2a f0       	brmi	.+10     	; 0x1e56 <__floatsisf+0x6c>
    1e4c:	9a 95       	dec	r25
    1e4e:	66 0f       	add	r22, r22
    1e50:	77 1f       	adc	r23, r23
    1e52:	88 1f       	adc	r24, r24
    1e54:	da f7       	brpl	.-10     	; 0x1e4c <__floatsisf+0x62>
    1e56:	88 0f       	add	r24, r24
    1e58:	96 95       	lsr	r25
    1e5a:	87 95       	ror	r24
    1e5c:	97 f9       	bld	r25, 7
    1e5e:	08 95       	ret

00001e60 <__fp_cmp>:
    1e60:	99 0f       	add	r25, r25
    1e62:	00 08       	sbc	r0, r0
    1e64:	55 0f       	add	r21, r21
    1e66:	aa 0b       	sbc	r26, r26
    1e68:	e0 e8       	ldi	r30, 0x80	; 128
    1e6a:	fe ef       	ldi	r31, 0xFE	; 254
    1e6c:	16 16       	cp	r1, r22
    1e6e:	17 06       	cpc	r1, r23
    1e70:	e8 07       	cpc	r30, r24
    1e72:	f9 07       	cpc	r31, r25
    1e74:	c0 f0       	brcs	.+48     	; 0x1ea6 <__fp_cmp+0x46>
    1e76:	12 16       	cp	r1, r18
    1e78:	13 06       	cpc	r1, r19
    1e7a:	e4 07       	cpc	r30, r20
    1e7c:	f5 07       	cpc	r31, r21
    1e7e:	98 f0       	brcs	.+38     	; 0x1ea6 <__fp_cmp+0x46>
    1e80:	62 1b       	sub	r22, r18
    1e82:	73 0b       	sbc	r23, r19
    1e84:	84 0b       	sbc	r24, r20
    1e86:	95 0b       	sbc	r25, r21
    1e88:	39 f4       	brne	.+14     	; 0x1e98 <__fp_cmp+0x38>
    1e8a:	0a 26       	eor	r0, r26
    1e8c:	61 f0       	breq	.+24     	; 0x1ea6 <__fp_cmp+0x46>
    1e8e:	23 2b       	or	r18, r19
    1e90:	24 2b       	or	r18, r20
    1e92:	25 2b       	or	r18, r21
    1e94:	21 f4       	brne	.+8      	; 0x1e9e <__fp_cmp+0x3e>
    1e96:	08 95       	ret
    1e98:	0a 26       	eor	r0, r26
    1e9a:	09 f4       	brne	.+2      	; 0x1e9e <__fp_cmp+0x3e>
    1e9c:	a1 40       	sbci	r26, 0x01	; 1
    1e9e:	a6 95       	lsr	r26
    1ea0:	8f ef       	ldi	r24, 0xFF	; 255
    1ea2:	81 1d       	adc	r24, r1
    1ea4:	81 1d       	adc	r24, r1
    1ea6:	08 95       	ret

00001ea8 <__fp_inf>:
    1ea8:	97 f9       	bld	r25, 7
    1eaa:	9f 67       	ori	r25, 0x7F	; 127
    1eac:	80 e8       	ldi	r24, 0x80	; 128
    1eae:	70 e0       	ldi	r23, 0x00	; 0
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	08 95       	ret

00001eb4 <__fp_nan>:
    1eb4:	9f ef       	ldi	r25, 0xFF	; 255
    1eb6:	80 ec       	ldi	r24, 0xC0	; 192
    1eb8:	08 95       	ret

00001eba <__fp_pscA>:
    1eba:	00 24       	eor	r0, r0
    1ebc:	0a 94       	dec	r0
    1ebe:	16 16       	cp	r1, r22
    1ec0:	17 06       	cpc	r1, r23
    1ec2:	18 06       	cpc	r1, r24
    1ec4:	09 06       	cpc	r0, r25
    1ec6:	08 95       	ret

00001ec8 <__fp_pscB>:
    1ec8:	00 24       	eor	r0, r0
    1eca:	0a 94       	dec	r0
    1ecc:	12 16       	cp	r1, r18
    1ece:	13 06       	cpc	r1, r19
    1ed0:	14 06       	cpc	r1, r20
    1ed2:	05 06       	cpc	r0, r21
    1ed4:	08 95       	ret

00001ed6 <__fp_round>:
    1ed6:	09 2e       	mov	r0, r25
    1ed8:	03 94       	inc	r0
    1eda:	00 0c       	add	r0, r0
    1edc:	11 f4       	brne	.+4      	; 0x1ee2 <__fp_round+0xc>
    1ede:	88 23       	and	r24, r24
    1ee0:	52 f0       	brmi	.+20     	; 0x1ef6 <__fp_round+0x20>
    1ee2:	bb 0f       	add	r27, r27
    1ee4:	40 f4       	brcc	.+16     	; 0x1ef6 <__fp_round+0x20>
    1ee6:	bf 2b       	or	r27, r31
    1ee8:	11 f4       	brne	.+4      	; 0x1eee <__fp_round+0x18>
    1eea:	60 ff       	sbrs	r22, 0
    1eec:	04 c0       	rjmp	.+8      	; 0x1ef6 <__fp_round+0x20>
    1eee:	6f 5f       	subi	r22, 0xFF	; 255
    1ef0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef6:	08 95       	ret

00001ef8 <__fp_split3>:
    1ef8:	57 fd       	sbrc	r21, 7
    1efa:	90 58       	subi	r25, 0x80	; 128
    1efc:	44 0f       	add	r20, r20
    1efe:	55 1f       	adc	r21, r21
    1f00:	59 f0       	breq	.+22     	; 0x1f18 <__fp_splitA+0x10>
    1f02:	5f 3f       	cpi	r21, 0xFF	; 255
    1f04:	71 f0       	breq	.+28     	; 0x1f22 <__fp_splitA+0x1a>
    1f06:	47 95       	ror	r20

00001f08 <__fp_splitA>:
    1f08:	88 0f       	add	r24, r24
    1f0a:	97 fb       	bst	r25, 7
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	61 f0       	breq	.+24     	; 0x1f28 <__fp_splitA+0x20>
    1f10:	9f 3f       	cpi	r25, 0xFF	; 255
    1f12:	79 f0       	breq	.+30     	; 0x1f32 <__fp_splitA+0x2a>
    1f14:	87 95       	ror	r24
    1f16:	08 95       	ret
    1f18:	12 16       	cp	r1, r18
    1f1a:	13 06       	cpc	r1, r19
    1f1c:	14 06       	cpc	r1, r20
    1f1e:	55 1f       	adc	r21, r21
    1f20:	f2 cf       	rjmp	.-28     	; 0x1f06 <__fp_split3+0xe>
    1f22:	46 95       	lsr	r20
    1f24:	f1 df       	rcall	.-30     	; 0x1f08 <__fp_splitA>
    1f26:	08 c0       	rjmp	.+16     	; 0x1f38 <__fp_splitA+0x30>
    1f28:	16 16       	cp	r1, r22
    1f2a:	17 06       	cpc	r1, r23
    1f2c:	18 06       	cpc	r1, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	f1 cf       	rjmp	.-30     	; 0x1f14 <__fp_splitA+0xc>
    1f32:	86 95       	lsr	r24
    1f34:	71 05       	cpc	r23, r1
    1f36:	61 05       	cpc	r22, r1
    1f38:	08 94       	sec
    1f3a:	08 95       	ret

00001f3c <__fp_zero>:
    1f3c:	e8 94       	clt

00001f3e <__fp_szero>:
    1f3e:	bb 27       	eor	r27, r27
    1f40:	66 27       	eor	r22, r22
    1f42:	77 27       	eor	r23, r23
    1f44:	cb 01       	movw	r24, r22
    1f46:	97 f9       	bld	r25, 7
    1f48:	08 95       	ret

00001f4a <__gesf2>:
    1f4a:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__fp_cmp>
    1f4e:	08 f4       	brcc	.+2      	; 0x1f52 <__gesf2+0x8>
    1f50:	8f ef       	ldi	r24, 0xFF	; 255
    1f52:	08 95       	ret
    1f54:	16 f0       	brts	.+4      	; 0x1f5a <__gesf2+0x10>
    1f56:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <__fp_mpack>
    1f5a:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__fp_nan>
    1f5e:	68 94       	set
    1f60:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__fp_inf>

00001f64 <log>:
    1f64:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__fp_splitA>
    1f68:	a8 f3       	brcs	.-22     	; 0x1f54 <__gesf2+0xa>
    1f6a:	99 23       	and	r25, r25
    1f6c:	c1 f3       	breq	.-16     	; 0x1f5e <__gesf2+0x14>
    1f6e:	ae f3       	brts	.-22     	; 0x1f5a <__gesf2+0x10>
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	1f 93       	push	r17
    1f76:	0f 93       	push	r16
    1f78:	ff 92       	push	r15
    1f7a:	c9 2f       	mov	r28, r25
    1f7c:	dd 27       	eor	r29, r29
    1f7e:	88 23       	and	r24, r24
    1f80:	2a f0       	brmi	.+10     	; 0x1f8c <log+0x28>
    1f82:	21 97       	sbiw	r28, 0x01	; 1
    1f84:	66 0f       	add	r22, r22
    1f86:	77 1f       	adc	r23, r23
    1f88:	88 1f       	adc	r24, r24
    1f8a:	da f7       	brpl	.-10     	; 0x1f82 <log+0x1e>
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e8       	ldi	r20, 0x80	; 128
    1f92:	5f eb       	ldi	r21, 0xBF	; 191
    1f94:	9f e3       	ldi	r25, 0x3F	; 63
    1f96:	88 39       	cpi	r24, 0x98	; 152
    1f98:	20 f0       	brcs	.+8      	; 0x1fa2 <log+0x3e>
    1f9a:	80 3e       	cpi	r24, 0xE0	; 224
    1f9c:	38 f0       	brcs	.+14     	; 0x1fac <log+0x48>
    1f9e:	21 96       	adiw	r28, 0x01	; 1
    1fa0:	8f 77       	andi	r24, 0x7F	; 127
    1fa2:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__addsf3>
    1fa6:	e2 e1       	ldi	r30, 0x12	; 18
    1fa8:	f1 e0       	ldi	r31, 0x01	; 1
    1faa:	04 c0       	rjmp	.+8      	; 0x1fb4 <log+0x50>
    1fac:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__addsf3>
    1fb0:	ef e3       	ldi	r30, 0x3F	; 63
    1fb2:	f1 e0       	ldi	r31, 0x01	; 1
    1fb4:	0e 94 75 10 	call	0x20ea	; 0x20ea <__fp_powser>
    1fb8:	8b 01       	movw	r16, r22
    1fba:	be 01       	movw	r22, r28
    1fbc:	ec 01       	movw	r28, r24
    1fbe:	fb 2e       	mov	r15, r27
    1fc0:	6f 57       	subi	r22, 0x7F	; 127
    1fc2:	71 09       	sbc	r23, r1
    1fc4:	75 95       	asr	r23
    1fc6:	77 1f       	adc	r23, r23
    1fc8:	88 0b       	sbc	r24, r24
    1fca:	99 0b       	sbc	r25, r25
    1fcc:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__floatsisf>
    1fd0:	28 e1       	ldi	r18, 0x18	; 24
    1fd2:	32 e7       	ldi	r19, 0x72	; 114
    1fd4:	41 e3       	ldi	r20, 0x31	; 49
    1fd6:	5f e3       	ldi	r21, 0x3F	; 63
    1fd8:	0e 94 0d 10 	call	0x201a	; 0x201a <__mulsf3x>
    1fdc:	af 2d       	mov	r26, r15
    1fde:	98 01       	movw	r18, r16
    1fe0:	ae 01       	movw	r20, r28
    1fe2:	ff 90       	pop	r15
    1fe4:	0f 91       	pop	r16
    1fe6:	1f 91       	pop	r17
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__addsf3x>
    1ff0:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__fp_round>

00001ff4 <__mulsf3>:
    1ff4:	0e 94 0d 10 	call	0x201a	; 0x201a <__mulsf3x>
    1ff8:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__fp_round>
    1ffc:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__fp_pscA>
    2000:	38 f0       	brcs	.+14     	; 0x2010 <__mulsf3+0x1c>
    2002:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__fp_pscB>
    2006:	20 f0       	brcs	.+8      	; 0x2010 <__mulsf3+0x1c>
    2008:	95 23       	and	r25, r21
    200a:	11 f0       	breq	.+4      	; 0x2010 <__mulsf3+0x1c>
    200c:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__fp_inf>
    2010:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__fp_nan>
    2014:	11 24       	eor	r1, r1
    2016:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__fp_szero>

0000201a <__mulsf3x>:
    201a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__fp_split3>
    201e:	70 f3       	brcs	.-36     	; 0x1ffc <__mulsf3+0x8>

00002020 <__mulsf3_pse>:
    2020:	95 9f       	mul	r25, r21
    2022:	c1 f3       	breq	.-16     	; 0x2014 <__mulsf3+0x20>
    2024:	95 0f       	add	r25, r21
    2026:	50 e0       	ldi	r21, 0x00	; 0
    2028:	55 1f       	adc	r21, r21
    202a:	62 9f       	mul	r22, r18
    202c:	f0 01       	movw	r30, r0
    202e:	72 9f       	mul	r23, r18
    2030:	bb 27       	eor	r27, r27
    2032:	f0 0d       	add	r31, r0
    2034:	b1 1d       	adc	r27, r1
    2036:	63 9f       	mul	r22, r19
    2038:	aa 27       	eor	r26, r26
    203a:	f0 0d       	add	r31, r0
    203c:	b1 1d       	adc	r27, r1
    203e:	aa 1f       	adc	r26, r26
    2040:	64 9f       	mul	r22, r20
    2042:	66 27       	eor	r22, r22
    2044:	b0 0d       	add	r27, r0
    2046:	a1 1d       	adc	r26, r1
    2048:	66 1f       	adc	r22, r22
    204a:	82 9f       	mul	r24, r18
    204c:	22 27       	eor	r18, r18
    204e:	b0 0d       	add	r27, r0
    2050:	a1 1d       	adc	r26, r1
    2052:	62 1f       	adc	r22, r18
    2054:	73 9f       	mul	r23, r19
    2056:	b0 0d       	add	r27, r0
    2058:	a1 1d       	adc	r26, r1
    205a:	62 1f       	adc	r22, r18
    205c:	83 9f       	mul	r24, r19
    205e:	a0 0d       	add	r26, r0
    2060:	61 1d       	adc	r22, r1
    2062:	22 1f       	adc	r18, r18
    2064:	74 9f       	mul	r23, r20
    2066:	33 27       	eor	r19, r19
    2068:	a0 0d       	add	r26, r0
    206a:	61 1d       	adc	r22, r1
    206c:	23 1f       	adc	r18, r19
    206e:	84 9f       	mul	r24, r20
    2070:	60 0d       	add	r22, r0
    2072:	21 1d       	adc	r18, r1
    2074:	82 2f       	mov	r24, r18
    2076:	76 2f       	mov	r23, r22
    2078:	6a 2f       	mov	r22, r26
    207a:	11 24       	eor	r1, r1
    207c:	9f 57       	subi	r25, 0x7F	; 127
    207e:	50 40       	sbci	r21, 0x00	; 0
    2080:	9a f0       	brmi	.+38     	; 0x20a8 <__mulsf3_pse+0x88>
    2082:	f1 f0       	breq	.+60     	; 0x20c0 <__mulsf3_pse+0xa0>
    2084:	88 23       	and	r24, r24
    2086:	4a f0       	brmi	.+18     	; 0x209a <__mulsf3_pse+0x7a>
    2088:	ee 0f       	add	r30, r30
    208a:	ff 1f       	adc	r31, r31
    208c:	bb 1f       	adc	r27, r27
    208e:	66 1f       	adc	r22, r22
    2090:	77 1f       	adc	r23, r23
    2092:	88 1f       	adc	r24, r24
    2094:	91 50       	subi	r25, 0x01	; 1
    2096:	50 40       	sbci	r21, 0x00	; 0
    2098:	a9 f7       	brne	.-22     	; 0x2084 <__mulsf3_pse+0x64>
    209a:	9e 3f       	cpi	r25, 0xFE	; 254
    209c:	51 05       	cpc	r21, r1
    209e:	80 f0       	brcs	.+32     	; 0x20c0 <__mulsf3_pse+0xa0>
    20a0:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__fp_inf>
    20a4:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__fp_szero>
    20a8:	5f 3f       	cpi	r21, 0xFF	; 255
    20aa:	e4 f3       	brlt	.-8      	; 0x20a4 <__mulsf3_pse+0x84>
    20ac:	98 3e       	cpi	r25, 0xE8	; 232
    20ae:	d4 f3       	brlt	.-12     	; 0x20a4 <__mulsf3_pse+0x84>
    20b0:	86 95       	lsr	r24
    20b2:	77 95       	ror	r23
    20b4:	67 95       	ror	r22
    20b6:	b7 95       	ror	r27
    20b8:	f7 95       	ror	r31
    20ba:	e7 95       	ror	r30
    20bc:	9f 5f       	subi	r25, 0xFF	; 255
    20be:	c1 f7       	brne	.-16     	; 0x20b0 <__mulsf3_pse+0x90>
    20c0:	fe 2b       	or	r31, r30
    20c2:	88 0f       	add	r24, r24
    20c4:	91 1d       	adc	r25, r1
    20c6:	96 95       	lsr	r25
    20c8:	87 95       	ror	r24
    20ca:	97 f9       	bld	r25, 7
    20cc:	08 95       	ret

000020ce <__fp_mpack>:
    20ce:	9f 3f       	cpi	r25, 0xFF	; 255
    20d0:	31 f0       	breq	.+12     	; 0x20de <__fp_mpack_finite+0xc>

000020d2 <__fp_mpack_finite>:
    20d2:	91 50       	subi	r25, 0x01	; 1
    20d4:	20 f4       	brcc	.+8      	; 0x20de <__fp_mpack_finite+0xc>
    20d6:	87 95       	ror	r24
    20d8:	77 95       	ror	r23
    20da:	67 95       	ror	r22
    20dc:	b7 95       	ror	r27
    20de:	88 0f       	add	r24, r24
    20e0:	91 1d       	adc	r25, r1
    20e2:	96 95       	lsr	r25
    20e4:	87 95       	ror	r24
    20e6:	97 f9       	bld	r25, 7
    20e8:	08 95       	ret

000020ea <__fp_powser>:
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	1f 93       	push	r17
    20f0:	0f 93       	push	r16
    20f2:	ff 92       	push	r15
    20f4:	ef 92       	push	r14
    20f6:	df 92       	push	r13
    20f8:	7b 01       	movw	r14, r22
    20fa:	8c 01       	movw	r16, r24
    20fc:	68 94       	set
    20fe:	06 c0       	rjmp	.+12     	; 0x210c <__fp_powser+0x22>
    2100:	da 2e       	mov	r13, r26
    2102:	ef 01       	movw	r28, r30
    2104:	0e 94 0d 10 	call	0x201a	; 0x201a <__mulsf3x>
    2108:	fe 01       	movw	r30, r28
    210a:	e8 94       	clt
    210c:	a5 91       	lpm	r26, Z+
    210e:	25 91       	lpm	r18, Z+
    2110:	35 91       	lpm	r19, Z+
    2112:	45 91       	lpm	r20, Z+
    2114:	55 91       	lpm	r21, Z+
    2116:	a6 f3       	brts	.-24     	; 0x2100 <__fp_powser+0x16>
    2118:	ef 01       	movw	r28, r30
    211a:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__addsf3x>
    211e:	fe 01       	movw	r30, r28
    2120:	97 01       	movw	r18, r14
    2122:	a8 01       	movw	r20, r16
    2124:	da 94       	dec	r13
    2126:	69 f7       	brne	.-38     	; 0x2102 <__fp_powser+0x18>
    2128:	df 90       	pop	r13
    212a:	ef 90       	pop	r14
    212c:	ff 90       	pop	r15
    212e:	0f 91       	pop	r16
    2130:	1f 91       	pop	r17
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	08 95       	ret

00002138 <__udivmodqi4>:
    2138:	99 1b       	sub	r25, r25
    213a:	79 e0       	ldi	r23, 0x09	; 9
    213c:	04 c0       	rjmp	.+8      	; 0x2146 <__udivmodqi4_ep>

0000213e <__udivmodqi4_loop>:
    213e:	99 1f       	adc	r25, r25
    2140:	96 17       	cp	r25, r22
    2142:	08 f0       	brcs	.+2      	; 0x2146 <__udivmodqi4_ep>
    2144:	96 1b       	sub	r25, r22

00002146 <__udivmodqi4_ep>:
    2146:	88 1f       	adc	r24, r24
    2148:	7a 95       	dec	r23
    214a:	c9 f7       	brne	.-14     	; 0x213e <__udivmodqi4_loop>
    214c:	80 95       	com	r24
    214e:	08 95       	ret

00002150 <__divmodqi4>:
    2150:	87 fb       	bst	r24, 7
    2152:	08 2e       	mov	r0, r24
    2154:	06 26       	eor	r0, r22
    2156:	87 fd       	sbrc	r24, 7
    2158:	81 95       	neg	r24
    215a:	67 fd       	sbrc	r22, 7
    215c:	61 95       	neg	r22
    215e:	0e 94 9c 10 	call	0x2138	; 0x2138 <__udivmodqi4>
    2162:	0e f4       	brtc	.+2      	; 0x2166 <__divmodqi4_1>
    2164:	91 95       	neg	r25

00002166 <__divmodqi4_1>:
    2166:	07 fc       	sbrc	r0, 7
    2168:	81 95       	neg	r24

0000216a <__divmodqi4_exit>:
    216a:	08 95       	ret

0000216c <__divmodhi4>:
    216c:	97 fb       	bst	r25, 7
    216e:	07 2e       	mov	r0, r23
    2170:	16 f4       	brtc	.+4      	; 0x2176 <__divmodhi4+0xa>
    2172:	00 94       	com	r0
    2174:	07 d0       	rcall	.+14     	; 0x2184 <__divmodhi4_neg1>
    2176:	77 fd       	sbrc	r23, 7
    2178:	09 d0       	rcall	.+18     	; 0x218c <__divmodhi4_neg2>
    217a:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__udivmodhi4>
    217e:	07 fc       	sbrc	r0, 7
    2180:	05 d0       	rcall	.+10     	; 0x218c <__divmodhi4_neg2>
    2182:	3e f4       	brtc	.+14     	; 0x2192 <__divmodhi4_exit>

00002184 <__divmodhi4_neg1>:
    2184:	90 95       	com	r25
    2186:	81 95       	neg	r24
    2188:	9f 4f       	sbci	r25, 0xFF	; 255
    218a:	08 95       	ret

0000218c <__divmodhi4_neg2>:
    218c:	70 95       	com	r23
    218e:	61 95       	neg	r22
    2190:	7f 4f       	sbci	r23, 0xFF	; 255

00002192 <__divmodhi4_exit>:
    2192:	08 95       	ret

00002194 <__tablejump2__>:
    2194:	ee 0f       	add	r30, r30
    2196:	ff 1f       	adc	r31, r31
    2198:	05 90       	lpm	r0, Z+
    219a:	f4 91       	lpm	r31, Z
    219c:	e0 2d       	mov	r30, r0
    219e:	09 94       	ijmp

000021a0 <__udivmodhi4>:
    21a0:	aa 1b       	sub	r26, r26
    21a2:	bb 1b       	sub	r27, r27
    21a4:	51 e1       	ldi	r21, 0x11	; 17
    21a6:	07 c0       	rjmp	.+14     	; 0x21b6 <__udivmodhi4_ep>

000021a8 <__udivmodhi4_loop>:
    21a8:	aa 1f       	adc	r26, r26
    21aa:	bb 1f       	adc	r27, r27
    21ac:	a6 17       	cp	r26, r22
    21ae:	b7 07       	cpc	r27, r23
    21b0:	10 f0       	brcs	.+4      	; 0x21b6 <__udivmodhi4_ep>
    21b2:	a6 1b       	sub	r26, r22
    21b4:	b7 0b       	sbc	r27, r23

000021b6 <__udivmodhi4_ep>:
    21b6:	88 1f       	adc	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	5a 95       	dec	r21
    21bc:	a9 f7       	brne	.-22     	; 0x21a8 <__udivmodhi4_loop>
    21be:	80 95       	com	r24
    21c0:	90 95       	com	r25
    21c2:	bc 01       	movw	r22, r24
    21c4:	cd 01       	movw	r24, r26
    21c6:	08 95       	ret

000021c8 <snprintf>:
    21c8:	ae e0       	ldi	r26, 0x0E	; 14
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	ea ee       	ldi	r30, 0xEA	; 234
    21ce:	f0 e1       	ldi	r31, 0x10	; 16
    21d0:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__prologue_saves__+0x1c>
    21d4:	0d 89       	ldd	r16, Y+21	; 0x15
    21d6:	1e 89       	ldd	r17, Y+22	; 0x16
    21d8:	8f 89       	ldd	r24, Y+23	; 0x17
    21da:	98 8d       	ldd	r25, Y+24	; 0x18
    21dc:	26 e0       	ldi	r18, 0x06	; 6
    21de:	2c 83       	std	Y+4, r18	; 0x04
    21e0:	1a 83       	std	Y+2, r17	; 0x02
    21e2:	09 83       	std	Y+1, r16	; 0x01
    21e4:	97 ff       	sbrs	r25, 7
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <snprintf+0x24>
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e8       	ldi	r25, 0x80	; 128
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	9e 83       	std	Y+6, r25	; 0x06
    21f0:	8d 83       	std	Y+5, r24	; 0x05
    21f2:	ae 01       	movw	r20, r28
    21f4:	45 5e       	subi	r20, 0xE5	; 229
    21f6:	5f 4f       	sbci	r21, 0xFF	; 255
    21f8:	69 8d       	ldd	r22, Y+25	; 0x19
    21fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21fc:	ce 01       	movw	r24, r28
    21fe:	01 96       	adiw	r24, 0x01	; 1
    2200:	0e 94 14 11 	call	0x2228	; 0x2228 <vfprintf>
    2204:	4d 81       	ldd	r20, Y+5	; 0x05
    2206:	5e 81       	ldd	r21, Y+6	; 0x06
    2208:	57 fd       	sbrc	r21, 7
    220a:	0a c0       	rjmp	.+20     	; 0x2220 <snprintf+0x58>
    220c:	2f 81       	ldd	r18, Y+7	; 0x07
    220e:	38 85       	ldd	r19, Y+8	; 0x08
    2210:	42 17       	cp	r20, r18
    2212:	53 07       	cpc	r21, r19
    2214:	0c f4       	brge	.+2      	; 0x2218 <snprintf+0x50>
    2216:	9a 01       	movw	r18, r20
    2218:	f8 01       	movw	r30, r16
    221a:	e2 0f       	add	r30, r18
    221c:	f3 1f       	adc	r31, r19
    221e:	10 82       	st	Z, r1
    2220:	2e 96       	adiw	r28, 0x0e	; 14
    2222:	e4 e0       	ldi	r30, 0x04	; 4
    2224:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__epilogue_restores__+0x1c>

00002228 <vfprintf>:
    2228:	ab e0       	ldi	r26, 0x0B	; 11
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	ea e1       	ldi	r30, 0x1A	; 26
    222e:	f1 e1       	ldi	r31, 0x11	; 17
    2230:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__prologue_saves__>
    2234:	6c 01       	movw	r12, r24
    2236:	7b 01       	movw	r14, r22
    2238:	8a 01       	movw	r16, r20
    223a:	fc 01       	movw	r30, r24
    223c:	17 82       	std	Z+7, r1	; 0x07
    223e:	16 82       	std	Z+6, r1	; 0x06
    2240:	83 81       	ldd	r24, Z+3	; 0x03
    2242:	81 ff       	sbrs	r24, 1
    2244:	cc c1       	rjmp	.+920    	; 0x25de <vfprintf+0x3b6>
    2246:	ce 01       	movw	r24, r28
    2248:	01 96       	adiw	r24, 0x01	; 1
    224a:	3c 01       	movw	r6, r24
    224c:	f6 01       	movw	r30, r12
    224e:	93 81       	ldd	r25, Z+3	; 0x03
    2250:	f7 01       	movw	r30, r14
    2252:	93 fd       	sbrc	r25, 3
    2254:	85 91       	lpm	r24, Z+
    2256:	93 ff       	sbrs	r25, 3
    2258:	81 91       	ld	r24, Z+
    225a:	7f 01       	movw	r14, r30
    225c:	88 23       	and	r24, r24
    225e:	09 f4       	brne	.+2      	; 0x2262 <vfprintf+0x3a>
    2260:	ba c1       	rjmp	.+884    	; 0x25d6 <vfprintf+0x3ae>
    2262:	85 32       	cpi	r24, 0x25	; 37
    2264:	39 f4       	brne	.+14     	; 0x2274 <vfprintf+0x4c>
    2266:	93 fd       	sbrc	r25, 3
    2268:	85 91       	lpm	r24, Z+
    226a:	93 ff       	sbrs	r25, 3
    226c:	81 91       	ld	r24, Z+
    226e:	7f 01       	movw	r14, r30
    2270:	85 32       	cpi	r24, 0x25	; 37
    2272:	29 f4       	brne	.+10     	; 0x227e <vfprintf+0x56>
    2274:	b6 01       	movw	r22, r12
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	0e 94 0b 13 	call	0x2616	; 0x2616 <fputc>
    227c:	e7 cf       	rjmp	.-50     	; 0x224c <vfprintf+0x24>
    227e:	91 2c       	mov	r9, r1
    2280:	21 2c       	mov	r2, r1
    2282:	31 2c       	mov	r3, r1
    2284:	ff e1       	ldi	r31, 0x1F	; 31
    2286:	f3 15       	cp	r31, r3
    2288:	d8 f0       	brcs	.+54     	; 0x22c0 <vfprintf+0x98>
    228a:	8b 32       	cpi	r24, 0x2B	; 43
    228c:	79 f0       	breq	.+30     	; 0x22ac <vfprintf+0x84>
    228e:	38 f4       	brcc	.+14     	; 0x229e <vfprintf+0x76>
    2290:	80 32       	cpi	r24, 0x20	; 32
    2292:	79 f0       	breq	.+30     	; 0x22b2 <vfprintf+0x8a>
    2294:	83 32       	cpi	r24, 0x23	; 35
    2296:	a1 f4       	brne	.+40     	; 0x22c0 <vfprintf+0x98>
    2298:	23 2d       	mov	r18, r3
    229a:	20 61       	ori	r18, 0x10	; 16
    229c:	1d c0       	rjmp	.+58     	; 0x22d8 <vfprintf+0xb0>
    229e:	8d 32       	cpi	r24, 0x2D	; 45
    22a0:	61 f0       	breq	.+24     	; 0x22ba <vfprintf+0x92>
    22a2:	80 33       	cpi	r24, 0x30	; 48
    22a4:	69 f4       	brne	.+26     	; 0x22c0 <vfprintf+0x98>
    22a6:	23 2d       	mov	r18, r3
    22a8:	21 60       	ori	r18, 0x01	; 1
    22aa:	16 c0       	rjmp	.+44     	; 0x22d8 <vfprintf+0xb0>
    22ac:	83 2d       	mov	r24, r3
    22ae:	82 60       	ori	r24, 0x02	; 2
    22b0:	38 2e       	mov	r3, r24
    22b2:	e3 2d       	mov	r30, r3
    22b4:	e4 60       	ori	r30, 0x04	; 4
    22b6:	3e 2e       	mov	r3, r30
    22b8:	2a c0       	rjmp	.+84     	; 0x230e <vfprintf+0xe6>
    22ba:	f3 2d       	mov	r31, r3
    22bc:	f8 60       	ori	r31, 0x08	; 8
    22be:	1d c0       	rjmp	.+58     	; 0x22fa <vfprintf+0xd2>
    22c0:	37 fc       	sbrc	r3, 7
    22c2:	2d c0       	rjmp	.+90     	; 0x231e <vfprintf+0xf6>
    22c4:	20 ed       	ldi	r18, 0xD0	; 208
    22c6:	28 0f       	add	r18, r24
    22c8:	2a 30       	cpi	r18, 0x0A	; 10
    22ca:	40 f0       	brcs	.+16     	; 0x22dc <vfprintf+0xb4>
    22cc:	8e 32       	cpi	r24, 0x2E	; 46
    22ce:	b9 f4       	brne	.+46     	; 0x22fe <vfprintf+0xd6>
    22d0:	36 fc       	sbrc	r3, 6
    22d2:	81 c1       	rjmp	.+770    	; 0x25d6 <vfprintf+0x3ae>
    22d4:	23 2d       	mov	r18, r3
    22d6:	20 64       	ori	r18, 0x40	; 64
    22d8:	32 2e       	mov	r3, r18
    22da:	19 c0       	rjmp	.+50     	; 0x230e <vfprintf+0xe6>
    22dc:	36 fe       	sbrs	r3, 6
    22de:	06 c0       	rjmp	.+12     	; 0x22ec <vfprintf+0xc4>
    22e0:	8a e0       	ldi	r24, 0x0A	; 10
    22e2:	98 9e       	mul	r9, r24
    22e4:	20 0d       	add	r18, r0
    22e6:	11 24       	eor	r1, r1
    22e8:	92 2e       	mov	r9, r18
    22ea:	11 c0       	rjmp	.+34     	; 0x230e <vfprintf+0xe6>
    22ec:	ea e0       	ldi	r30, 0x0A	; 10
    22ee:	2e 9e       	mul	r2, r30
    22f0:	20 0d       	add	r18, r0
    22f2:	11 24       	eor	r1, r1
    22f4:	22 2e       	mov	r2, r18
    22f6:	f3 2d       	mov	r31, r3
    22f8:	f0 62       	ori	r31, 0x20	; 32
    22fa:	3f 2e       	mov	r3, r31
    22fc:	08 c0       	rjmp	.+16     	; 0x230e <vfprintf+0xe6>
    22fe:	8c 36       	cpi	r24, 0x6C	; 108
    2300:	21 f4       	brne	.+8      	; 0x230a <vfprintf+0xe2>
    2302:	83 2d       	mov	r24, r3
    2304:	80 68       	ori	r24, 0x80	; 128
    2306:	38 2e       	mov	r3, r24
    2308:	02 c0       	rjmp	.+4      	; 0x230e <vfprintf+0xe6>
    230a:	88 36       	cpi	r24, 0x68	; 104
    230c:	41 f4       	brne	.+16     	; 0x231e <vfprintf+0xf6>
    230e:	f7 01       	movw	r30, r14
    2310:	93 fd       	sbrc	r25, 3
    2312:	85 91       	lpm	r24, Z+
    2314:	93 ff       	sbrs	r25, 3
    2316:	81 91       	ld	r24, Z+
    2318:	7f 01       	movw	r14, r30
    231a:	81 11       	cpse	r24, r1
    231c:	b3 cf       	rjmp	.-154    	; 0x2284 <vfprintf+0x5c>
    231e:	98 2f       	mov	r25, r24
    2320:	9f 7d       	andi	r25, 0xDF	; 223
    2322:	95 54       	subi	r25, 0x45	; 69
    2324:	93 30       	cpi	r25, 0x03	; 3
    2326:	28 f4       	brcc	.+10     	; 0x2332 <vfprintf+0x10a>
    2328:	0c 5f       	subi	r16, 0xFC	; 252
    232a:	1f 4f       	sbci	r17, 0xFF	; 255
    232c:	9f e3       	ldi	r25, 0x3F	; 63
    232e:	99 83       	std	Y+1, r25	; 0x01
    2330:	0d c0       	rjmp	.+26     	; 0x234c <vfprintf+0x124>
    2332:	83 36       	cpi	r24, 0x63	; 99
    2334:	31 f0       	breq	.+12     	; 0x2342 <vfprintf+0x11a>
    2336:	83 37       	cpi	r24, 0x73	; 115
    2338:	71 f0       	breq	.+28     	; 0x2356 <vfprintf+0x12e>
    233a:	83 35       	cpi	r24, 0x53	; 83
    233c:	09 f0       	breq	.+2      	; 0x2340 <vfprintf+0x118>
    233e:	59 c0       	rjmp	.+178    	; 0x23f2 <vfprintf+0x1ca>
    2340:	21 c0       	rjmp	.+66     	; 0x2384 <vfprintf+0x15c>
    2342:	f8 01       	movw	r30, r16
    2344:	80 81       	ld	r24, Z
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	0e 5f       	subi	r16, 0xFE	; 254
    234a:	1f 4f       	sbci	r17, 0xFF	; 255
    234c:	88 24       	eor	r8, r8
    234e:	83 94       	inc	r8
    2350:	91 2c       	mov	r9, r1
    2352:	53 01       	movw	r10, r6
    2354:	13 c0       	rjmp	.+38     	; 0x237c <vfprintf+0x154>
    2356:	28 01       	movw	r4, r16
    2358:	f2 e0       	ldi	r31, 0x02	; 2
    235a:	4f 0e       	add	r4, r31
    235c:	51 1c       	adc	r5, r1
    235e:	f8 01       	movw	r30, r16
    2360:	a0 80       	ld	r10, Z
    2362:	b1 80       	ldd	r11, Z+1	; 0x01
    2364:	36 fe       	sbrs	r3, 6
    2366:	03 c0       	rjmp	.+6      	; 0x236e <vfprintf+0x146>
    2368:	69 2d       	mov	r22, r9
    236a:	70 e0       	ldi	r23, 0x00	; 0
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <vfprintf+0x14a>
    236e:	6f ef       	ldi	r22, 0xFF	; 255
    2370:	7f ef       	ldi	r23, 0xFF	; 255
    2372:	c5 01       	movw	r24, r10
    2374:	0e 94 00 13 	call	0x2600	; 0x2600 <strnlen>
    2378:	4c 01       	movw	r8, r24
    237a:	82 01       	movw	r16, r4
    237c:	f3 2d       	mov	r31, r3
    237e:	ff 77       	andi	r31, 0x7F	; 127
    2380:	3f 2e       	mov	r3, r31
    2382:	16 c0       	rjmp	.+44     	; 0x23b0 <vfprintf+0x188>
    2384:	28 01       	movw	r4, r16
    2386:	22 e0       	ldi	r18, 0x02	; 2
    2388:	42 0e       	add	r4, r18
    238a:	51 1c       	adc	r5, r1
    238c:	f8 01       	movw	r30, r16
    238e:	a0 80       	ld	r10, Z
    2390:	b1 80       	ldd	r11, Z+1	; 0x01
    2392:	36 fe       	sbrs	r3, 6
    2394:	03 c0       	rjmp	.+6      	; 0x239c <vfprintf+0x174>
    2396:	69 2d       	mov	r22, r9
    2398:	70 e0       	ldi	r23, 0x00	; 0
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <vfprintf+0x178>
    239c:	6f ef       	ldi	r22, 0xFF	; 255
    239e:	7f ef       	ldi	r23, 0xFF	; 255
    23a0:	c5 01       	movw	r24, r10
    23a2:	0e 94 f5 12 	call	0x25ea	; 0x25ea <strnlen_P>
    23a6:	4c 01       	movw	r8, r24
    23a8:	f3 2d       	mov	r31, r3
    23aa:	f0 68       	ori	r31, 0x80	; 128
    23ac:	3f 2e       	mov	r3, r31
    23ae:	82 01       	movw	r16, r4
    23b0:	33 fc       	sbrc	r3, 3
    23b2:	1b c0       	rjmp	.+54     	; 0x23ea <vfprintf+0x1c2>
    23b4:	82 2d       	mov	r24, r2
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	88 16       	cp	r8, r24
    23ba:	99 06       	cpc	r9, r25
    23bc:	b0 f4       	brcc	.+44     	; 0x23ea <vfprintf+0x1c2>
    23be:	b6 01       	movw	r22, r12
    23c0:	80 e2       	ldi	r24, 0x20	; 32
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	0e 94 0b 13 	call	0x2616	; 0x2616 <fputc>
    23c8:	2a 94       	dec	r2
    23ca:	f4 cf       	rjmp	.-24     	; 0x23b4 <vfprintf+0x18c>
    23cc:	f5 01       	movw	r30, r10
    23ce:	37 fc       	sbrc	r3, 7
    23d0:	85 91       	lpm	r24, Z+
    23d2:	37 fe       	sbrs	r3, 7
    23d4:	81 91       	ld	r24, Z+
    23d6:	5f 01       	movw	r10, r30
    23d8:	b6 01       	movw	r22, r12
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	0e 94 0b 13 	call	0x2616	; 0x2616 <fputc>
    23e0:	21 10       	cpse	r2, r1
    23e2:	2a 94       	dec	r2
    23e4:	21 e0       	ldi	r18, 0x01	; 1
    23e6:	82 1a       	sub	r8, r18
    23e8:	91 08       	sbc	r9, r1
    23ea:	81 14       	cp	r8, r1
    23ec:	91 04       	cpc	r9, r1
    23ee:	71 f7       	brne	.-36     	; 0x23cc <vfprintf+0x1a4>
    23f0:	e8 c0       	rjmp	.+464    	; 0x25c2 <vfprintf+0x39a>
    23f2:	84 36       	cpi	r24, 0x64	; 100
    23f4:	11 f0       	breq	.+4      	; 0x23fa <vfprintf+0x1d2>
    23f6:	89 36       	cpi	r24, 0x69	; 105
    23f8:	41 f5       	brne	.+80     	; 0x244a <vfprintf+0x222>
    23fa:	f8 01       	movw	r30, r16
    23fc:	37 fe       	sbrs	r3, 7
    23fe:	07 c0       	rjmp	.+14     	; 0x240e <vfprintf+0x1e6>
    2400:	60 81       	ld	r22, Z
    2402:	71 81       	ldd	r23, Z+1	; 0x01
    2404:	82 81       	ldd	r24, Z+2	; 0x02
    2406:	93 81       	ldd	r25, Z+3	; 0x03
    2408:	0c 5f       	subi	r16, 0xFC	; 252
    240a:	1f 4f       	sbci	r17, 0xFF	; 255
    240c:	08 c0       	rjmp	.+16     	; 0x241e <vfprintf+0x1f6>
    240e:	60 81       	ld	r22, Z
    2410:	71 81       	ldd	r23, Z+1	; 0x01
    2412:	07 2e       	mov	r0, r23
    2414:	00 0c       	add	r0, r0
    2416:	88 0b       	sbc	r24, r24
    2418:	99 0b       	sbc	r25, r25
    241a:	0e 5f       	subi	r16, 0xFE	; 254
    241c:	1f 4f       	sbci	r17, 0xFF	; 255
    241e:	f3 2d       	mov	r31, r3
    2420:	ff 76       	andi	r31, 0x6F	; 111
    2422:	3f 2e       	mov	r3, r31
    2424:	97 ff       	sbrs	r25, 7
    2426:	09 c0       	rjmp	.+18     	; 0x243a <vfprintf+0x212>
    2428:	90 95       	com	r25
    242a:	80 95       	com	r24
    242c:	70 95       	com	r23
    242e:	61 95       	neg	r22
    2430:	7f 4f       	sbci	r23, 0xFF	; 255
    2432:	8f 4f       	sbci	r24, 0xFF	; 255
    2434:	9f 4f       	sbci	r25, 0xFF	; 255
    2436:	f0 68       	ori	r31, 0x80	; 128
    2438:	3f 2e       	mov	r3, r31
    243a:	2a e0       	ldi	r18, 0x0A	; 10
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	a3 01       	movw	r20, r6
    2440:	0e 94 47 13 	call	0x268e	; 0x268e <__ultoa_invert>
    2444:	88 2e       	mov	r8, r24
    2446:	86 18       	sub	r8, r6
    2448:	45 c0       	rjmp	.+138    	; 0x24d4 <vfprintf+0x2ac>
    244a:	85 37       	cpi	r24, 0x75	; 117
    244c:	31 f4       	brne	.+12     	; 0x245a <vfprintf+0x232>
    244e:	23 2d       	mov	r18, r3
    2450:	2f 7e       	andi	r18, 0xEF	; 239
    2452:	b2 2e       	mov	r11, r18
    2454:	2a e0       	ldi	r18, 0x0A	; 10
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	25 c0       	rjmp	.+74     	; 0x24a4 <vfprintf+0x27c>
    245a:	93 2d       	mov	r25, r3
    245c:	99 7f       	andi	r25, 0xF9	; 249
    245e:	b9 2e       	mov	r11, r25
    2460:	8f 36       	cpi	r24, 0x6F	; 111
    2462:	c1 f0       	breq	.+48     	; 0x2494 <vfprintf+0x26c>
    2464:	18 f4       	brcc	.+6      	; 0x246c <vfprintf+0x244>
    2466:	88 35       	cpi	r24, 0x58	; 88
    2468:	79 f0       	breq	.+30     	; 0x2488 <vfprintf+0x260>
    246a:	b5 c0       	rjmp	.+362    	; 0x25d6 <vfprintf+0x3ae>
    246c:	80 37       	cpi	r24, 0x70	; 112
    246e:	19 f0       	breq	.+6      	; 0x2476 <vfprintf+0x24e>
    2470:	88 37       	cpi	r24, 0x78	; 120
    2472:	21 f0       	breq	.+8      	; 0x247c <vfprintf+0x254>
    2474:	b0 c0       	rjmp	.+352    	; 0x25d6 <vfprintf+0x3ae>
    2476:	e9 2f       	mov	r30, r25
    2478:	e0 61       	ori	r30, 0x10	; 16
    247a:	be 2e       	mov	r11, r30
    247c:	b4 fe       	sbrs	r11, 4
    247e:	0d c0       	rjmp	.+26     	; 0x249a <vfprintf+0x272>
    2480:	fb 2d       	mov	r31, r11
    2482:	f4 60       	ori	r31, 0x04	; 4
    2484:	bf 2e       	mov	r11, r31
    2486:	09 c0       	rjmp	.+18     	; 0x249a <vfprintf+0x272>
    2488:	34 fe       	sbrs	r3, 4
    248a:	0a c0       	rjmp	.+20     	; 0x24a0 <vfprintf+0x278>
    248c:	29 2f       	mov	r18, r25
    248e:	26 60       	ori	r18, 0x06	; 6
    2490:	b2 2e       	mov	r11, r18
    2492:	06 c0       	rjmp	.+12     	; 0x24a0 <vfprintf+0x278>
    2494:	28 e0       	ldi	r18, 0x08	; 8
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	05 c0       	rjmp	.+10     	; 0x24a4 <vfprintf+0x27c>
    249a:	20 e1       	ldi	r18, 0x10	; 16
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <vfprintf+0x27c>
    24a0:	20 e1       	ldi	r18, 0x10	; 16
    24a2:	32 e0       	ldi	r19, 0x02	; 2
    24a4:	f8 01       	movw	r30, r16
    24a6:	b7 fe       	sbrs	r11, 7
    24a8:	07 c0       	rjmp	.+14     	; 0x24b8 <vfprintf+0x290>
    24aa:	60 81       	ld	r22, Z
    24ac:	71 81       	ldd	r23, Z+1	; 0x01
    24ae:	82 81       	ldd	r24, Z+2	; 0x02
    24b0:	93 81       	ldd	r25, Z+3	; 0x03
    24b2:	0c 5f       	subi	r16, 0xFC	; 252
    24b4:	1f 4f       	sbci	r17, 0xFF	; 255
    24b6:	06 c0       	rjmp	.+12     	; 0x24c4 <vfprintf+0x29c>
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	0e 5f       	subi	r16, 0xFE	; 254
    24c2:	1f 4f       	sbci	r17, 0xFF	; 255
    24c4:	a3 01       	movw	r20, r6
    24c6:	0e 94 47 13 	call	0x268e	; 0x268e <__ultoa_invert>
    24ca:	88 2e       	mov	r8, r24
    24cc:	86 18       	sub	r8, r6
    24ce:	fb 2d       	mov	r31, r11
    24d0:	ff 77       	andi	r31, 0x7F	; 127
    24d2:	3f 2e       	mov	r3, r31
    24d4:	36 fe       	sbrs	r3, 6
    24d6:	0d c0       	rjmp	.+26     	; 0x24f2 <vfprintf+0x2ca>
    24d8:	23 2d       	mov	r18, r3
    24da:	2e 7f       	andi	r18, 0xFE	; 254
    24dc:	a2 2e       	mov	r10, r18
    24de:	89 14       	cp	r8, r9
    24e0:	58 f4       	brcc	.+22     	; 0x24f8 <vfprintf+0x2d0>
    24e2:	34 fe       	sbrs	r3, 4
    24e4:	0b c0       	rjmp	.+22     	; 0x24fc <vfprintf+0x2d4>
    24e6:	32 fc       	sbrc	r3, 2
    24e8:	09 c0       	rjmp	.+18     	; 0x24fc <vfprintf+0x2d4>
    24ea:	83 2d       	mov	r24, r3
    24ec:	8e 7e       	andi	r24, 0xEE	; 238
    24ee:	a8 2e       	mov	r10, r24
    24f0:	05 c0       	rjmp	.+10     	; 0x24fc <vfprintf+0x2d4>
    24f2:	b8 2c       	mov	r11, r8
    24f4:	a3 2c       	mov	r10, r3
    24f6:	03 c0       	rjmp	.+6      	; 0x24fe <vfprintf+0x2d6>
    24f8:	b8 2c       	mov	r11, r8
    24fa:	01 c0       	rjmp	.+2      	; 0x24fe <vfprintf+0x2d6>
    24fc:	b9 2c       	mov	r11, r9
    24fe:	a4 fe       	sbrs	r10, 4
    2500:	0f c0       	rjmp	.+30     	; 0x2520 <vfprintf+0x2f8>
    2502:	fe 01       	movw	r30, r28
    2504:	e8 0d       	add	r30, r8
    2506:	f1 1d       	adc	r31, r1
    2508:	80 81       	ld	r24, Z
    250a:	80 33       	cpi	r24, 0x30	; 48
    250c:	21 f4       	brne	.+8      	; 0x2516 <vfprintf+0x2ee>
    250e:	9a 2d       	mov	r25, r10
    2510:	99 7e       	andi	r25, 0xE9	; 233
    2512:	a9 2e       	mov	r10, r25
    2514:	09 c0       	rjmp	.+18     	; 0x2528 <vfprintf+0x300>
    2516:	a2 fe       	sbrs	r10, 2
    2518:	06 c0       	rjmp	.+12     	; 0x2526 <vfprintf+0x2fe>
    251a:	b3 94       	inc	r11
    251c:	b3 94       	inc	r11
    251e:	04 c0       	rjmp	.+8      	; 0x2528 <vfprintf+0x300>
    2520:	8a 2d       	mov	r24, r10
    2522:	86 78       	andi	r24, 0x86	; 134
    2524:	09 f0       	breq	.+2      	; 0x2528 <vfprintf+0x300>
    2526:	b3 94       	inc	r11
    2528:	a3 fc       	sbrc	r10, 3
    252a:	11 c0       	rjmp	.+34     	; 0x254e <vfprintf+0x326>
    252c:	a0 fe       	sbrs	r10, 0
    252e:	06 c0       	rjmp	.+12     	; 0x253c <vfprintf+0x314>
    2530:	b2 14       	cp	r11, r2
    2532:	88 f4       	brcc	.+34     	; 0x2556 <vfprintf+0x32e>
    2534:	28 0c       	add	r2, r8
    2536:	92 2c       	mov	r9, r2
    2538:	9b 18       	sub	r9, r11
    253a:	0e c0       	rjmp	.+28     	; 0x2558 <vfprintf+0x330>
    253c:	b2 14       	cp	r11, r2
    253e:	60 f4       	brcc	.+24     	; 0x2558 <vfprintf+0x330>
    2540:	b6 01       	movw	r22, r12
    2542:	80 e2       	ldi	r24, 0x20	; 32
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	0e 94 0b 13 	call	0x2616	; 0x2616 <fputc>
    254a:	b3 94       	inc	r11
    254c:	f7 cf       	rjmp	.-18     	; 0x253c <vfprintf+0x314>
    254e:	b2 14       	cp	r11, r2
    2550:	18 f4       	brcc	.+6      	; 0x2558 <vfprintf+0x330>
    2552:	2b 18       	sub	r2, r11
    2554:	02 c0       	rjmp	.+4      	; 0x255a <vfprintf+0x332>
    2556:	98 2c       	mov	r9, r8
    2558:	21 2c       	mov	r2, r1
    255a:	a4 fe       	sbrs	r10, 4
    255c:	10 c0       	rjmp	.+32     	; 0x257e <vfprintf+0x356>
    255e:	b6 01       	movw	r22, r12
    2560:	80 e3       	ldi	r24, 0x30	; 48
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	0e 94 0b 13 	call	0x2616	; 0x2616 <fputc>
    2568:	a2 fe       	sbrs	r10, 2
    256a:	17 c0       	rjmp	.+46     	; 0x259a <vfprintf+0x372>
    256c:	a1 fc       	sbrc	r10, 1
    256e:	03 c0       	rjmp	.+6      	; 0x2576 <vfprintf+0x34e>
    2570:	88 e7       	ldi	r24, 0x78	; 120
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	02 c0       	rjmp	.+4      	; 0x257a <vfprintf+0x352>
    2576:	88 e5       	ldi	r24, 0x58	; 88
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	b6 01       	movw	r22, r12
    257c:	0c c0       	rjmp	.+24     	; 0x2596 <vfprintf+0x36e>
    257e:	8a 2d       	mov	r24, r10
    2580:	86 78       	andi	r24, 0x86	; 134
    2582:	59 f0       	breq	.+22     	; 0x259a <vfprintf+0x372>
    2584:	a1 fe       	sbrs	r10, 1
    2586:	02 c0       	rjmp	.+4      	; 0x258c <vfprintf+0x364>
    2588:	8b e2       	ldi	r24, 0x2B	; 43
    258a:	01 c0       	rjmp	.+2      	; 0x258e <vfprintf+0x366>
    258c:	80 e2       	ldi	r24, 0x20	; 32
    258e:	a7 fc       	sbrc	r10, 7
    2590:	8d e2       	ldi	r24, 0x2D	; 45
    2592:	b6 01       	movw	r22, r12
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	0e 94 0b 13 	call	0x2616	; 0x2616 <fputc>
    259a:	89 14       	cp	r8, r9
    259c:	38 f4       	brcc	.+14     	; 0x25ac <vfprintf+0x384>
    259e:	b6 01       	movw	r22, r12
    25a0:	80 e3       	ldi	r24, 0x30	; 48
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	0e 94 0b 13 	call	0x2616	; 0x2616 <fputc>
    25a8:	9a 94       	dec	r9
    25aa:	f7 cf       	rjmp	.-18     	; 0x259a <vfprintf+0x372>
    25ac:	8a 94       	dec	r8
    25ae:	f3 01       	movw	r30, r6
    25b0:	e8 0d       	add	r30, r8
    25b2:	f1 1d       	adc	r31, r1
    25b4:	80 81       	ld	r24, Z
    25b6:	b6 01       	movw	r22, r12
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	0e 94 0b 13 	call	0x2616	; 0x2616 <fputc>
    25be:	81 10       	cpse	r8, r1
    25c0:	f5 cf       	rjmp	.-22     	; 0x25ac <vfprintf+0x384>
    25c2:	22 20       	and	r2, r2
    25c4:	09 f4       	brne	.+2      	; 0x25c8 <vfprintf+0x3a0>
    25c6:	42 ce       	rjmp	.-892    	; 0x224c <vfprintf+0x24>
    25c8:	b6 01       	movw	r22, r12
    25ca:	80 e2       	ldi	r24, 0x20	; 32
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	0e 94 0b 13 	call	0x2616	; 0x2616 <fputc>
    25d2:	2a 94       	dec	r2
    25d4:	f6 cf       	rjmp	.-20     	; 0x25c2 <vfprintf+0x39a>
    25d6:	f6 01       	movw	r30, r12
    25d8:	86 81       	ldd	r24, Z+6	; 0x06
    25da:	97 81       	ldd	r25, Z+7	; 0x07
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <vfprintf+0x3ba>
    25de:	8f ef       	ldi	r24, 0xFF	; 255
    25e0:	9f ef       	ldi	r25, 0xFF	; 255
    25e2:	2b 96       	adiw	r28, 0x0b	; 11
    25e4:	e2 e1       	ldi	r30, 0x12	; 18
    25e6:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__epilogue_restores__>

000025ea <strnlen_P>:
    25ea:	fc 01       	movw	r30, r24
    25ec:	05 90       	lpm	r0, Z+
    25ee:	61 50       	subi	r22, 0x01	; 1
    25f0:	70 40       	sbci	r23, 0x00	; 0
    25f2:	01 10       	cpse	r0, r1
    25f4:	d8 f7       	brcc	.-10     	; 0x25ec <strnlen_P+0x2>
    25f6:	80 95       	com	r24
    25f8:	90 95       	com	r25
    25fa:	8e 0f       	add	r24, r30
    25fc:	9f 1f       	adc	r25, r31
    25fe:	08 95       	ret

00002600 <strnlen>:
    2600:	fc 01       	movw	r30, r24
    2602:	61 50       	subi	r22, 0x01	; 1
    2604:	70 40       	sbci	r23, 0x00	; 0
    2606:	01 90       	ld	r0, Z+
    2608:	01 10       	cpse	r0, r1
    260a:	d8 f7       	brcc	.-10     	; 0x2602 <strnlen+0x2>
    260c:	80 95       	com	r24
    260e:	90 95       	com	r25
    2610:	8e 0f       	add	r24, r30
    2612:	9f 1f       	adc	r25, r31
    2614:	08 95       	ret

00002616 <fputc>:
    2616:	0f 93       	push	r16
    2618:	1f 93       	push	r17
    261a:	cf 93       	push	r28
    261c:	df 93       	push	r29
    261e:	fb 01       	movw	r30, r22
    2620:	23 81       	ldd	r18, Z+3	; 0x03
    2622:	21 fd       	sbrc	r18, 1
    2624:	03 c0       	rjmp	.+6      	; 0x262c <fputc+0x16>
    2626:	8f ef       	ldi	r24, 0xFF	; 255
    2628:	9f ef       	ldi	r25, 0xFF	; 255
    262a:	2c c0       	rjmp	.+88     	; 0x2684 <fputc+0x6e>
    262c:	22 ff       	sbrs	r18, 2
    262e:	16 c0       	rjmp	.+44     	; 0x265c <fputc+0x46>
    2630:	46 81       	ldd	r20, Z+6	; 0x06
    2632:	57 81       	ldd	r21, Z+7	; 0x07
    2634:	24 81       	ldd	r18, Z+4	; 0x04
    2636:	35 81       	ldd	r19, Z+5	; 0x05
    2638:	42 17       	cp	r20, r18
    263a:	53 07       	cpc	r21, r19
    263c:	44 f4       	brge	.+16     	; 0x264e <fputc+0x38>
    263e:	a0 81       	ld	r26, Z
    2640:	b1 81       	ldd	r27, Z+1	; 0x01
    2642:	9d 01       	movw	r18, r26
    2644:	2f 5f       	subi	r18, 0xFF	; 255
    2646:	3f 4f       	sbci	r19, 0xFF	; 255
    2648:	31 83       	std	Z+1, r19	; 0x01
    264a:	20 83       	st	Z, r18
    264c:	8c 93       	st	X, r24
    264e:	26 81       	ldd	r18, Z+6	; 0x06
    2650:	37 81       	ldd	r19, Z+7	; 0x07
    2652:	2f 5f       	subi	r18, 0xFF	; 255
    2654:	3f 4f       	sbci	r19, 0xFF	; 255
    2656:	37 83       	std	Z+7, r19	; 0x07
    2658:	26 83       	std	Z+6, r18	; 0x06
    265a:	14 c0       	rjmp	.+40     	; 0x2684 <fputc+0x6e>
    265c:	8b 01       	movw	r16, r22
    265e:	ec 01       	movw	r28, r24
    2660:	fb 01       	movw	r30, r22
    2662:	00 84       	ldd	r0, Z+8	; 0x08
    2664:	f1 85       	ldd	r31, Z+9	; 0x09
    2666:	e0 2d       	mov	r30, r0
    2668:	09 95       	icall
    266a:	89 2b       	or	r24, r25
    266c:	e1 f6       	brne	.-72     	; 0x2626 <fputc+0x10>
    266e:	d8 01       	movw	r26, r16
    2670:	16 96       	adiw	r26, 0x06	; 6
    2672:	8d 91       	ld	r24, X+
    2674:	9c 91       	ld	r25, X
    2676:	17 97       	sbiw	r26, 0x07	; 7
    2678:	01 96       	adiw	r24, 0x01	; 1
    267a:	17 96       	adiw	r26, 0x07	; 7
    267c:	9c 93       	st	X, r25
    267e:	8e 93       	st	-X, r24
    2680:	16 97       	sbiw	r26, 0x06	; 6
    2682:	ce 01       	movw	r24, r28
    2684:	df 91       	pop	r29
    2686:	cf 91       	pop	r28
    2688:	1f 91       	pop	r17
    268a:	0f 91       	pop	r16
    268c:	08 95       	ret

0000268e <__ultoa_invert>:
    268e:	fa 01       	movw	r30, r20
    2690:	aa 27       	eor	r26, r26
    2692:	28 30       	cpi	r18, 0x08	; 8
    2694:	51 f1       	breq	.+84     	; 0x26ea <__ultoa_invert+0x5c>
    2696:	20 31       	cpi	r18, 0x10	; 16
    2698:	81 f1       	breq	.+96     	; 0x26fa <__ultoa_invert+0x6c>
    269a:	e8 94       	clt
    269c:	6f 93       	push	r22
    269e:	6e 7f       	andi	r22, 0xFE	; 254
    26a0:	6e 5f       	subi	r22, 0xFE	; 254
    26a2:	7f 4f       	sbci	r23, 0xFF	; 255
    26a4:	8f 4f       	sbci	r24, 0xFF	; 255
    26a6:	9f 4f       	sbci	r25, 0xFF	; 255
    26a8:	af 4f       	sbci	r26, 0xFF	; 255
    26aa:	b1 e0       	ldi	r27, 0x01	; 1
    26ac:	3e d0       	rcall	.+124    	; 0x272a <__ultoa_invert+0x9c>
    26ae:	b4 e0       	ldi	r27, 0x04	; 4
    26b0:	3c d0       	rcall	.+120    	; 0x272a <__ultoa_invert+0x9c>
    26b2:	67 0f       	add	r22, r23
    26b4:	78 1f       	adc	r23, r24
    26b6:	89 1f       	adc	r24, r25
    26b8:	9a 1f       	adc	r25, r26
    26ba:	a1 1d       	adc	r26, r1
    26bc:	68 0f       	add	r22, r24
    26be:	79 1f       	adc	r23, r25
    26c0:	8a 1f       	adc	r24, r26
    26c2:	91 1d       	adc	r25, r1
    26c4:	a1 1d       	adc	r26, r1
    26c6:	6a 0f       	add	r22, r26
    26c8:	71 1d       	adc	r23, r1
    26ca:	81 1d       	adc	r24, r1
    26cc:	91 1d       	adc	r25, r1
    26ce:	a1 1d       	adc	r26, r1
    26d0:	20 d0       	rcall	.+64     	; 0x2712 <__ultoa_invert+0x84>
    26d2:	09 f4       	brne	.+2      	; 0x26d6 <__ultoa_invert+0x48>
    26d4:	68 94       	set
    26d6:	3f 91       	pop	r19
    26d8:	2a e0       	ldi	r18, 0x0A	; 10
    26da:	26 9f       	mul	r18, r22
    26dc:	11 24       	eor	r1, r1
    26de:	30 19       	sub	r19, r0
    26e0:	30 5d       	subi	r19, 0xD0	; 208
    26e2:	31 93       	st	Z+, r19
    26e4:	de f6       	brtc	.-74     	; 0x269c <__ultoa_invert+0xe>
    26e6:	cf 01       	movw	r24, r30
    26e8:	08 95       	ret
    26ea:	46 2f       	mov	r20, r22
    26ec:	47 70       	andi	r20, 0x07	; 7
    26ee:	40 5d       	subi	r20, 0xD0	; 208
    26f0:	41 93       	st	Z+, r20
    26f2:	b3 e0       	ldi	r27, 0x03	; 3
    26f4:	0f d0       	rcall	.+30     	; 0x2714 <__ultoa_invert+0x86>
    26f6:	c9 f7       	brne	.-14     	; 0x26ea <__ultoa_invert+0x5c>
    26f8:	f6 cf       	rjmp	.-20     	; 0x26e6 <__ultoa_invert+0x58>
    26fa:	46 2f       	mov	r20, r22
    26fc:	4f 70       	andi	r20, 0x0F	; 15
    26fe:	40 5d       	subi	r20, 0xD0	; 208
    2700:	4a 33       	cpi	r20, 0x3A	; 58
    2702:	18 f0       	brcs	.+6      	; 0x270a <__ultoa_invert+0x7c>
    2704:	49 5d       	subi	r20, 0xD9	; 217
    2706:	31 fd       	sbrc	r19, 1
    2708:	40 52       	subi	r20, 0x20	; 32
    270a:	41 93       	st	Z+, r20
    270c:	02 d0       	rcall	.+4      	; 0x2712 <__ultoa_invert+0x84>
    270e:	a9 f7       	brne	.-22     	; 0x26fa <__ultoa_invert+0x6c>
    2710:	ea cf       	rjmp	.-44     	; 0x26e6 <__ultoa_invert+0x58>
    2712:	b4 e0       	ldi	r27, 0x04	; 4
    2714:	a6 95       	lsr	r26
    2716:	97 95       	ror	r25
    2718:	87 95       	ror	r24
    271a:	77 95       	ror	r23
    271c:	67 95       	ror	r22
    271e:	ba 95       	dec	r27
    2720:	c9 f7       	brne	.-14     	; 0x2714 <__ultoa_invert+0x86>
    2722:	00 97       	sbiw	r24, 0x00	; 0
    2724:	61 05       	cpc	r22, r1
    2726:	71 05       	cpc	r23, r1
    2728:	08 95       	ret
    272a:	9b 01       	movw	r18, r22
    272c:	ac 01       	movw	r20, r24
    272e:	0a 2e       	mov	r0, r26
    2730:	06 94       	lsr	r0
    2732:	57 95       	ror	r21
    2734:	47 95       	ror	r20
    2736:	37 95       	ror	r19
    2738:	27 95       	ror	r18
    273a:	ba 95       	dec	r27
    273c:	c9 f7       	brne	.-14     	; 0x2730 <__ultoa_invert+0xa2>
    273e:	62 0f       	add	r22, r18
    2740:	73 1f       	adc	r23, r19
    2742:	84 1f       	adc	r24, r20
    2744:	95 1f       	adc	r25, r21
    2746:	a0 1d       	adc	r26, r0
    2748:	08 95       	ret

0000274a <__prologue_saves__>:
    274a:	2f 92       	push	r2
    274c:	3f 92       	push	r3
    274e:	4f 92       	push	r4
    2750:	5f 92       	push	r5
    2752:	6f 92       	push	r6
    2754:	7f 92       	push	r7
    2756:	8f 92       	push	r8
    2758:	9f 92       	push	r9
    275a:	af 92       	push	r10
    275c:	bf 92       	push	r11
    275e:	cf 92       	push	r12
    2760:	df 92       	push	r13
    2762:	ef 92       	push	r14
    2764:	ff 92       	push	r15
    2766:	0f 93       	push	r16
    2768:	1f 93       	push	r17
    276a:	cf 93       	push	r28
    276c:	df 93       	push	r29
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	ca 1b       	sub	r28, r26
    2774:	db 0b       	sbc	r29, r27
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	09 94       	ijmp

00002782 <__epilogue_restores__>:
    2782:	2a 88       	ldd	r2, Y+18	; 0x12
    2784:	39 88       	ldd	r3, Y+17	; 0x11
    2786:	48 88       	ldd	r4, Y+16	; 0x10
    2788:	5f 84       	ldd	r5, Y+15	; 0x0f
    278a:	6e 84       	ldd	r6, Y+14	; 0x0e
    278c:	7d 84       	ldd	r7, Y+13	; 0x0d
    278e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2790:	9b 84       	ldd	r9, Y+11	; 0x0b
    2792:	aa 84       	ldd	r10, Y+10	; 0x0a
    2794:	b9 84       	ldd	r11, Y+9	; 0x09
    2796:	c8 84       	ldd	r12, Y+8	; 0x08
    2798:	df 80       	ldd	r13, Y+7	; 0x07
    279a:	ee 80       	ldd	r14, Y+6	; 0x06
    279c:	fd 80       	ldd	r15, Y+5	; 0x05
    279e:	0c 81       	ldd	r16, Y+4	; 0x04
    27a0:	1b 81       	ldd	r17, Y+3	; 0x03
    27a2:	aa 81       	ldd	r26, Y+2	; 0x02
    27a4:	b9 81       	ldd	r27, Y+1	; 0x01
    27a6:	ce 0f       	add	r28, r30
    27a8:	d1 1d       	adc	r29, r1
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	f8 94       	cli
    27ae:	de bf       	out	0x3e, r29	; 62
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	cd bf       	out	0x3d, r28	; 61
    27b4:	ed 01       	movw	r28, r26
    27b6:	08 95       	ret

000027b8 <_exit>:
    27b8:	f8 94       	cli

000027ba <__stop_program>:
    27ba:	ff cf       	rjmp	.-2      	; 0x27ba <__stop_program>
