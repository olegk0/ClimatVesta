#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include "vars.h"
#include <math.h>
#include <unistd.h>

#define IN_ADC_T_FROST  1
#define IN_ADC_T_SALON  2


void int_to_uart(char *id, int16_t num)
{
    printf("%s:%d;",id, num);
}

void float_to_uart(char *id, float num)
{
    printf("%s:%f;",id, num);
}

void uart_nl(void)
{
    putchar('\n');
}

float check_rangef(float min, float in, float max)
{
    if (in > max)
        in = max;
    if (in < min)
        in = min;
    return in;
}

int16_t check_range(int16_t min, int16_t in, int16_t max)
{
    if (in > max)
        in = max;
    if (in < min)
        in = min;
    return in;
}

void delay_ms(int ms)
{
    usleep(ms*1000);
}
//*************************************************************************************

void calcCond(void)
{
}

void calcVent(float delta, float id)
{
}

void switch_cond(char on)
{
}

static int cvent=0;
static int ctemp=0;
void switch_vent(int8_t up)
{
//    printf("switch_vent:%d\n",up);
    if(up)
	cvent++;
    else
	cvent--;

    if(cvent < 0)
	cvent=0;
    if(cvent > 8)
	cvent=8;

}

void switch_temp(int8_t up)
{
//    printf("switch_temp:%d\n",up);
    if(up)
	ctemp++;
    else
	ctemp--;

    if(ctemp < 0)
	ctemp=0;
    if(ctemp > 15)
	ctemp=15;

}

uint8_t prc2Seg(uint8_t segs, uint8_t prc)
{
    prc = check_range(0, prc, 100);
    uint16_t tmp = (segs * prc + segs) / 100;
    return tmp;
}

uint8_t seg2Prc(uint8_t segs, uint8_t seg)
{
    //seg = check_range(0, seg, segs);
    uint16_t tmp = (seg * 100) / segs;
    return tmp;
}


void calcVal(void)
{
    calcCond();

    int_to_uart("Ti", Ti);
    int_to_uart("Ts", Ts);
    int_to_uart("St", vars.setup_temp);
    float_to_uart("lD", last_delta);
    float delta = (float) vars.setup_temp;
    delta = check_rangef(-40.0, delta - Ts, 40.0);
    if (fabs(delta) < 0.2) {
    delta = 0.0;
    }
    float_to_uart("Dt", delta);
    float id = delta - last_delta;
    last_delta = delta;
    float_to_uart("Id", id);

    Ipid += delta;

    float pid = (delta + (Ipid * ((float) PID_I_KFC) / 100.0) + (id * ((float) PID_D_KFC) / 100.0))
        * (float) vars.pid_P_kfc;

    float_to_uart("Ip", Ipid);
    float_to_uart("pid", pid);
/*
    if (!(pid > 100.0 && delta > 0.0)) {
    if (!(pid < 0.0 && delta < 0.0)) {
        Ipid += delta;
    }
    }
*/

    temp_out_delay++;
    if (temp_out_delay > vars.temp_seg_delay) {
    temp_out_delay = 0;
    temp_out_prc = (check_rangef(0, pid, 101) + temp_out_prc) / 2;
    }

    int_to_uart("out", temp_out_prc);

    calcVent(delta, id);

    uart_nl();
}

void set_vent_seg(uint8_t seg_vent, int8_t full_sync)
{
    seg_vent = check_range(0, seg_vent, VENT_SEG);

    if (seg_vent == 0) { //add sync
    switch_vent(0);
    switch_cond(0); // выключаем кондиционер
    } else if (seg_vent == VENT_SEG) {
    switch_vent(1);
    }

    if (vent_seg_cur != seg_vent) {
    uint8_t seg_v = seg_vent;
    if (full_sync) {
        for (uint8_t i = 0; i < vent_seg_cur + 2; i++) {
	switch_vent(0);
        }
        delay_ms(50);
        for (uint8_t i = 0; i < seg_vent; i++) {
	switch_vent(1);
        }
    } else {
        int8_t up = 0;
        if (seg_vent > vent_seg_cur) {
	seg_vent = seg_vent - vent_seg_cur; // delta
	up = 1;
        } else {
	seg_vent = vent_seg_cur - seg_vent; // delta
        }
        for (uint8_t i = 0; i < seg_vent; i++) {
	switch_vent(up);
        }
    }
    vent_seg_cur = seg_v;
    }

 //  printf("switch_vent:%d\n",cvent);
}

void set_vent_prc(uint8_t prc, int8_t full_sync)
{
    uint8_t seg_vent = prc2Seg(VENT_SEG, prc);
    set_vent_seg(seg_vent, full_sync);
}


void set_temp(uint8_t prc, int8_t full_sync)
{
    uint8_t seg_temp = prc2Seg(TEMP_SEG, prc);

    if (seg_temp == 0) { //add sync
    switch_temp(0);
    } else if (seg_temp == TEMP_SEG) {
    switch_temp(1);
    }

    if (temp_seg_cur != seg_temp) {
    uint8_t seg_t = seg_temp;
    if (full_sync) {
        int8_t up = (temp_seg_cur > TEMP_SEG / 2);
        for (uint8_t i = 0; i < TEMP_SEG / 2 + 2; i++) {
	switch_temp(up);
        }
        if (up) {
	seg_temp = TEMP_SEG - seg_temp;
        }
        up = !up;
        delay_ms(50);
        for (uint8_t i = 0; i < seg_temp; i++) {
	switch_temp(up);
        }
    } else {
        int8_t up = 0;
        if (seg_temp > temp_seg_cur) {
	seg_temp = seg_temp - temp_seg_cur; // delta
	up = 1;
        } else {
	seg_temp = temp_seg_cur - seg_temp; // delta
        }
        for (uint8_t i = 0; i < seg_temp; i++) {
	switch_temp(up);
        }
    }
    temp_seg_cur = seg_t;
    }
//    printf("switch_temp:%d\n",ctemp);
}


float calcTemp(char ch)
{
    switch(ch){
    case IN_ADC_T_FROST:
	return -13.0;
	break;
    case IN_ADC_T_SALON:
	if(Ts < 16)
	    return Ts +1.0;
	else
	    return Ts;
	break;
    }
    return 0;
}

int main(void){

    int ret=0;
    Ti=-13.0;
    Ts=2;

    vars.setup_temp = 20;
    vars.vent_nom_seg = 4;
    vars.temp_seg = 2;
    vars.wmode = wmode_auto;
    vars.const_cnd_frost_t = COND_T_FROST;
    vars.pid_P_kfc = PID_P_KFC;
    vars.vent_var_kfc = VENT_VAR_KFC;
    vars.temp_seg_delay = TEMP_OUT_DELAY;
    vars.cond_enabled = 0;
    vars.auto_defrost = 3;


    int time_cnt=0;
    int disp_num;
    int disp_bar;
    printf("******begin************\n");

    for(int c=0;c< 600;c++){


	    switch (time_cnt) {
	    case 0:
//	    setup_display();
	    time_cnt++;
	    break;
	    case 1 ... 6:
	    break;
	    case 7:
	    Ti = calcTemp(IN_ADC_T_FROST);
	    time_cnt = 8;
	    break;
	    case 8:
	    break;
	    case 9:
	    Ts = calcTemp(IN_ADC_T_SALON);
	    float t = Ts + 0.4;
	    disp_num = t;
	    time_cnt++;
	    break;
	    case 10:
	    break;
	    case 11: //calc
	    calcVal();
	    time_cnt++;
	    break;
	    case 12:
	    break;
	    case 13:
	    set_temp(temp_out_prc, 1);
	    time_cnt++;
	    break;
	    case 14:
	    break;
	    case 15:
	    set_vent_prc(vent_add_prc, 1);
	    disp_bar = vent_seg_cur;
	    time_cnt++;
	    break;
	    default: //  цикл
	    time_cnt = 0;
//	printf("time:%dc  %dm\n",c*10, c/6);
	    }

        time_cnt++;
    }

}