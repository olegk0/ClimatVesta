
main.elf:     формат файла elf32-avr

Разделы:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000012be  00001352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  008000a0  008000a0  00001392  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001392  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001430  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a40  00000000  00000000  00002878  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e1  00000000  00000000  000032b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  0000399c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000637  00000000  00000000  00003cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008bc  00000000  00000000  00004313  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00004bcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Дизассемблирование раздела .text:

00000000 <__vectors>:
       0:	3f c0       	rjmp	.+126    	; 0x80 <__ctors_end>
       2:	59 c0       	rjmp	.+178    	; 0xb6 <__bad_interrupt>
       4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
       6:	57 c0       	rjmp	.+174    	; 0xb6 <__bad_interrupt>
       8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
       a:	55 c0       	rjmp	.+170    	; 0xb6 <__bad_interrupt>
       c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
       e:	53 c0       	rjmp	.+166    	; 0xb6 <__bad_interrupt>
      10:	96 c0       	rjmp	.+300    	; 0x13e <__vector_8>
      12:	51 c0       	rjmp	.+162    	; 0xb6 <__bad_interrupt>
      14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
      16:	4f c0       	rjmp	.+158    	; 0xb6 <__bad_interrupt>
      18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
      1a:	4d c0       	rjmp	.+154    	; 0xb6 <__bad_interrupt>
      1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
      1e:	4b c0       	rjmp	.+150    	; 0xb6 <__bad_interrupt>
      20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
      22:	49 c0       	rjmp	.+146    	; 0xb6 <__bad_interrupt>
      24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
      26:	08 00       	.word	0x0008	; ????
      28:	00 00       	nop
      2a:	be 92       	st	-X, r11
      2c:	24 49       	sbci	r18, 0x94	; 148
      2e:	12 3e       	cpi	r17, 0xE2	; 226
      30:	ab aa       	std	Y+51, r10	; 0x33
      32:	aa 2a       	or	r10, r26
      34:	be cd       	rjmp	.-1156   	; 0xfffffbb2 <__eeprom_end+0xff7efbb2>
      36:	cc cc       	rjmp	.-1640   	; 0xfffff9d0 <__eeprom_end+0xff7ef9d0>
      38:	4c 3e       	cpi	r20, 0xEC	; 236
      3a:	00 00       	nop
      3c:	00 80       	ld	r0, Z
      3e:	be ab       	std	Y+54, r27	; 0x36
      40:	aa aa       	std	Y+50, r10	; 0x32
      42:	aa 3e       	cpi	r26, 0xEA	; 234
      44:	00 00       	nop
      46:	00 00       	nop
      48:	bf 00       	.word	0x00bf	; ????
      4a:	00 00       	nop
      4c:	80 3f       	cpi	r24, 0xF0	; 240
      4e:	00 00       	nop
      50:	00 00       	nop
      52:	00 08       	sbc	r0, r0
      54:	41 78       	andi	r20, 0x81	; 129
      56:	d3 bb       	out	0x13, r29	; 19
      58:	43 87       	std	Z+11, r20	; 0x0b
      5a:	d1 13       	cpse	r29, r17
      5c:	3d 19       	sub	r19, r13
      5e:	0e 3c       	cpi	r16, 0xCE	; 206
      60:	c3 bd       	out	0x23, r28	; 35
      62:	42 82       	std	Z+2, r4	; 0x02
      64:	ad 2b       	or	r26, r29
      66:	3e 68       	ori	r19, 0x8E	; 142
      68:	ec 82       	std	Y+4, r14	; 0x04
      6a:	76 be       	out	0x36, r7	; 54
      6c:	d9 8f       	std	Y+25, r29	; 0x19
      6e:	e1 a9       	ldd	r30, Z+49	; 0x31
      70:	3e 4c       	sbci	r19, 0xCE	; 206
      72:	80 ef       	ldi	r24, 0xF0	; 240
      74:	ff be       	out	0x3f, r15	; 63
      76:	01 c4       	rjmp	.+2050   	; 0x87a <__divsf3_pse+0x3a>
      78:	ff 7f       	andi	r31, 0xFF	; 255
      7a:	3f 00       	.word	0x003f	; ????
      7c:	00 00       	nop
      7e:	00 00       	nop

00000080 <__ctors_end>:
      80:	11 24       	eor	r1, r1
      82:	1f be       	out	0x3f, r1	; 63
      84:	cf e5       	ldi	r28, 0x5F	; 95
      86:	d4 e0       	ldi	r29, 0x04	; 4
      88:	de bf       	out	0x3e, r29	; 62
      8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
      8c:	10 e0       	ldi	r17, 0x00	; 0
      8e:	a0 e6       	ldi	r26, 0x60	; 96
      90:	b0 e0       	ldi	r27, 0x00	; 0
      92:	ee eb       	ldi	r30, 0xBE	; 190
      94:	f2 e1       	ldi	r31, 0x12	; 18
      96:	02 c0       	rjmp	.+4      	; 0x9c <__do_copy_data+0x10>
      98:	05 90       	lpm	r0, Z+
      9a:	0d 92       	st	X+, r0
      9c:	a0 3a       	cpi	r26, 0xA0	; 160
      9e:	b1 07       	cpc	r27, r17
      a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0xc>

000000a2 <__do_clear_bss>:
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	a0 ea       	ldi	r26, 0xA0	; 160
      a6:	b0 e0       	ldi	r27, 0x00	; 0
      a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
      aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
      ac:	a2 3c       	cpi	r26, 0xC2	; 194
      ae:	b2 07       	cpc	r27, r18
      b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
      b2:	cf d2       	rcall	.+1438   	; 0x652 <main>
      b4:	02 c9       	rjmp	.-3580   	; 0xfffff2ba <__eeprom_end+0xff7ef2ba>

000000b6 <__bad_interrupt>:
      b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <int_to_uart>:

#include "vars.h"
#include "subs.h"

void int_to_uart(char *id, int16_t num)
{
      b8:	0f 93       	push	r16
      ba:	1f 93       	push	r17
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29
      c0:	cd b7       	in	r28, 0x3d	; 61
      c2:	de b7       	in	r29, 0x3e	; 62
      c4:	2a 97       	sbiw	r28, 0x0a	; 10
      c6:	0f b6       	in	r0, 0x3f	; 63
      c8:	f8 94       	cli
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	0f be       	out	0x3f, r0	; 63
      ce:	cd bf       	out	0x3d, r28	; 61
      d0:	16 2f       	mov	r17, r22
      d2:	07 2f       	mov	r16, r23
//    struct m2bytes nbuf;
    //USART_PutChar('\x0d');
    USART_SendStr(id);
      d4:	b3 d2       	rcall	.+1382   	; 0x63c <USART_SendStr>
    USART_SendStr(":");
      d6:	80 e6       	ldi	r24, 0x60	; 96
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	b0 d2       	rcall	.+1376   	; 0x63c <USART_SendStr>
     num_to_str(&nbuf);
     USART_PutChar(nbuf.one);
     USART_PutChar(nbuf.two);
     */
    char buf[10];
    snprintf(buf, sizeof(buf), "%d", num);
      dc:	0f 93       	push	r16
      de:	1f 93       	push	r17
      e0:	82 e6       	ldi	r24, 0x62	; 98
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	9f 93       	push	r25
      e6:	8f 93       	push	r24
      e8:	1f 92       	push	r1
      ea:	8a e0       	ldi	r24, 0x0A	; 10
      ec:	8f 93       	push	r24
      ee:	8e 01       	movw	r16, r28
      f0:	0f 5f       	subi	r16, 0xFF	; 255
      f2:	1f 4f       	sbci	r17, 0xFF	; 255
      f4:	1f 93       	push	r17
      f6:	0f 93       	push	r16
      f8:	ca d5       	rcall	.+2964   	; 0xc8e <snprintf>
    USART_SendStr(buf);
      fa:	c8 01       	movw	r24, r16
      fc:	9f d2       	rcall	.+1342   	; 0x63c <USART_SendStr>
    USART_PutChar(';');
      fe:	8b e3       	ldi	r24, 0x3B	; 59
     100:	93 d2       	rcall	.+1318   	; 0x628 <USART_PutChar>
//    buf[cnt];
}
     102:	0f b6       	in	r0, 0x3f	; 63
     104:	f8 94       	cli
     106:	de bf       	out	0x3e, r29	; 62
     108:	0f be       	out	0x3f, r0	; 63
     10a:	cd bf       	out	0x3d, r28	; 61
     10c:	2a 96       	adiw	r28, 0x0a	; 10
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	f8 94       	cli
     112:	de bf       	out	0x3e, r29	; 62
     114:	0f be       	out	0x3f, r0	; 63
     116:	cd bf       	out	0x3d, r28	; 61
     118:	df 91       	pop	r29
     11a:	cf 91       	pop	r28
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	08 95       	ret

00000122 <float_to_uart>:

void float_to_uart(char *id, float num)
{
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	ec 01       	movw	r28, r24
    int_to_uart(id, num);
     128:	cb 01       	movw	r24, r22
     12a:	ba 01       	movw	r22, r20
     12c:	e2 d3       	rcall	.+1988   	; 0x8f2 <__fixsfsi>
     12e:	ce 01       	movw	r24, r28
     int8_t buf[10];
     int8_t cnt = snprintf(buf, sizeof(buf), "%g", num);
     USART_SendStr(buf);
     USART_Putint8_t(';');
     */
}
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
//    buf[cnt];
}

void float_to_uart(char *id, float num)
{
    int_to_uart(id, num);
     134:	c1 cf       	rjmp	.-126    	; 0xb8 <int_to_uart>

00000136 <uart_nl>:
     */
}

void uart_nl(void)
{
    USART_PutChar('\x0d');
     136:	8d e0       	ldi	r24, 0x0D	; 13
     138:	77 d2       	rcall	.+1262   	; 0x628 <USART_PutChar>
    USART_PutChar('\n');
     13a:	8a e0       	ldi	r24, 0x0A	; 10
     13c:	75 c2       	rjmp	.+1258   	; 0x628 <USART_PutChar>

0000013e <__vector_8>:
}

ISR( TIMER1_OVF_vect)
{
     13e:	1f 92       	push	r1
     140:	0f 92       	push	r0
     142:	0f b6       	in	r0, 0x3f	; 63
     144:	0f 92       	push	r0
     146:	11 24       	eor	r1, r1
     148:	8f 93       	push	r24
     14a:	9f 93       	push	r25
    cli();
     14c:	f8 94       	cli
    TCNT1 = 0x10000 - (F_CPU / 256);
     14e:	87 ef       	ldi	r24, 0xF7	; 247
     150:	92 ec       	ldi	r25, 0xC2	; 194
     152:	9d bd       	out	0x2d, r25	; 45
     154:	8c bd       	out	0x2c, r24	; 44

    SET_FLAG(f_e1sec);
     156:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <flags>
     15a:	81 60       	ori	r24, 0x01	; 1
     15c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <flags>

//    SET_BIT(time_flag, tf_dps_en);
    sei();
     160:	78 94       	sei
}
     162:	9f 91       	pop	r25
     164:	8f 91       	pop	r24
     166:	0f 90       	pop	r0
     168:	0f be       	out	0x3f, r0	; 63
     16a:	0f 90       	pop	r0
     16c:	1f 90       	pop	r1
     16e:	18 95       	reti

00000170 <getADC>:

float getADC()
{
     170:	cf 92       	push	r12
     172:	df 92       	push	r13
     174:	ef 92       	push	r14
     176:	ff 92       	push	r15
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	c6 e0       	ldi	r28, 0x06	; 6
     17e:	d0 e0       	ldi	r29, 0x00	; 0
    float resf = 0;
     180:	c1 2c       	mov	r12, r1
     182:	d1 2c       	mov	r13, r1
     184:	76 01       	movw	r14, r12
    for (int i = 0; i < ADC_MCNT; i++) {
	ADC_Start();
     186:	40 d2       	rcall	.+1152   	; 0x608 <ADC_Start>
	while (ADCIsRun())
     188:	36 99       	sbic	0x06, 6	; 6
     18a:	fe cf       	rjmp	.-4      	; 0x188 <getADC+0x18>
	    ;
	resf += ADC_GetData();
     18c:	3f d2       	rcall	.+1150   	; 0x60c <ADC_GetData>
     18e:	bc 01       	movw	r22, r24
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	df d3       	rcall	.+1982   	; 0x954 <__floatunsisf>
     196:	9b 01       	movw	r18, r22
     198:	ac 01       	movw	r20, r24
     19a:	c7 01       	movw	r24, r14
     19c:	b6 01       	movw	r22, r12
     19e:	d9 d2       	rcall	.+1458   	; 0x752 <__addsf3>
     1a0:	6b 01       	movw	r12, r22
     1a2:	7c 01       	movw	r14, r24
     1a4:	21 97       	sbiw	r28, 0x01	; 1
}

float getADC()
{
    float resf = 0;
    for (int i = 0; i < ADC_MCNT; i++) {
     1a6:	79 f7       	brne	.-34     	; 0x186 <getADC+0x16>
	    ;
	resf += ADC_GetData();
    }

    resf /= ADC_MCNT;
    return resf;
     1a8:	20 e0       	ldi	r18, 0x00	; 0
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	40 ec       	ldi	r20, 0xC0	; 192
     1ae:	50 e4       	ldi	r21, 0x40	; 64
     1b0:	38 d3       	rcall	.+1648   	; 0x822 <__divsf3>
}
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	ff 90       	pop	r15
     1b8:	ef 90       	pop	r14
     1ba:	df 90       	pop	r13
     1bc:	cf 90       	pop	r12
     1be:	08 95       	ret

000001c0 <calcTemp>:


float calcTemp(void)
{
    ADC_Mux(ADC6_Temp);
     1c0:	86 e0       	ldi	r24, 0x06	; 6
     1c2:	18 d2       	rcall	.+1072   	; 0x5f4 <ADC_Mux>
    float resf = getADC();
     1c4:	d5 df       	rcall	.-86     	; 0x170 <getADC>
     1c6:	9b 01       	movw	r18, r22
     1c8:	ac 01       	movw	r20, r24

    resf = 3132.0 / resf - 1;
     1ca:	60 e0       	ldi	r22, 0x00	; 0
     1cc:	70 ec       	ldi	r23, 0xC0	; 192
     1ce:	83 e4       	ldi	r24, 0x43	; 67
     1d0:	95 e4       	ldi	r25, 0x45	; 69
     1d2:	27 d3       	rcall	.+1614   	; 0x822 <__divsf3>
     1d4:	20 e0       	ldi	r18, 0x00	; 0
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	40 e8       	ldi	r20, 0x80	; 128
     1da:	5f e3       	ldi	r21, 0x3F	; 63
     1dc:	b9 d2       	rcall	.+1394   	; 0x750 <__subsf3>
     1de:	9b 01       	movw	r18, r22
     1e0:	ac 01       	movw	r20, r24
    resf = 100.0 / resf;

    resf = (TR_NTC_KFC * TR_NTC_T0_GRAD_K) / (TR_NTC_KFC + (TR_NTC_T0_GRAD_K * log(resf / TR_NTC_T0_RES_Kom))) - 273.15
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	88 ec       	ldi	r24, 0xC8	; 200
     1e8:	92 e4       	ldi	r25, 0x42	; 66
     1ea:	1b d3       	rcall	.+1590   	; 0x822 <__divsf3>
     1ec:	20 e0       	ldi	r18, 0x00	; 0
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	40 e6       	ldi	r20, 0x60	; 96
     1f2:	51 e4       	ldi	r21, 0x41	; 65
     1f4:	16 d3       	rcall	.+1580   	; 0x822 <__divsf3>
     1f6:	69 d4       	rcall	.+2258   	; 0xaca <log>
	    + 0.5;

    return resf;
     1f8:	23 e3       	ldi	r18, 0x33	; 51
     1fa:	33 e9       	ldi	r19, 0x93	; 147
     1fc:	42 e9       	ldi	r20, 0x92	; 146
     1fe:	53 e4       	ldi	r21, 0x43	; 67
     200:	a4 d4       	rcall	.+2376   	; 0xb4a <__mulsf3>
     202:	20 e0       	ldi	r18, 0x00	; 0
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	4f e2       	ldi	r20, 0x2F	; 47
     208:	55 e4       	ldi	r21, 0x45	; 69
     20a:	a3 d2       	rcall	.+1350   	; 0x752 <__addsf3>
     20c:	9b 01       	movw	r18, r22
     20e:	ac 01       	movw	r20, r24
     210:	60 e4       	ldi	r22, 0x40	; 64
     212:	75 e6       	ldi	r23, 0x65	; 101
     214:	88 e4       	ldi	r24, 0x48	; 72
     216:	99 e4       	ldi	r25, 0x49	; 73
     218:	04 d3       	rcall	.+1544   	; 0x822 <__divsf3>
     21a:	23 e3       	ldi	r18, 0x33	; 51
     21c:	33 e9       	ldi	r19, 0x93	; 147
     21e:	48 e8       	ldi	r20, 0x88	; 136
     220:	53 e4       	ldi	r21, 0x43	; 67
     222:	96 d2       	rcall	.+1324   	; 0x750 <__subsf3>
     224:	20 e0       	ldi	r18, 0x00	; 0
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	5f e3       	ldi	r21, 0x3F	; 63
     22c:	92 d2       	rcall	.+1316   	; 0x752 <__addsf3>
}
     22e:	08 95       	ret

00000230 <set_def_vals>:
     230:	08 95       	ret

00000232 <myread_eeprom>:
//    vars.vent_nom_seg = 4;
}

void myread_eeprom(void)
{
    cli();
     232:	f8 94       	cli
    eeprom_read_block((uint8_t *) &vars, (void *) EEMEM_VARS, sizeof(vars));
     234:	4a e0       	ldi	r20, 0x0A	; 10
     236:	50 e0       	ldi	r21, 0x00	; 0
     238:	64 e6       	ldi	r22, 0x64	; 100
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	86 eb       	ldi	r24, 0xB6	; 182
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	d5 c7       	rjmp	.+4010   	; 0x11ec <eeprom_read_block>

00000242 <myupdate_eeprom>:
    }
}

void myupdate_eeprom(void)
{
    cli();
     242:	f8 94       	cli
    eeprom_update_block((uint8_t *) &vars, (void *) EEMEM_VARS, sizeof(vars));
     244:	4a e0       	ldi	r20, 0x0A	; 10
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	64 e6       	ldi	r22, 0x64	; 100
     24a:	70 e0       	ldi	r23, 0x00	; 0
     24c:	86 eb       	ldi	r24, 0xB6	; 182
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	dd d7       	rcall	.+4026   	; 0x120c <eeprom_update_block>
    eeprom_update_byte((void *) EEMEM_TST, 0xaa);
     252:	6a ea       	ldi	r22, 0xAA	; 170
     254:	82 e3       	ldi	r24, 0x32	; 50
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	e8 c7       	rjmp	.+4048   	; 0x122a <eeprom_update_byte>

0000025a <calcCond>:
}



void calcCond(void)
{
     25a:	08 95       	ret

0000025c <calcVent>:
}

void calcVent(float delta, float id)
{
     25c:	08 95       	ret

0000025e <calcVal>:
}



void calcVal(void)
{
     25e:	8f 92       	push	r8
     260:	9f 92       	push	r9
     262:	af 92       	push	r10
     264:	bf 92       	push	r11
     266:	cf 92       	push	r12
     268:	df 92       	push	r13
     26a:	ef 92       	push	r14
     26c:	ff 92       	push	r15
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	cf 93       	push	r28
    calcCond();

    int_to_uart("Ti", Ti);
     274:	60 91 a4 00 	lds	r22, 0x00A4	; 0x8000a4 <Ti>
     278:	70 91 a5 00 	lds	r23, 0x00A5	; 0x8000a5 <Ti+0x1>
     27c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <Ti+0x2>
     280:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <Ti+0x3>
     284:	36 d3       	rcall	.+1644   	; 0x8f2 <__fixsfsi>
     286:	85 e6       	ldi	r24, 0x65	; 101
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	16 df       	rcall	.-468    	; 0xb8 <int_to_uart>
    int_to_uart("Ts", Ts);
     28c:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end>
     290:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <__data_end+0x1>
     294:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__data_end+0x2>
     298:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <__data_end+0x3>
     29c:	2a d3       	rcall	.+1620   	; 0x8f2 <__fixsfsi>
     29e:	88 e6       	ldi	r24, 0x68	; 104
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0a df       	rcall	.-492    	; 0xb8 <int_to_uart>
    int_to_uart("St", vars.setup_temp);
     2a4:	60 91 b7 00 	lds	r22, 0x00B7	; 0x8000b7 <vars+0x1>
     2a8:	06 2e       	mov	r0, r22
     2aa:	00 0c       	add	r0, r0
     2ac:	77 0b       	sbc	r23, r23
     2ae:	8b e6       	ldi	r24, 0x6B	; 107
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	02 df       	rcall	.-508    	; 0xb8 <int_to_uart>
    float_to_uart("lD", last_delta);
     2b4:	60 91 a9 00 	lds	r22, 0x00A9	; 0x8000a9 <last_delta>
     2b8:	70 91 aa 00 	lds	r23, 0x00AA	; 0x8000aa <last_delta+0x1>
     2bc:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <last_delta+0x2>
     2c0:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <last_delta+0x3>
//    buf[cnt];
}

void float_to_uart(char *id, float num)
{
    int_to_uart(id, num);
     2c4:	16 d3       	rcall	.+1580   	; 0x8f2 <__fixsfsi>
     2c6:	8e e6       	ldi	r24, 0x6E	; 110
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	f6 de       	rcall	.-532    	; 0xb8 <int_to_uart>

    int_to_uart("Ti", Ti);
    int_to_uart("Ts", Ts);
    int_to_uart("St", vars.setup_temp);
    float_to_uart("lD", last_delta);
    float delta = (float) vars.setup_temp;
     2cc:	60 91 b7 00 	lds	r22, 0x00B7	; 0x8000b7 <vars+0x1>
    delta = check_rangef(-40.0, delta - Ts, 40.0);
     2d0:	c0 90 a0 00 	lds	r12, 0x00A0	; 0x8000a0 <__data_end>
     2d4:	d0 90 a1 00 	lds	r13, 0x00A1	; 0x8000a1 <__data_end+0x1>
     2d8:	e0 90 a2 00 	lds	r14, 0x00A2	; 0x8000a2 <__data_end+0x2>
     2dc:	f0 90 a3 00 	lds	r15, 0x00A3	; 0x8000a3 <__data_end+0x3>
     2e0:	06 2e       	mov	r0, r22
     2e2:	00 0c       	add	r0, r0
     2e4:	77 0b       	sbc	r23, r23
     2e6:	88 0b       	sbc	r24, r24
     2e8:	99 0b       	sbc	r25, r25
     2ea:	36 d3       	rcall	.+1644   	; 0x958 <__floatsisf>
     2ec:	a7 01       	movw	r20, r14
     2ee:	96 01       	movw	r18, r12
     2f0:	2f d2       	rcall	.+1118   	; 0x750 <__subsf3>
     2f2:	9b 01       	movw	r18, r22
     2f4:	ac 01       	movw	r20, r24
     2f6:	e1 2c       	mov	r14, r1
     2f8:	f1 2c       	mov	r15, r1
     2fa:	00 e2       	ldi	r16, 0x20	; 32
     2fc:	12 e4       	ldi	r17, 0x42	; 66
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	80 e2       	ldi	r24, 0x20	; 32
     304:	92 ec       	ldi	r25, 0xC2	; 194
     306:	05 d1       	rcall	.+522    	; 0x512 <check_rangef>
     308:	6b 01       	movw	r12, r22
     30a:	7c 01       	movw	r14, r24
    if (fabs(delta) < 0.2) {
     30c:	9f 77       	andi	r25, 0x7F	; 127
     30e:	2d ec       	ldi	r18, 0xCD	; 205
     310:	3c ec       	ldi	r19, 0xCC	; 204
     312:	4c e4       	ldi	r20, 0x4C	; 76
     314:	5e e3       	ldi	r21, 0x3E	; 62
     316:	81 d2       	rcall	.+1282   	; 0x81a <__cmpsf2>
     318:	87 ff       	sbrs	r24, 7
     31a:	03 c0       	rjmp	.+6      	; 0x322 <calcVal+0xc4>
    delta = 0.0;
     31c:	c1 2c       	mov	r12, r1
     31e:	d1 2c       	mov	r13, r1
     320:	76 01       	movw	r14, r12
//    buf[cnt];
}

void float_to_uart(char *id, float num)
{
    int_to_uart(id, num);
     322:	c7 01       	movw	r24, r14
     324:	b6 01       	movw	r22, r12
     326:	e5 d2       	rcall	.+1482   	; 0x8f2 <__fixsfsi>
     328:	81 e7       	ldi	r24, 0x71	; 113
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	c5 de       	rcall	.-630    	; 0xb8 <int_to_uart>
    delta = check_rangef(-40.0, delta - Ts, 40.0);
    if (fabs(delta) < 0.2) {
    delta = 0.0;
    }
    float_to_uart("Dt", delta);
    float id = delta - last_delta;
     32e:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <last_delta>
     332:	30 91 aa 00 	lds	r19, 0x00AA	; 0x8000aa <last_delta+0x1>
     336:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <last_delta+0x2>
     33a:	50 91 ac 00 	lds	r21, 0x00AC	; 0x8000ac <last_delta+0x3>
     33e:	c7 01       	movw	r24, r14
     340:	b6 01       	movw	r22, r12
     342:	06 d2       	rcall	.+1036   	; 0x750 <__subsf3>
     344:	4b 01       	movw	r8, r22
     346:	5c 01       	movw	r10, r24
    last_delta = delta;
     348:	c0 92 a9 00 	sts	0x00A9, r12	; 0x8000a9 <last_delta>
     34c:	d0 92 aa 00 	sts	0x00AA, r13	; 0x8000aa <last_delta+0x1>
     350:	e0 92 ab 00 	sts	0x00AB, r14	; 0x8000ab <last_delta+0x2>
     354:	f0 92 ac 00 	sts	0x00AC, r15	; 0x8000ac <last_delta+0x3>
//    buf[cnt];
}

void float_to_uart(char *id, float num)
{
    int_to_uart(id, num);
     358:	cc d2       	rcall	.+1432   	; 0x8f2 <__fixsfsi>
     35a:	84 e7       	ldi	r24, 0x74	; 116
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	ac de       	rcall	.-680    	; 0xb8 <int_to_uart>
    float_to_uart("Dt", delta);
    float id = delta - last_delta;
    last_delta = delta;
    float_to_uart("Id", id);

    Ipid += delta;
     360:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <Ipid>
     364:	30 91 b1 00 	lds	r19, 0x00B1	; 0x8000b1 <Ipid+0x1>
     368:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <Ipid+0x2>
     36c:	50 91 b3 00 	lds	r21, 0x00B3	; 0x8000b3 <Ipid+0x3>
     370:	c7 01       	movw	r24, r14
     372:	b6 01       	movw	r22, r12
     374:	ee d1       	rcall	.+988    	; 0x752 <__addsf3>
     376:	60 93 b0 00 	sts	0x00B0, r22	; 0x8000b0 <Ipid>
     37a:	70 93 b1 00 	sts	0x00B1, r23	; 0x8000b1 <Ipid+0x1>
     37e:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <Ipid+0x2>
     382:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <Ipid+0x3>

    float pid = (delta + (Ipid * (float) PID_I_KFC) / 100.0 + (id * (float) PID_D_KFC) / 100.0)
     386:	60 91 b0 00 	lds	r22, 0x00B0	; 0x8000b0 <Ipid>
     38a:	70 91 b1 00 	lds	r23, 0x00B1	; 0x8000b1 <Ipid+0x1>
     38e:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <Ipid+0x2>
     392:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <Ipid+0x3>
        * (float) vars.pid_P_kfc;
     396:	c0 91 ba 00 	lds	r28, 0x00BA	; 0x8000ba <vars+0x4>
    last_delta = delta;
    float_to_uart("Id", id);

    Ipid += delta;

    float pid = (delta + (Ipid * (float) PID_I_KFC) / 100.0 + (id * (float) PID_D_KFC) / 100.0)
     39a:	9b 01       	movw	r18, r22
     39c:	ac 01       	movw	r20, r24
     39e:	d9 d1       	rcall	.+946    	; 0x752 <__addsf3>
     3a0:	20 e0       	ldi	r18, 0x00	; 0
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	48 ec       	ldi	r20, 0xC8	; 200
     3a6:	52 e4       	ldi	r21, 0x42	; 66
     3a8:	3c d2       	rcall	.+1144   	; 0x822 <__divsf3>
     3aa:	a7 01       	movw	r20, r14
     3ac:	96 01       	movw	r18, r12
     3ae:	d1 d1       	rcall	.+930    	; 0x752 <__addsf3>
     3b0:	6b 01       	movw	r12, r22
     3b2:	7c 01       	movw	r14, r24
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	40 e2       	ldi	r20, 0x20	; 32
     3ba:	51 e4       	ldi	r21, 0x41	; 65
     3bc:	c5 01       	movw	r24, r10
     3be:	b4 01       	movw	r22, r8
     3c0:	c4 d3       	rcall	.+1928   	; 0xb4a <__mulsf3>
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	48 ec       	ldi	r20, 0xC8	; 200
     3c8:	52 e4       	ldi	r21, 0x42	; 66
     3ca:	2b d2       	rcall	.+1110   	; 0x822 <__divsf3>
     3cc:	9b 01       	movw	r18, r22
     3ce:	ac 01       	movw	r20, r24
     3d0:	c7 01       	movw	r24, r14
     3d2:	b6 01       	movw	r22, r12
     3d4:	be d1       	rcall	.+892    	; 0x752 <__addsf3>
     3d6:	6b 01       	movw	r12, r22
     3d8:	7c 01       	movw	r14, r24
     3da:	6c 2f       	mov	r22, r28
     3dc:	cc 0f       	add	r28, r28
     3de:	77 0b       	sbc	r23, r23
     3e0:	88 0b       	sbc	r24, r24
     3e2:	99 0b       	sbc	r25, r25
     3e4:	b9 d2       	rcall	.+1394   	; 0x958 <__floatsisf>
     3e6:	9b 01       	movw	r18, r22
     3e8:	ac 01       	movw	r20, r24
     3ea:	c7 01       	movw	r24, r14
     3ec:	b6 01       	movw	r22, r12
     3ee:	ad d3       	rcall	.+1882   	; 0xb4a <__mulsf3>
     3f0:	4b 01       	movw	r8, r22
     3f2:	5c 01       	movw	r10, r24
        * (float) vars.pid_P_kfc;

    float_to_uart("Ip", Ipid);
     3f4:	60 91 b0 00 	lds	r22, 0x00B0	; 0x8000b0 <Ipid>
     3f8:	70 91 b1 00 	lds	r23, 0x00B1	; 0x8000b1 <Ipid+0x1>
     3fc:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <Ipid+0x2>
     400:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <Ipid+0x3>
//    buf[cnt];
}

void float_to_uart(char *id, float num)
{
    int_to_uart(id, num);
     404:	76 d2       	rcall	.+1260   	; 0x8f2 <__fixsfsi>
     406:	87 e7       	ldi	r24, 0x77	; 119
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	56 de       	rcall	.-852    	; 0xb8 <int_to_uart>
     40c:	c5 01       	movw	r24, r10
     40e:	b4 01       	movw	r22, r8
     410:	70 d2       	rcall	.+1248   	; 0x8f2 <__fixsfsi>
     412:	8a e7       	ldi	r24, 0x7A	; 122
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	50 de       	rcall	.-864    	; 0xb8 <int_to_uart>
        Ipid += delta;
    }
    }
*/

    temp_out_delay++;
     418:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <temp_out_delay>
     41c:	8f 5f       	subi	r24, 0xFF	; 255
     41e:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <temp_out_delay>
    if (temp_out_delay > vars.temp_seg_delay) {
     422:	20 91 ad 00 	lds	r18, 0x00AD	; 0x8000ad <temp_out_delay>
     426:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <vars+0x6>
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	08 2e       	mov	r0, r24
     42e:	00 0c       	add	r0, r0
     430:	99 0b       	sbc	r25, r25
     432:	82 17       	cp	r24, r18
     434:	93 07       	cpc	r25, r19
     436:	fc f4       	brge	.+62     	; 0x476 <__stack+0x17>
    temp_out_delay = 0;
     438:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <temp_out_delay>
    temp_out_prc = (check_rangef(0, pid, 101) + temp_out_prc) / 2;
     43c:	e1 2c       	mov	r14, r1
     43e:	f1 2c       	mov	r15, r1
     440:	0a ec       	ldi	r16, 0xCA	; 202
     442:	12 e4       	ldi	r17, 0x42	; 66
     444:	a5 01       	movw	r20, r10
     446:	94 01       	movw	r18, r8
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	cb 01       	movw	r24, r22
     44e:	61 d0       	rcall	.+194    	; 0x512 <check_rangef>
     450:	6b 01       	movw	r12, r22
     452:	7c 01       	movw	r14, r24
     454:	60 91 b4 00 	lds	r22, 0x00B4	; 0x8000b4 <temp_out_prc>
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	7c d2       	rcall	.+1272   	; 0x958 <__floatsisf>
     460:	a7 01       	movw	r20, r14
     462:	96 01       	movw	r18, r12
     464:	76 d1       	rcall	.+748    	; 0x752 <__addsf3>
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	40 e0       	ldi	r20, 0x00	; 0
     46c:	5f e3       	ldi	r21, 0x3F	; 63
     46e:	6d d3       	rcall	.+1754   	; 0xb4a <__mulsf3>
     470:	45 d2       	rcall	.+1162   	; 0x8fc <__fixunssfsi>
     472:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <temp_out_prc>
    }

    int_to_uart("out", temp_out_prc);
     476:	60 91 b4 00 	lds	r22, 0x00B4	; 0x8000b4 <temp_out_prc>
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	8e e7       	ldi	r24, 0x7E	; 126
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	1b de       	rcall	.-970    	; 0xb8 <int_to_uart>

    calcVent(delta, id);

    uart_nl();
}
     482:	cf 91       	pop	r28
     484:	1f 91       	pop	r17
     486:	0f 91       	pop	r16
     488:	ff 90       	pop	r15
     48a:	ef 90       	pop	r14
     48c:	df 90       	pop	r13
     48e:	cf 90       	pop	r12
     490:	bf 90       	pop	r11
     492:	af 90       	pop	r10
     494:	9f 90       	pop	r9
     496:	8f 90       	pop	r8

    int_to_uart("out", temp_out_prc);

    calcVent(delta, id);

    uart_nl();
     498:	4e ce       	rjmp	.-868    	; 0x136 <uart_nl>

0000049a <setup_pins>:
}


void setup_pins(void)
{
    PORTB = 0;
     49a:	18 ba       	out	0x18, r1	; 24
    PORTC = 0;
     49c:	15 ba       	out	0x15, r1	; 21
    PORTD = 0;
     49e:	12 ba       	out	0x12, r1	; 18
    DDRB = 0; //dir to in
     4a0:	17 ba       	out	0x17, r1	; 23
    DDRC = 0; //dir to in
     4a2:	14 ba       	out	0x14, r1	; 20
    DDRD = 0; //dir to in
     4a4:	11 ba       	out	0x11, r1	; 17
     set_dir_in(IN_BTN_V_DWN);
     set_dir_in(IN_ACC);
     IN_NIGHT_BR
     set_dir_in(IN_FROST_BTN);*/

    pin_low(OUT_CH_1);
     4a6:	ac 98       	cbi	0x15, 4	; 21
    set_dir_out(OUT_CH_1);
     4a8:	a4 9a       	sbi	0x14, 4	; 20
    pin_low(OUT_CH_2);
     4aa:	a9 98       	cbi	0x15, 1	; 21
    set_dir_out(OUT_CH_2);
     4ac:	a1 9a       	sbi	0x14, 1	; 20

    pin_low(OUT_CH_LED_1);
     4ae:	a8 98       	cbi	0x15, 0	; 21
    set_dir_out(OUT_CH_LED_1);
     4b0:	a0 9a       	sbi	0x14, 0	; 20
    pin_low(OUT_CH_LED_2);
     4b2:	ad 98       	cbi	0x15, 5	; 21
    set_dir_out(OUT_CH_LED_2);
     4b4:	a5 9a       	sbi	0x14, 5	; 20
     4b6:	08 95       	ret

000004b8 <delay_ms0>:
{
    if (__count == 0)
	__asm__ __volatile__( "rjmp 1f\n 1:" );
    // 2 cycles
    else
	__asm__ __volatile__ (
     4b8:	28 ee       	ldi	r18, 0xE8	; 232
     4ba:	33 e0       	ldi	r19, 0x03	; 3
#include <avr/pgmspace.h>
#include "io.h"

void delay_ms0(uint8_t ms)
{
    while (ms > 0) {
     4bc:	88 23       	and	r24, r24
     4be:	29 f0       	breq	.+10     	; 0x4ca <delay_ms0+0x12>
     4c0:	f9 01       	movw	r30, r18
     4c2:	31 97       	sbiw	r30, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <delay_ms0+0xa>
	delay(1000);
	ms--;
     4c6:	81 50       	subi	r24, 0x01	; 1
     4c8:	f9 cf       	rjmp	.-14     	; 0x4bc <delay_ms0+0x4>
    }
//	wdt_reset();
}
     4ca:	08 95       	ret

000004cc <delay_ms>:
     4cc:	28 ee       	ldi	r18, 0xE8	; 232
     4ce:	33 e0       	ldi	r19, 0x03	; 3

void delay_ms(uint16_t ms)
{
    while (ms > 0) {
     4d0:	00 97       	sbiw	r24, 0x00	; 0
     4d2:	29 f0       	breq	.+10     	; 0x4de <delay_ms+0x12>
     4d4:	f9 01       	movw	r30, r18
     4d6:	31 97       	sbiw	r30, 0x01	; 1
     4d8:	f1 f7       	brne	.-4      	; 0x4d6 <delay_ms+0xa>
	delay(1000);
	ms--;
     4da:	01 97       	sbiw	r24, 0x01	; 1
     4dc:	f9 cf       	rjmp	.-14     	; 0x4d0 <delay_ms+0x4>
    }
//	wdt_reset();
}
     4de:	08 95       	ret

000004e0 <delay_s>:

void delay_s(uint8_t s)
{
     4e0:	cf 93       	push	r28
     4e2:	c8 2f       	mov	r28, r24
    while (s > 0) {
     4e4:	cc 23       	and	r28, r28
     4e6:	29 f0       	breq	.+10     	; 0x4f2 <delay_s+0x12>
	delay_ms(1000);
     4e8:	88 ee       	ldi	r24, 0xE8	; 232
     4ea:	93 e0       	ldi	r25, 0x03	; 3
     4ec:	ef df       	rcall	.-34     	; 0x4cc <delay_ms>
	s--;
     4ee:	c1 50       	subi	r28, 0x01	; 1
     4f0:	f9 cf       	rjmp	.-14     	; 0x4e4 <delay_s+0x4>
    }
//	wdt_reset();
}
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <check_range>:

int16_t check_range(int16_t min, int16_t in, int16_t max)
{
     4f6:	f8 2f       	mov	r31, r24
     4f8:	e9 2f       	mov	r30, r25
     4fa:	9b 01       	movw	r18, r22
     4fc:	46 17       	cp	r20, r22
     4fe:	57 07       	cpc	r21, r23
     500:	0c f4       	brge	.+2      	; 0x504 <check_range+0xe>
     502:	9a 01       	movw	r18, r20
    if (in > max)
	in = max;
    if (in < min)
	in = min;
    return in;
     504:	8f 2f       	mov	r24, r31
     506:	9e 2f       	mov	r25, r30
     508:	82 17       	cp	r24, r18
     50a:	93 07       	cpc	r25, r19
     50c:	0c f4       	brge	.+2      	; 0x510 <check_range+0x1a>
     50e:	c9 01       	movw	r24, r18
}
     510:	08 95       	ret

00000512 <check_rangef>:

float check_rangef(float min, float in, float max)
{
     512:	8f 92       	push	r8
     514:	9f 92       	push	r9
     516:	af 92       	push	r10
     518:	bf 92       	push	r11
     51a:	cf 92       	push	r12
     51c:	df 92       	push	r13
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	4b 01       	movw	r8, r22
     52c:	5c 01       	movw	r10, r24
     52e:	69 01       	movw	r12, r18
     530:	d4 2f       	mov	r29, r20
     532:	c5 2f       	mov	r28, r21
    if (in > max)
     534:	97 01       	movw	r18, r14
     536:	a8 01       	movw	r20, r16
     538:	b6 01       	movw	r22, r12
     53a:	8d 2f       	mov	r24, r29
     53c:	9c 2f       	mov	r25, r28
     53e:	bc d2       	rcall	.+1400   	; 0xab8 <__gesf2>
     540:	18 16       	cp	r1, r24
     542:	1c f4       	brge	.+6      	; 0x54a <check_rangef+0x38>
	in = max;
     544:	67 01       	movw	r12, r14
     546:	d0 2f       	mov	r29, r16
     548:	c1 2f       	mov	r28, r17
    if (in < min)
     54a:	94 01       	movw	r18, r8
     54c:	a5 01       	movw	r20, r10
     54e:	b6 01       	movw	r22, r12
     550:	8d 2f       	mov	r24, r29
     552:	9c 2f       	mov	r25, r28
     554:	62 d1       	rcall	.+708    	; 0x81a <__cmpsf2>
     556:	87 ff       	sbrs	r24, 7
     558:	03 c0       	rjmp	.+6      	; 0x560 <check_rangef+0x4e>
	in = min;
     55a:	64 01       	movw	r12, r8
     55c:	da 2d       	mov	r29, r10
     55e:	cb 2d       	mov	r28, r11
    return in;
}
     560:	b6 01       	movw	r22, r12
     562:	8d 2f       	mov	r24, r29
     564:	9c 2f       	mov	r25, r28
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	df 90       	pop	r13
     574:	cf 90       	pop	r12
     576:	bf 90       	pop	r11
     578:	af 90       	pop	r10
     57a:	9f 90       	pop	r9
     57c:	8f 90       	pop	r8
     57e:	08 95       	ret

00000580 <delay_btn_check>:

int8_t delay_btn_check(int8_t *delay_var)
{
     580:	fc 01       	movw	r30, r24
    if (*delay_var) {
     582:	80 81       	ld	r24, Z
     584:	88 23       	and	r24, r24
     586:	29 f0       	breq	.+10     	; 0x592 <delay_btn_check+0x12>
	if (*delay_var > BTN_LONG_DELAY) {
     588:	83 30       	cpi	r24, 0x03	; 3
     58a:	34 f0       	brlt	.+12     	; 0x598 <delay_btn_check+0x18>
	    *delay_var = 0;
     58c:	10 82       	st	Z, r1
	    return 1;
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	08 95       	ret
	}
    } else {
	*delay_var = 1;
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	90 83       	st	Z, r25
     596:	08 95       	ret
    }
    return 0;
     598:	80 e0       	ldi	r24, 0x00	; 0
}
     59a:	08 95       	ret

0000059c <num_to_str>:

void num_to_str(struct m2bytes *nbuf)
{
     59c:	fc 01       	movw	r30, r24
    uint8_t tmp, num;
//m2bytes nbuf;

    num = nbuf->one;
     59e:	20 81       	ld	r18, Z
     5a0:	24 36       	cpi	r18, 0x64	; 100
     5a2:	08 f0       	brcs	.+2      	; 0x5a6 <num_to_str+0xa>
     5a4:	23 e6       	ldi	r18, 0x63	; 99
    if (num > 99)
	num = 99;
    tmp = num / 10;
     5a6:	82 2f       	mov	r24, r18
     5a8:	6a e0       	ldi	r22, 0x0A	; 10
     5aa:	65 d3       	rcall	.+1738   	; 0xc76 <__udivmodqi4>
    nbuf->one = tmp + '0';
     5ac:	90 e3       	ldi	r25, 0x30	; 48
     5ae:	98 0f       	add	r25, r24
     5b0:	90 83       	st	Z, r25
    num -= tmp * 10;
    nbuf->two = num + '0';
     5b2:	20 5d       	subi	r18, 0xD0	; 208
     5b4:	9a e0       	ldi	r25, 0x0A	; 10
     5b6:	89 9f       	mul	r24, r25
     5b8:	20 19       	sub	r18, r0
     5ba:	11 24       	eor	r1, r1
     5bc:	21 83       	std	Z+1, r18	; 0x01
     5be:	08 95       	ret

000005c0 <SPI_SendByte>:
 }
 */

void SPI_SendByte(int8_t byte)
{
    SPDR = byte;
     5c0:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & (1 << SPIF)))
     5c2:	77 9b       	sbis	0x0e, 7	; 14
     5c4:	fe cf       	rjmp	.-4      	; 0x5c2 <SPI_SendByte+0x2>
	;
}
     5c6:	08 95       	ret

000005c8 <SPI_init>:

void SPI_init(void)
{
//    PORTB &= ~((1 << PORTB3) | (1 << PORTB5)); //низкий уровень
//    PORTB |= (1 << PORTB2);
    pin_high(SPI_SS);
     5c8:	c2 9a       	sbi	0x18, 2	; 24
    pin_low(SPI_MOSI);
     5ca:	c3 98       	cbi	0x18, 3	; 24
    pin_low(SPI_SCK);
     5cc:	c5 98       	cbi	0x18, 5	; 24

    //    DDRB = DDRB & ~((1 << PORTB2) | (1 << PORTB3) | (1 << PORTB4) | (1 << PORTB5));
    //    DDRB |= ((1 << PORTB2) | (1 << PORTB3) | (1 << PORTB5)); //ножки SPI на выход
    set_dir_in(SPI_MISO);
     5ce:	bc 98       	cbi	0x17, 4	; 23
    set_dir_out(SPI_MOSI);
     5d0:	bb 9a       	sbi	0x17, 3	; 23
    set_dir_out(SPI_SS);
     5d2:	ba 9a       	sbi	0x17, 2	; 23
    set_dir_out(SPI_SCK);
     5d4:	bd 9a       	sbi	0x17, 5	; 23

    //SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0); //включим шину, объ¤вим ведущим, делитель 16
    /*разрешение spi,старший бит вперед,мастер, режим 0*/
    SPCR = (1 << SPE) | (0 << DORD) | (1 << MSTR) | (0 << CPOL) | (0 << CPHA) | (0 << SPR1) | (0 << SPR0);
     5d6:	80 e5       	ldi	r24, 0x50	; 80
     5d8:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0;    //(0 << SPI2X);
     5da:	1e b8       	out	0x0e, r1	; 14
     5dc:	08 95       	ret

000005de <SPI_deInit>:
}

void SPI_deInit()
{
    SPCR = 0;
     5de:	1d b8       	out	0x0d, r1	; 13
    set_dir_in(SPI_MISO);
     5e0:	bc 98       	cbi	0x17, 4	; 23
    set_dir_in(SPI_MOSI);
     5e2:	bb 98       	cbi	0x17, 3	; 23
    set_dir_in(SPI_SS);
     5e4:	ba 98       	cbi	0x17, 2	; 23
    set_dir_in(SPI_SCK);
     5e6:	bd 98       	cbi	0x17, 5	; 23
     5e8:	08 95       	ret

000005ea <ADC_Init>:
}

void ADC_Init()
{
    ADCSRA = (1 << ADEN) // Включаем АЦП
     5ea:	83 e8       	ldi	r24, 0x83	; 131
     5ec:	86 b9       	out	0x06, r24	; 6
    | (1 << ADPS1) | (1 << ADPS0);    // устанавливаем предделитель преобразователя на 8
    ADMUX = (1 << REFS1) | (1 << REFS0); //Подключен внутренний ион 1.1В, с внешним конденсатором на AREF пине
     5ee:	80 ec       	ldi	r24, 0xC0	; 192
     5f0:	87 b9       	out	0x07, r24	; 7
     5f2:	08 95       	ret

000005f4 <ADC_Mux>:
}

void ADC_Mux(adc_in_type input)
{
    ADMUX &= ~(0b1111);
     5f4:	97 b1       	in	r25, 0x07	; 7
     5f6:	90 7f       	andi	r25, 0xF0	; 240
     5f8:	97 b9       	out	0x07, r25	; 7
    ADMUX |= (input & 0b1111);
     5fa:	97 b1       	in	r25, 0x07	; 7
     5fc:	8f 70       	andi	r24, 0x0F	; 15
     5fe:	98 2b       	or	r25, r24
     600:	97 b9       	out	0x07, r25	; 7
    delay_ms(1); // TODO
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	62 cf       	rjmp	.-316    	; 0x4cc <delay_ms>

00000608 <ADC_Start>:
}

void ADC_Start()
{
    ADCSRA |= (1 << ADSC);    // Начинаем преобразование
     608:	36 9a       	sbi	0x06, 6	; 6
     60a:	08 95       	ret

0000060c <ADC_GetData>:
}

uint16_t ADC_GetData()
{
    return (ADCL | ADCH << 8); // Считываем  полученное значение
     60c:	84 b1       	in	r24, 0x04	; 4
     60e:	25 b1       	in	r18, 0x05	; 5
     610:	90 e0       	ldi	r25, 0x00	; 0
}
     612:	92 2b       	or	r25, r18
     614:	08 95       	ret

00000616 <USART_Init>:
#define UBRRL_value (F_CPU/(USART_BAUDRATE*16))-1

//инициализация usart`a
void USART_Init(void)
{
    UBRRL = UBRRL_value;       //Младшие 8 бит UBRRL_value
     616:	8c e0       	ldi	r24, 0x0C	; 12
     618:	89 b9       	out	0x09, r24	; 9
    UBRRH = (UBRRL_value) >> 8;  //Старшие 8 бит UBRRL_value
     61a:	10 bc       	out	0x20, r1	; 32
    UCSRB |=(1<<TXEN);         //Бит разрешения передачи
     61c:	53 9a       	sbi	0x0a, 3	; 10
    UCSRC |=(1<< URSEL)|(1<< UCSZ0)|(1<< UCSZ1); //Устанавливем формат 8 бит данных
     61e:	80 b5       	in	r24, 0x20	; 32
     620:	86 68       	ori	r24, 0x86	; 134
     622:	80 bd       	out	0x20, r24	; 32
//	USART_RxTx485(1);
    set_dir_out(OUT_UART_TX);
     624:	89 9a       	sbi	0x11, 1	; 17
     626:	08 95       	ret

00000628 <USART_PutChar>:
     628:	21 e0       	ldi	r18, 0x01	; 1
     62a:	30 e0       	ldi	r19, 0x00	; 0
}

//помещает символ в буфер, инициирует начало передачи
void USART_PutChar(char sym)
{
    while(!( UCSRA & (1 << UDRE)))
     62c:	5d 99       	sbic	0x0b, 5	; 11
     62e:	04 c0       	rjmp	.+8      	; 0x638 <USART_PutChar+0x10>
     630:	f9 01       	movw	r30, r18
     632:	31 97       	sbiw	r30, 0x01	; 1
     634:	f1 f7       	brne	.-4      	; 0x632 <USART_PutChar+0xa>
     636:	fa cf       	rjmp	.-12     	; 0x62c <USART_PutChar+0x4>
	delay(1);
//    while ( !( UCSRA & (1<<5)) ) {}
    UDR = sym;
     638:	8c b9       	out	0x0c, r24	; 12
     63a:	08 95       	ret

0000063c <USART_SendStr>:
}

//функция посылающая строку по usart`у
void USART_SendStr(char * data)
{
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	ec 01       	movw	r28, r24
    uint8_t sym;
    while (*data) {
     642:	89 91       	ld	r24, Y+
     644:	88 23       	and	r24, r24
     646:	11 f0       	breq	.+4      	; 0x64c <USART_SendStr+0x10>
	sym = *data++;
	USART_PutChar(sym);
     648:	ef df       	rcall	.-34     	; 0x628 <USART_PutChar>
     64a:	fb cf       	rjmp	.-10     	; 0x642 <USART_SendStr+0x6>
    }
}
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	08 95       	ret

00000652 <main>:
}

int main(void)
{
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
    uint8_t time_cnt = 0;
    wdt_reset();
     656:	a8 95       	wdr
    cli();
     658:	f8 94       	cli
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
     65a:	9f e0       	ldi	r25, 0x0F	; 15
     65c:	88 e1       	ldi	r24, 0x18	; 24
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	a8 95       	wdr
     664:	81 bd       	out	0x21, r24	; 33
     666:	0f be       	out	0x3f, r0	; 63
     668:	91 bd       	out	0x21, r25	; 33
    wdt_enable(WDTO_2S);
    wdt_reset();
     66a:	a8 95       	wdr

    setup_pins();
     66c:	16 df       	rcall	.-468    	; 0x49a <setup_pins>

    myread_eeprom();
     66e:	e1 dd       	rcall	.-1086   	; 0x232 <myread_eeprom>
    ADC_Init();
     670:	bc df       	rcall	.-136    	; 0x5ea <ADC_Init>
    USART_Init();
     672:	d1 df       	rcall	.-94     	; 0x616 <USART_Init>

//timer init
    TCCR1A = 0;         //Т/С1 отсоединен от вывода ОС1, режим ШИМ отключен
     674:	1f bc       	out	0x2f, r1	; 47
    TCCR1B = 4;         //Коэффициент деления частоты системной синхронизации = 256
     676:	84 e0       	ldi	r24, 0x04	; 4
     678:	8e bd       	out	0x2e, r24	; 46
    TCNT1 = 0x10000 - (F_CPU / 512); //Инициализируем счетный регистр
     67a:	2c e7       	ldi	r18, 0x7C	; 124
     67c:	31 ee       	ldi	r19, 0xE1	; 225
     67e:	3d bd       	out	0x2d, r19	; 45
     680:	2c bd       	out	0x2c, r18	; 44

    TIFR = 0;       //Сбрасываем все флаги прерываний от Т/С1
     682:	18 be       	out	0x38, r1	; 56
    TIMSK = 1 << TOIE1;        //Разрешаем прерывание при переполнении Т/С1
     684:	89 bf       	out	0x39, r24	; 57

    sei();
     686:	78 94       	sei
    wdt_reset();
     688:	a8 95       	wdr


    Ti=-13.0;
     68a:	40 e0       	ldi	r20, 0x00	; 0
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	60 e5       	ldi	r22, 0x50	; 80
     690:	71 ec       	ldi	r23, 0xC1	; 193
     692:	40 93 a4 00 	sts	0x00A4, r20	; 0x8000a4 <Ti>
     696:	50 93 a5 00 	sts	0x00A5, r21	; 0x8000a5 <Ti+0x1>
     69a:	60 93 a6 00 	sts	0x00A6, r22	; 0x8000a6 <Ti+0x2>
     69e:	70 93 a7 00 	sts	0x00A7, r23	; 0x8000a7 <Ti+0x3>
    Ts=2;
     6a2:	40 e0       	ldi	r20, 0x00	; 0
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	70 e4       	ldi	r23, 0x40	; 64
     6aa:	40 93 a0 00 	sts	0x00A0, r20	; 0x8000a0 <__data_end>
     6ae:	50 93 a1 00 	sts	0x00A1, r21	; 0x8000a1 <__data_end+0x1>
     6b2:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <__data_end+0x2>
     6b6:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <__data_end+0x3>

    vars.setup_temp = 20;
     6ba:	94 e1       	ldi	r25, 0x14	; 20
     6bc:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <vars+0x1>
    vars.vent_nom_seg = 4;
     6c0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <vars+0x2>
    vars.temp_seg = 2;
     6c4:	92 e0       	ldi	r25, 0x02	; 2
     6c6:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <vars+0x3>
    vars.wmode = wmode_auto;
     6ca:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <vars>
    vars.const_cnd_frost_t = COND_T_FROST;
     6ce:	85 e0       	ldi	r24, 0x05	; 5
     6d0:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <vars+0x7>
    vars.pid_P_kfc = PID_P_KFC;
     6d4:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <vars+0x4>
    vars.vent_var_kfc = VENT_VAR_KFC;
     6d8:	83 e0       	ldi	r24, 0x03	; 3
     6da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <vars+0x5>
    vars.temp_seg_delay = TEMP_OUT_DELAY;
     6de:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <vars+0x6>
    vars.cond_enabled = 0;
     6e2:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <vars+0x8>
    vars.auto_defrost = 3;
     6e6:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <vars+0x9>


    uart_nl();
     6ea:	25 dd       	rcall	.-1462   	; 0x136 <uart_nl>
    int_to_uart("******begin************", 0);
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	82 e8       	ldi	r24, 0x82	; 130
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	e1 dc       	rcall	.-1598   	; 0xb8 <int_to_uart>
    uart_nl();
     6f6:	1f dd       	rcall	.-1474   	; 0x136 <uart_nl>
     6f8:	c0 e0       	ldi	r28, 0x00	; 0
     6fa:	d0 e0       	ldi	r29, 0x00	; 0

    for(int c=0;c< 500;c++){
	uart_nl();
     6fc:	1c dd       	rcall	.-1480   	; 0x136 <uart_nl>
	int_to_uart("time",c*10);
     6fe:	be 01       	movw	r22, r28
     700:	8a e9       	ldi	r24, 0x9A	; 154
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	d9 dc       	rcall	.-1614   	; 0xb8 <int_to_uart>
	uart_nl();
     706:	17 dd       	rcall	.-1490   	; 0x136 <uart_nl>
	calcVal();
     708:	aa dd       	rcall	.-1196   	; 0x25e <calcVal>
	Ts += 0.05;
     70a:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end>
     70e:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <__data_end+0x1>
     712:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__data_end+0x2>
     716:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <__data_end+0x3>
     71a:	2d ec       	ldi	r18, 0xCD	; 205
     71c:	3c ec       	ldi	r19, 0xCC	; 204
     71e:	4c e4       	ldi	r20, 0x4C	; 76
     720:	5d e3       	ldi	r21, 0x3D	; 61
     722:	17 d0       	rcall	.+46     	; 0x752 <__addsf3>
     724:	60 93 a0 00 	sts	0x00A0, r22	; 0x8000a0 <__data_end>
     728:	70 93 a1 00 	sts	0x00A1, r23	; 0x8000a1 <__data_end+0x1>
     72c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__data_end+0x2>
     730:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <__data_end+0x3>



	delay_ms(100);
     734:	84 e6       	ldi	r24, 0x64	; 100
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	c9 de       	rcall	.-622    	; 0x4cc <delay_ms>
	wdt_reset();
     73a:	a8 95       	wdr
     73c:	2a 96       	adiw	r28, 0x0a	; 10

    uart_nl();
    int_to_uart("******begin************", 0);
    uart_nl();

    for(int c=0;c< 500;c++){
     73e:	c8 38       	cpi	r28, 0x88	; 136
     740:	83 e1       	ldi	r24, 0x13	; 19
     742:	d8 07       	cpc	r29, r24
     744:	d9 f6       	brne	.-74     	; 0x6fc <main+0xaa>
	delay_ms(100);
	wdt_reset();
    }

    return 0;
}
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	08 95       	ret

00000750 <__subsf3>:
     750:	50 58       	subi	r21, 0x80	; 128

00000752 <__addsf3>:
     752:	bb 27       	eor	r27, r27
     754:	aa 27       	eor	r26, r26
     756:	0e d0       	rcall	.+28     	; 0x774 <__addsf3x>
     758:	75 c1       	rjmp	.+746    	; 0xa44 <__fp_round>
     75a:	66 d1       	rcall	.+716    	; 0xa28 <__fp_pscA>
     75c:	30 f0       	brcs	.+12     	; 0x76a <__addsf3+0x18>
     75e:	6b d1       	rcall	.+726    	; 0xa36 <__fp_pscB>
     760:	20 f0       	brcs	.+8      	; 0x76a <__addsf3+0x18>
     762:	31 f4       	brne	.+12     	; 0x770 <__addsf3+0x1e>
     764:	9f 3f       	cpi	r25, 0xFF	; 255
     766:	11 f4       	brne	.+4      	; 0x76c <__addsf3+0x1a>
     768:	1e f4       	brtc	.+6      	; 0x770 <__addsf3+0x1e>
     76a:	5b c1       	rjmp	.+694    	; 0xa22 <__fp_nan>
     76c:	0e f4       	brtc	.+2      	; 0x770 <__addsf3+0x1e>
     76e:	e0 95       	com	r30
     770:	e7 fb       	bst	r30, 7
     772:	51 c1       	rjmp	.+674    	; 0xa16 <__fp_inf>

00000774 <__addsf3x>:
     774:	e9 2f       	mov	r30, r25
     776:	77 d1       	rcall	.+750    	; 0xa66 <__fp_split3>
     778:	80 f3       	brcs	.-32     	; 0x75a <__addsf3+0x8>
     77a:	ba 17       	cp	r27, r26
     77c:	62 07       	cpc	r22, r18
     77e:	73 07       	cpc	r23, r19
     780:	84 07       	cpc	r24, r20
     782:	95 07       	cpc	r25, r21
     784:	18 f0       	brcs	.+6      	; 0x78c <__addsf3x+0x18>
     786:	71 f4       	brne	.+28     	; 0x7a4 <__addsf3x+0x30>
     788:	9e f5       	brtc	.+102    	; 0x7f0 <__addsf3x+0x7c>
     78a:	8f c1       	rjmp	.+798    	; 0xaaa <__fp_zero>
     78c:	0e f4       	brtc	.+2      	; 0x790 <__addsf3x+0x1c>
     78e:	e0 95       	com	r30
     790:	0b 2e       	mov	r0, r27
     792:	ba 2f       	mov	r27, r26
     794:	a0 2d       	mov	r26, r0
     796:	0b 01       	movw	r0, r22
     798:	b9 01       	movw	r22, r18
     79a:	90 01       	movw	r18, r0
     79c:	0c 01       	movw	r0, r24
     79e:	ca 01       	movw	r24, r20
     7a0:	a0 01       	movw	r20, r0
     7a2:	11 24       	eor	r1, r1
     7a4:	ff 27       	eor	r31, r31
     7a6:	59 1b       	sub	r21, r25
     7a8:	99 f0       	breq	.+38     	; 0x7d0 <__addsf3x+0x5c>
     7aa:	59 3f       	cpi	r21, 0xF9	; 249
     7ac:	50 f4       	brcc	.+20     	; 0x7c2 <__addsf3x+0x4e>
     7ae:	50 3e       	cpi	r21, 0xE0	; 224
     7b0:	68 f1       	brcs	.+90     	; 0x80c <__addsf3x+0x98>
     7b2:	1a 16       	cp	r1, r26
     7b4:	f0 40       	sbci	r31, 0x00	; 0
     7b6:	a2 2f       	mov	r26, r18
     7b8:	23 2f       	mov	r18, r19
     7ba:	34 2f       	mov	r19, r20
     7bc:	44 27       	eor	r20, r20
     7be:	58 5f       	subi	r21, 0xF8	; 248
     7c0:	f3 cf       	rjmp	.-26     	; 0x7a8 <__addsf3x+0x34>
     7c2:	46 95       	lsr	r20
     7c4:	37 95       	ror	r19
     7c6:	27 95       	ror	r18
     7c8:	a7 95       	ror	r26
     7ca:	f0 40       	sbci	r31, 0x00	; 0
     7cc:	53 95       	inc	r21
     7ce:	c9 f7       	brne	.-14     	; 0x7c2 <__addsf3x+0x4e>
     7d0:	7e f4       	brtc	.+30     	; 0x7f0 <__addsf3x+0x7c>
     7d2:	1f 16       	cp	r1, r31
     7d4:	ba 0b       	sbc	r27, r26
     7d6:	62 0b       	sbc	r22, r18
     7d8:	73 0b       	sbc	r23, r19
     7da:	84 0b       	sbc	r24, r20
     7dc:	ba f0       	brmi	.+46     	; 0x80c <__addsf3x+0x98>
     7de:	91 50       	subi	r25, 0x01	; 1
     7e0:	a1 f0       	breq	.+40     	; 0x80a <__addsf3x+0x96>
     7e2:	ff 0f       	add	r31, r31
     7e4:	bb 1f       	adc	r27, r27
     7e6:	66 1f       	adc	r22, r22
     7e8:	77 1f       	adc	r23, r23
     7ea:	88 1f       	adc	r24, r24
     7ec:	c2 f7       	brpl	.-16     	; 0x7de <__addsf3x+0x6a>
     7ee:	0e c0       	rjmp	.+28     	; 0x80c <__addsf3x+0x98>
     7f0:	ba 0f       	add	r27, r26
     7f2:	62 1f       	adc	r22, r18
     7f4:	73 1f       	adc	r23, r19
     7f6:	84 1f       	adc	r24, r20
     7f8:	48 f4       	brcc	.+18     	; 0x80c <__addsf3x+0x98>
     7fa:	87 95       	ror	r24
     7fc:	77 95       	ror	r23
     7fe:	67 95       	ror	r22
     800:	b7 95       	ror	r27
     802:	f7 95       	ror	r31
     804:	9e 3f       	cpi	r25, 0xFE	; 254
     806:	08 f0       	brcs	.+2      	; 0x80a <__addsf3x+0x96>
     808:	b3 cf       	rjmp	.-154    	; 0x770 <__addsf3+0x1e>
     80a:	93 95       	inc	r25
     80c:	88 0f       	add	r24, r24
     80e:	08 f0       	brcs	.+2      	; 0x812 <__addsf3x+0x9e>
     810:	99 27       	eor	r25, r25
     812:	ee 0f       	add	r30, r30
     814:	97 95       	ror	r25
     816:	87 95       	ror	r24
     818:	08 95       	ret

0000081a <__cmpsf2>:
     81a:	d9 d0       	rcall	.+434    	; 0x9ce <__fp_cmp>
     81c:	08 f4       	brcc	.+2      	; 0x820 <__cmpsf2+0x6>
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	08 95       	ret

00000822 <__divsf3>:
     822:	0c d0       	rcall	.+24     	; 0x83c <__divsf3x>
     824:	0f c1       	rjmp	.+542    	; 0xa44 <__fp_round>
     826:	07 d1       	rcall	.+526    	; 0xa36 <__fp_pscB>
     828:	40 f0       	brcs	.+16     	; 0x83a <__divsf3+0x18>
     82a:	fe d0       	rcall	.+508    	; 0xa28 <__fp_pscA>
     82c:	30 f0       	brcs	.+12     	; 0x83a <__divsf3+0x18>
     82e:	21 f4       	brne	.+8      	; 0x838 <__divsf3+0x16>
     830:	5f 3f       	cpi	r21, 0xFF	; 255
     832:	19 f0       	breq	.+6      	; 0x83a <__divsf3+0x18>
     834:	f0 c0       	rjmp	.+480    	; 0xa16 <__fp_inf>
     836:	51 11       	cpse	r21, r1
     838:	39 c1       	rjmp	.+626    	; 0xaac <__fp_szero>
     83a:	f3 c0       	rjmp	.+486    	; 0xa22 <__fp_nan>

0000083c <__divsf3x>:
     83c:	14 d1       	rcall	.+552    	; 0xa66 <__fp_split3>
     83e:	98 f3       	brcs	.-26     	; 0x826 <__divsf3+0x4>

00000840 <__divsf3_pse>:
     840:	99 23       	and	r25, r25
     842:	c9 f3       	breq	.-14     	; 0x836 <__divsf3+0x14>
     844:	55 23       	and	r21, r21
     846:	b1 f3       	breq	.-20     	; 0x834 <__divsf3+0x12>
     848:	95 1b       	sub	r25, r21
     84a:	55 0b       	sbc	r21, r21
     84c:	bb 27       	eor	r27, r27
     84e:	aa 27       	eor	r26, r26
     850:	62 17       	cp	r22, r18
     852:	73 07       	cpc	r23, r19
     854:	84 07       	cpc	r24, r20
     856:	38 f0       	brcs	.+14     	; 0x866 <__divsf3_pse+0x26>
     858:	9f 5f       	subi	r25, 0xFF	; 255
     85a:	5f 4f       	sbci	r21, 0xFF	; 255
     85c:	22 0f       	add	r18, r18
     85e:	33 1f       	adc	r19, r19
     860:	44 1f       	adc	r20, r20
     862:	aa 1f       	adc	r26, r26
     864:	a9 f3       	breq	.-22     	; 0x850 <__divsf3_pse+0x10>
     866:	33 d0       	rcall	.+102    	; 0x8ce <__divsf3_pse+0x8e>
     868:	0e 2e       	mov	r0, r30
     86a:	3a f0       	brmi	.+14     	; 0x87a <__divsf3_pse+0x3a>
     86c:	e0 e8       	ldi	r30, 0x80	; 128
     86e:	30 d0       	rcall	.+96     	; 0x8d0 <__divsf3_pse+0x90>
     870:	91 50       	subi	r25, 0x01	; 1
     872:	50 40       	sbci	r21, 0x00	; 0
     874:	e6 95       	lsr	r30
     876:	00 1c       	adc	r0, r0
     878:	ca f7       	brpl	.-14     	; 0x86c <__divsf3_pse+0x2c>
     87a:	29 d0       	rcall	.+82     	; 0x8ce <__divsf3_pse+0x8e>
     87c:	fe 2f       	mov	r31, r30
     87e:	27 d0       	rcall	.+78     	; 0x8ce <__divsf3_pse+0x8e>
     880:	66 0f       	add	r22, r22
     882:	77 1f       	adc	r23, r23
     884:	88 1f       	adc	r24, r24
     886:	bb 1f       	adc	r27, r27
     888:	26 17       	cp	r18, r22
     88a:	37 07       	cpc	r19, r23
     88c:	48 07       	cpc	r20, r24
     88e:	ab 07       	cpc	r26, r27
     890:	b0 e8       	ldi	r27, 0x80	; 128
     892:	09 f0       	breq	.+2      	; 0x896 <__divsf3_pse+0x56>
     894:	bb 0b       	sbc	r27, r27
     896:	80 2d       	mov	r24, r0
     898:	bf 01       	movw	r22, r30
     89a:	ff 27       	eor	r31, r31
     89c:	93 58       	subi	r25, 0x83	; 131
     89e:	5f 4f       	sbci	r21, 0xFF	; 255
     8a0:	2a f0       	brmi	.+10     	; 0x8ac <__divsf3_pse+0x6c>
     8a2:	9e 3f       	cpi	r25, 0xFE	; 254
     8a4:	51 05       	cpc	r21, r1
     8a6:	68 f0       	brcs	.+26     	; 0x8c2 <__divsf3_pse+0x82>
     8a8:	b6 c0       	rjmp	.+364    	; 0xa16 <__fp_inf>
     8aa:	00 c1       	rjmp	.+512    	; 0xaac <__fp_szero>
     8ac:	5f 3f       	cpi	r21, 0xFF	; 255
     8ae:	ec f3       	brlt	.-6      	; 0x8aa <__divsf3_pse+0x6a>
     8b0:	98 3e       	cpi	r25, 0xE8	; 232
     8b2:	dc f3       	brlt	.-10     	; 0x8aa <__divsf3_pse+0x6a>
     8b4:	86 95       	lsr	r24
     8b6:	77 95       	ror	r23
     8b8:	67 95       	ror	r22
     8ba:	b7 95       	ror	r27
     8bc:	f7 95       	ror	r31
     8be:	9f 5f       	subi	r25, 0xFF	; 255
     8c0:	c9 f7       	brne	.-14     	; 0x8b4 <__divsf3_pse+0x74>
     8c2:	88 0f       	add	r24, r24
     8c4:	91 1d       	adc	r25, r1
     8c6:	96 95       	lsr	r25
     8c8:	87 95       	ror	r24
     8ca:	97 f9       	bld	r25, 7
     8cc:	08 95       	ret
     8ce:	e1 e0       	ldi	r30, 0x01	; 1
     8d0:	66 0f       	add	r22, r22
     8d2:	77 1f       	adc	r23, r23
     8d4:	88 1f       	adc	r24, r24
     8d6:	bb 1f       	adc	r27, r27
     8d8:	62 17       	cp	r22, r18
     8da:	73 07       	cpc	r23, r19
     8dc:	84 07       	cpc	r24, r20
     8de:	ba 07       	cpc	r27, r26
     8e0:	20 f0       	brcs	.+8      	; 0x8ea <__divsf3_pse+0xaa>
     8e2:	62 1b       	sub	r22, r18
     8e4:	73 0b       	sbc	r23, r19
     8e6:	84 0b       	sbc	r24, r20
     8e8:	ba 0b       	sbc	r27, r26
     8ea:	ee 1f       	adc	r30, r30
     8ec:	88 f7       	brcc	.-30     	; 0x8d0 <__divsf3_pse+0x90>
     8ee:	e0 95       	com	r30
     8f0:	08 95       	ret

000008f2 <__fixsfsi>:
     8f2:	04 d0       	rcall	.+8      	; 0x8fc <__fixunssfsi>
     8f4:	68 94       	set
     8f6:	b1 11       	cpse	r27, r1
     8f8:	d9 c0       	rjmp	.+434    	; 0xaac <__fp_szero>
     8fa:	08 95       	ret

000008fc <__fixunssfsi>:
     8fc:	bc d0       	rcall	.+376    	; 0xa76 <__fp_splitA>
     8fe:	88 f0       	brcs	.+34     	; 0x922 <__fixunssfsi+0x26>
     900:	9f 57       	subi	r25, 0x7F	; 127
     902:	90 f0       	brcs	.+36     	; 0x928 <__fixunssfsi+0x2c>
     904:	b9 2f       	mov	r27, r25
     906:	99 27       	eor	r25, r25
     908:	b7 51       	subi	r27, 0x17	; 23
     90a:	a0 f0       	brcs	.+40     	; 0x934 <__fixunssfsi+0x38>
     90c:	d1 f0       	breq	.+52     	; 0x942 <__fixunssfsi+0x46>
     90e:	66 0f       	add	r22, r22
     910:	77 1f       	adc	r23, r23
     912:	88 1f       	adc	r24, r24
     914:	99 1f       	adc	r25, r25
     916:	1a f0       	brmi	.+6      	; 0x91e <__fixunssfsi+0x22>
     918:	ba 95       	dec	r27
     91a:	c9 f7       	brne	.-14     	; 0x90e <__fixunssfsi+0x12>
     91c:	12 c0       	rjmp	.+36     	; 0x942 <__fixunssfsi+0x46>
     91e:	b1 30       	cpi	r27, 0x01	; 1
     920:	81 f0       	breq	.+32     	; 0x942 <__fixunssfsi+0x46>
     922:	c3 d0       	rcall	.+390    	; 0xaaa <__fp_zero>
     924:	b1 e0       	ldi	r27, 0x01	; 1
     926:	08 95       	ret
     928:	c0 c0       	rjmp	.+384    	; 0xaaa <__fp_zero>
     92a:	67 2f       	mov	r22, r23
     92c:	78 2f       	mov	r23, r24
     92e:	88 27       	eor	r24, r24
     930:	b8 5f       	subi	r27, 0xF8	; 248
     932:	39 f0       	breq	.+14     	; 0x942 <__fixunssfsi+0x46>
     934:	b9 3f       	cpi	r27, 0xF9	; 249
     936:	cc f3       	brlt	.-14     	; 0x92a <__fixunssfsi+0x2e>
     938:	86 95       	lsr	r24
     93a:	77 95       	ror	r23
     93c:	67 95       	ror	r22
     93e:	b3 95       	inc	r27
     940:	d9 f7       	brne	.-10     	; 0x938 <__fixunssfsi+0x3c>
     942:	3e f4       	brtc	.+14     	; 0x952 <__fixunssfsi+0x56>
     944:	90 95       	com	r25
     946:	80 95       	com	r24
     948:	70 95       	com	r23
     94a:	61 95       	neg	r22
     94c:	7f 4f       	sbci	r23, 0xFF	; 255
     94e:	8f 4f       	sbci	r24, 0xFF	; 255
     950:	9f 4f       	sbci	r25, 0xFF	; 255
     952:	08 95       	ret

00000954 <__floatunsisf>:
     954:	e8 94       	clt
     956:	09 c0       	rjmp	.+18     	; 0x96a <__floatsisf+0x12>

00000958 <__floatsisf>:
     958:	97 fb       	bst	r25, 7
     95a:	3e f4       	brtc	.+14     	; 0x96a <__floatsisf+0x12>
     95c:	90 95       	com	r25
     95e:	80 95       	com	r24
     960:	70 95       	com	r23
     962:	61 95       	neg	r22
     964:	7f 4f       	sbci	r23, 0xFF	; 255
     966:	8f 4f       	sbci	r24, 0xFF	; 255
     968:	9f 4f       	sbci	r25, 0xFF	; 255
     96a:	99 23       	and	r25, r25
     96c:	a9 f0       	breq	.+42     	; 0x998 <__floatsisf+0x40>
     96e:	f9 2f       	mov	r31, r25
     970:	96 e9       	ldi	r25, 0x96	; 150
     972:	bb 27       	eor	r27, r27
     974:	93 95       	inc	r25
     976:	f6 95       	lsr	r31
     978:	87 95       	ror	r24
     97a:	77 95       	ror	r23
     97c:	67 95       	ror	r22
     97e:	b7 95       	ror	r27
     980:	f1 11       	cpse	r31, r1
     982:	f8 cf       	rjmp	.-16     	; 0x974 <__floatsisf+0x1c>
     984:	fa f4       	brpl	.+62     	; 0x9c4 <__floatsisf+0x6c>
     986:	bb 0f       	add	r27, r27
     988:	11 f4       	brne	.+4      	; 0x98e <__floatsisf+0x36>
     98a:	60 ff       	sbrs	r22, 0
     98c:	1b c0       	rjmp	.+54     	; 0x9c4 <__floatsisf+0x6c>
     98e:	6f 5f       	subi	r22, 0xFF	; 255
     990:	7f 4f       	sbci	r23, 0xFF	; 255
     992:	8f 4f       	sbci	r24, 0xFF	; 255
     994:	9f 4f       	sbci	r25, 0xFF	; 255
     996:	16 c0       	rjmp	.+44     	; 0x9c4 <__floatsisf+0x6c>
     998:	88 23       	and	r24, r24
     99a:	11 f0       	breq	.+4      	; 0x9a0 <__floatsisf+0x48>
     99c:	96 e9       	ldi	r25, 0x96	; 150
     99e:	11 c0       	rjmp	.+34     	; 0x9c2 <__floatsisf+0x6a>
     9a0:	77 23       	and	r23, r23
     9a2:	21 f0       	breq	.+8      	; 0x9ac <__floatsisf+0x54>
     9a4:	9e e8       	ldi	r25, 0x8E	; 142
     9a6:	87 2f       	mov	r24, r23
     9a8:	76 2f       	mov	r23, r22
     9aa:	05 c0       	rjmp	.+10     	; 0x9b6 <__floatsisf+0x5e>
     9ac:	66 23       	and	r22, r22
     9ae:	71 f0       	breq	.+28     	; 0x9cc <__floatsisf+0x74>
     9b0:	96 e8       	ldi	r25, 0x86	; 134
     9b2:	86 2f       	mov	r24, r22
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	2a f0       	brmi	.+10     	; 0x9c4 <__floatsisf+0x6c>
     9ba:	9a 95       	dec	r25
     9bc:	66 0f       	add	r22, r22
     9be:	77 1f       	adc	r23, r23
     9c0:	88 1f       	adc	r24, r24
     9c2:	da f7       	brpl	.-10     	; 0x9ba <__floatsisf+0x62>
     9c4:	88 0f       	add	r24, r24
     9c6:	96 95       	lsr	r25
     9c8:	87 95       	ror	r24
     9ca:	97 f9       	bld	r25, 7
     9cc:	08 95       	ret

000009ce <__fp_cmp>:
     9ce:	99 0f       	add	r25, r25
     9d0:	00 08       	sbc	r0, r0
     9d2:	55 0f       	add	r21, r21
     9d4:	aa 0b       	sbc	r26, r26
     9d6:	e0 e8       	ldi	r30, 0x80	; 128
     9d8:	fe ef       	ldi	r31, 0xFE	; 254
     9da:	16 16       	cp	r1, r22
     9dc:	17 06       	cpc	r1, r23
     9de:	e8 07       	cpc	r30, r24
     9e0:	f9 07       	cpc	r31, r25
     9e2:	c0 f0       	brcs	.+48     	; 0xa14 <__fp_cmp+0x46>
     9e4:	12 16       	cp	r1, r18
     9e6:	13 06       	cpc	r1, r19
     9e8:	e4 07       	cpc	r30, r20
     9ea:	f5 07       	cpc	r31, r21
     9ec:	98 f0       	brcs	.+38     	; 0xa14 <__fp_cmp+0x46>
     9ee:	62 1b       	sub	r22, r18
     9f0:	73 0b       	sbc	r23, r19
     9f2:	84 0b       	sbc	r24, r20
     9f4:	95 0b       	sbc	r25, r21
     9f6:	39 f4       	brne	.+14     	; 0xa06 <__fp_cmp+0x38>
     9f8:	0a 26       	eor	r0, r26
     9fa:	61 f0       	breq	.+24     	; 0xa14 <__fp_cmp+0x46>
     9fc:	23 2b       	or	r18, r19
     9fe:	24 2b       	or	r18, r20
     a00:	25 2b       	or	r18, r21
     a02:	21 f4       	brne	.+8      	; 0xa0c <__fp_cmp+0x3e>
     a04:	08 95       	ret
     a06:	0a 26       	eor	r0, r26
     a08:	09 f4       	brne	.+2      	; 0xa0c <__fp_cmp+0x3e>
     a0a:	a1 40       	sbci	r26, 0x01	; 1
     a0c:	a6 95       	lsr	r26
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	81 1d       	adc	r24, r1
     a12:	81 1d       	adc	r24, r1
     a14:	08 95       	ret

00000a16 <__fp_inf>:
     a16:	97 f9       	bld	r25, 7
     a18:	9f 67       	ori	r25, 0x7F	; 127
     a1a:	80 e8       	ldi	r24, 0x80	; 128
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	08 95       	ret

00000a22 <__fp_nan>:
     a22:	9f ef       	ldi	r25, 0xFF	; 255
     a24:	80 ec       	ldi	r24, 0xC0	; 192
     a26:	08 95       	ret

00000a28 <__fp_pscA>:
     a28:	00 24       	eor	r0, r0
     a2a:	0a 94       	dec	r0
     a2c:	16 16       	cp	r1, r22
     a2e:	17 06       	cpc	r1, r23
     a30:	18 06       	cpc	r1, r24
     a32:	09 06       	cpc	r0, r25
     a34:	08 95       	ret

00000a36 <__fp_pscB>:
     a36:	00 24       	eor	r0, r0
     a38:	0a 94       	dec	r0
     a3a:	12 16       	cp	r1, r18
     a3c:	13 06       	cpc	r1, r19
     a3e:	14 06       	cpc	r1, r20
     a40:	05 06       	cpc	r0, r21
     a42:	08 95       	ret

00000a44 <__fp_round>:
     a44:	09 2e       	mov	r0, r25
     a46:	03 94       	inc	r0
     a48:	00 0c       	add	r0, r0
     a4a:	11 f4       	brne	.+4      	; 0xa50 <__fp_round+0xc>
     a4c:	88 23       	and	r24, r24
     a4e:	52 f0       	brmi	.+20     	; 0xa64 <__fp_round+0x20>
     a50:	bb 0f       	add	r27, r27
     a52:	40 f4       	brcc	.+16     	; 0xa64 <__fp_round+0x20>
     a54:	bf 2b       	or	r27, r31
     a56:	11 f4       	brne	.+4      	; 0xa5c <__fp_round+0x18>
     a58:	60 ff       	sbrs	r22, 0
     a5a:	04 c0       	rjmp	.+8      	; 0xa64 <__fp_round+0x20>
     a5c:	6f 5f       	subi	r22, 0xFF	; 255
     a5e:	7f 4f       	sbci	r23, 0xFF	; 255
     a60:	8f 4f       	sbci	r24, 0xFF	; 255
     a62:	9f 4f       	sbci	r25, 0xFF	; 255
     a64:	08 95       	ret

00000a66 <__fp_split3>:
     a66:	57 fd       	sbrc	r21, 7
     a68:	90 58       	subi	r25, 0x80	; 128
     a6a:	44 0f       	add	r20, r20
     a6c:	55 1f       	adc	r21, r21
     a6e:	59 f0       	breq	.+22     	; 0xa86 <__fp_splitA+0x10>
     a70:	5f 3f       	cpi	r21, 0xFF	; 255
     a72:	71 f0       	breq	.+28     	; 0xa90 <__fp_splitA+0x1a>
     a74:	47 95       	ror	r20

00000a76 <__fp_splitA>:
     a76:	88 0f       	add	r24, r24
     a78:	97 fb       	bst	r25, 7
     a7a:	99 1f       	adc	r25, r25
     a7c:	61 f0       	breq	.+24     	; 0xa96 <__fp_splitA+0x20>
     a7e:	9f 3f       	cpi	r25, 0xFF	; 255
     a80:	79 f0       	breq	.+30     	; 0xaa0 <__fp_splitA+0x2a>
     a82:	87 95       	ror	r24
     a84:	08 95       	ret
     a86:	12 16       	cp	r1, r18
     a88:	13 06       	cpc	r1, r19
     a8a:	14 06       	cpc	r1, r20
     a8c:	55 1f       	adc	r21, r21
     a8e:	f2 cf       	rjmp	.-28     	; 0xa74 <__fp_split3+0xe>
     a90:	46 95       	lsr	r20
     a92:	f1 df       	rcall	.-30     	; 0xa76 <__fp_splitA>
     a94:	08 c0       	rjmp	.+16     	; 0xaa6 <__fp_splitA+0x30>
     a96:	16 16       	cp	r1, r22
     a98:	17 06       	cpc	r1, r23
     a9a:	18 06       	cpc	r1, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	f1 cf       	rjmp	.-30     	; 0xa82 <__fp_splitA+0xc>
     aa0:	86 95       	lsr	r24
     aa2:	71 05       	cpc	r23, r1
     aa4:	61 05       	cpc	r22, r1
     aa6:	08 94       	sec
     aa8:	08 95       	ret

00000aaa <__fp_zero>:
     aaa:	e8 94       	clt

00000aac <__fp_szero>:
     aac:	bb 27       	eor	r27, r27
     aae:	66 27       	eor	r22, r22
     ab0:	77 27       	eor	r23, r23
     ab2:	cb 01       	movw	r24, r22
     ab4:	97 f9       	bld	r25, 7
     ab6:	08 95       	ret

00000ab8 <__gesf2>:
     ab8:	8a df       	rcall	.-236    	; 0x9ce <__fp_cmp>
     aba:	08 f4       	brcc	.+2      	; 0xabe <__gesf2+0x6>
     abc:	8f ef       	ldi	r24, 0xFF	; 255
     abe:	08 95       	ret
     ac0:	0e f0       	brts	.+2      	; 0xac4 <__gesf2+0xc>
     ac2:	a6 c0       	rjmp	.+332    	; 0xc10 <__fp_mpack>
     ac4:	ae cf       	rjmp	.-164    	; 0xa22 <__fp_nan>
     ac6:	68 94       	set
     ac8:	a6 cf       	rjmp	.-180    	; 0xa16 <__fp_inf>

00000aca <log>:
     aca:	d5 df       	rcall	.-86     	; 0xa76 <__fp_splitA>
     acc:	c8 f3       	brcs	.-14     	; 0xac0 <__gesf2+0x8>
     ace:	99 23       	and	r25, r25
     ad0:	d1 f3       	breq	.-12     	; 0xac6 <__gesf2+0xe>
     ad2:	c6 f3       	brts	.-16     	; 0xac4 <__gesf2+0xc>
     ad4:	df 93       	push	r29
     ad6:	cf 93       	push	r28
     ad8:	1f 93       	push	r17
     ada:	0f 93       	push	r16
     adc:	ff 92       	push	r15
     ade:	c9 2f       	mov	r28, r25
     ae0:	dd 27       	eor	r29, r29
     ae2:	88 23       	and	r24, r24
     ae4:	2a f0       	brmi	.+10     	; 0xaf0 <log+0x26>
     ae6:	21 97       	sbiw	r28, 0x01	; 1
     ae8:	66 0f       	add	r22, r22
     aea:	77 1f       	adc	r23, r23
     aec:	88 1f       	adc	r24, r24
     aee:	da f7       	brpl	.-10     	; 0xae6 <log+0x1c>
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	40 e8       	ldi	r20, 0x80	; 128
     af6:	5f eb       	ldi	r21, 0xBF	; 191
     af8:	9f e3       	ldi	r25, 0x3F	; 63
     afa:	88 39       	cpi	r24, 0x98	; 152
     afc:	20 f0       	brcs	.+8      	; 0xb06 <log+0x3c>
     afe:	80 3e       	cpi	r24, 0xE0	; 224
     b00:	30 f0       	brcs	.+12     	; 0xb0e <log+0x44>
     b02:	21 96       	adiw	r28, 0x01	; 1
     b04:	8f 77       	andi	r24, 0x7F	; 127
     b06:	25 de       	rcall	.-950    	; 0x752 <__addsf3>
     b08:	e6 e2       	ldi	r30, 0x26	; 38
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	03 c0       	rjmp	.+6      	; 0xb14 <log+0x4a>
     b0e:	21 de       	rcall	.-958    	; 0x752 <__addsf3>
     b10:	e3 e5       	ldi	r30, 0x53	; 83
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	8b d0       	rcall	.+278    	; 0xc2c <__fp_powser>
     b16:	8b 01       	movw	r16, r22
     b18:	be 01       	movw	r22, r28
     b1a:	ec 01       	movw	r28, r24
     b1c:	fb 2e       	mov	r15, r27
     b1e:	6f 57       	subi	r22, 0x7F	; 127
     b20:	71 09       	sbc	r23, r1
     b22:	75 95       	asr	r23
     b24:	77 1f       	adc	r23, r23
     b26:	88 0b       	sbc	r24, r24
     b28:	99 0b       	sbc	r25, r25
     b2a:	16 df       	rcall	.-468    	; 0x958 <__floatsisf>
     b2c:	28 e1       	ldi	r18, 0x18	; 24
     b2e:	32 e7       	ldi	r19, 0x72	; 114
     b30:	41 e3       	ldi	r20, 0x31	; 49
     b32:	5f e3       	ldi	r21, 0x3F	; 63
     b34:	16 d0       	rcall	.+44     	; 0xb62 <__mulsf3x>
     b36:	af 2d       	mov	r26, r15
     b38:	98 01       	movw	r18, r16
     b3a:	ae 01       	movw	r20, r28
     b3c:	ff 90       	pop	r15
     b3e:	0f 91       	pop	r16
     b40:	1f 91       	pop	r17
     b42:	cf 91       	pop	r28
     b44:	df 91       	pop	r29
     b46:	16 de       	rcall	.-980    	; 0x774 <__addsf3x>
     b48:	7d cf       	rjmp	.-262    	; 0xa44 <__fp_round>

00000b4a <__mulsf3>:
     b4a:	0b d0       	rcall	.+22     	; 0xb62 <__mulsf3x>
     b4c:	7b cf       	rjmp	.-266    	; 0xa44 <__fp_round>
     b4e:	6c df       	rcall	.-296    	; 0xa28 <__fp_pscA>
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__mulsf3+0x12>
     b52:	71 df       	rcall	.-286    	; 0xa36 <__fp_pscB>
     b54:	18 f0       	brcs	.+6      	; 0xb5c <__mulsf3+0x12>
     b56:	95 23       	and	r25, r21
     b58:	09 f0       	breq	.+2      	; 0xb5c <__mulsf3+0x12>
     b5a:	5d cf       	rjmp	.-326    	; 0xa16 <__fp_inf>
     b5c:	62 cf       	rjmp	.-316    	; 0xa22 <__fp_nan>
     b5e:	11 24       	eor	r1, r1
     b60:	a5 cf       	rjmp	.-182    	; 0xaac <__fp_szero>

00000b62 <__mulsf3x>:
     b62:	81 df       	rcall	.-254    	; 0xa66 <__fp_split3>
     b64:	a0 f3       	brcs	.-24     	; 0xb4e <__mulsf3+0x4>

00000b66 <__mulsf3_pse>:
     b66:	95 9f       	mul	r25, r21
     b68:	d1 f3       	breq	.-12     	; 0xb5e <__mulsf3+0x14>
     b6a:	95 0f       	add	r25, r21
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	55 1f       	adc	r21, r21
     b70:	62 9f       	mul	r22, r18
     b72:	f0 01       	movw	r30, r0
     b74:	72 9f       	mul	r23, r18
     b76:	bb 27       	eor	r27, r27
     b78:	f0 0d       	add	r31, r0
     b7a:	b1 1d       	adc	r27, r1
     b7c:	63 9f       	mul	r22, r19
     b7e:	aa 27       	eor	r26, r26
     b80:	f0 0d       	add	r31, r0
     b82:	b1 1d       	adc	r27, r1
     b84:	aa 1f       	adc	r26, r26
     b86:	64 9f       	mul	r22, r20
     b88:	66 27       	eor	r22, r22
     b8a:	b0 0d       	add	r27, r0
     b8c:	a1 1d       	adc	r26, r1
     b8e:	66 1f       	adc	r22, r22
     b90:	82 9f       	mul	r24, r18
     b92:	22 27       	eor	r18, r18
     b94:	b0 0d       	add	r27, r0
     b96:	a1 1d       	adc	r26, r1
     b98:	62 1f       	adc	r22, r18
     b9a:	73 9f       	mul	r23, r19
     b9c:	b0 0d       	add	r27, r0
     b9e:	a1 1d       	adc	r26, r1
     ba0:	62 1f       	adc	r22, r18
     ba2:	83 9f       	mul	r24, r19
     ba4:	a0 0d       	add	r26, r0
     ba6:	61 1d       	adc	r22, r1
     ba8:	22 1f       	adc	r18, r18
     baa:	74 9f       	mul	r23, r20
     bac:	33 27       	eor	r19, r19
     bae:	a0 0d       	add	r26, r0
     bb0:	61 1d       	adc	r22, r1
     bb2:	23 1f       	adc	r18, r19
     bb4:	84 9f       	mul	r24, r20
     bb6:	60 0d       	add	r22, r0
     bb8:	21 1d       	adc	r18, r1
     bba:	82 2f       	mov	r24, r18
     bbc:	76 2f       	mov	r23, r22
     bbe:	6a 2f       	mov	r22, r26
     bc0:	11 24       	eor	r1, r1
     bc2:	9f 57       	subi	r25, 0x7F	; 127
     bc4:	50 40       	sbci	r21, 0x00	; 0
     bc6:	8a f0       	brmi	.+34     	; 0xbea <__mulsf3_pse+0x84>
     bc8:	e1 f0       	breq	.+56     	; 0xc02 <__mulsf3_pse+0x9c>
     bca:	88 23       	and	r24, r24
     bcc:	4a f0       	brmi	.+18     	; 0xbe0 <__mulsf3_pse+0x7a>
     bce:	ee 0f       	add	r30, r30
     bd0:	ff 1f       	adc	r31, r31
     bd2:	bb 1f       	adc	r27, r27
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	88 1f       	adc	r24, r24
     bda:	91 50       	subi	r25, 0x01	; 1
     bdc:	50 40       	sbci	r21, 0x00	; 0
     bde:	a9 f7       	brne	.-22     	; 0xbca <__mulsf3_pse+0x64>
     be0:	9e 3f       	cpi	r25, 0xFE	; 254
     be2:	51 05       	cpc	r21, r1
     be4:	70 f0       	brcs	.+28     	; 0xc02 <__mulsf3_pse+0x9c>
     be6:	17 cf       	rjmp	.-466    	; 0xa16 <__fp_inf>
     be8:	61 cf       	rjmp	.-318    	; 0xaac <__fp_szero>
     bea:	5f 3f       	cpi	r21, 0xFF	; 255
     bec:	ec f3       	brlt	.-6      	; 0xbe8 <__mulsf3_pse+0x82>
     bee:	98 3e       	cpi	r25, 0xE8	; 232
     bf0:	dc f3       	brlt	.-10     	; 0xbe8 <__mulsf3_pse+0x82>
     bf2:	86 95       	lsr	r24
     bf4:	77 95       	ror	r23
     bf6:	67 95       	ror	r22
     bf8:	b7 95       	ror	r27
     bfa:	f7 95       	ror	r31
     bfc:	e7 95       	ror	r30
     bfe:	9f 5f       	subi	r25, 0xFF	; 255
     c00:	c1 f7       	brne	.-16     	; 0xbf2 <__mulsf3_pse+0x8c>
     c02:	fe 2b       	or	r31, r30
     c04:	88 0f       	add	r24, r24
     c06:	91 1d       	adc	r25, r1
     c08:	96 95       	lsr	r25
     c0a:	87 95       	ror	r24
     c0c:	97 f9       	bld	r25, 7
     c0e:	08 95       	ret

00000c10 <__fp_mpack>:
     c10:	9f 3f       	cpi	r25, 0xFF	; 255
     c12:	31 f0       	breq	.+12     	; 0xc20 <__fp_mpack_finite+0xc>

00000c14 <__fp_mpack_finite>:
     c14:	91 50       	subi	r25, 0x01	; 1
     c16:	20 f4       	brcc	.+8      	; 0xc20 <__fp_mpack_finite+0xc>
     c18:	87 95       	ror	r24
     c1a:	77 95       	ror	r23
     c1c:	67 95       	ror	r22
     c1e:	b7 95       	ror	r27
     c20:	88 0f       	add	r24, r24
     c22:	91 1d       	adc	r25, r1
     c24:	96 95       	lsr	r25
     c26:	87 95       	ror	r24
     c28:	97 f9       	bld	r25, 7
     c2a:	08 95       	ret

00000c2c <__fp_powser>:
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	1f 93       	push	r17
     c32:	0f 93       	push	r16
     c34:	ff 92       	push	r15
     c36:	ef 92       	push	r14
     c38:	df 92       	push	r13
     c3a:	7b 01       	movw	r14, r22
     c3c:	8c 01       	movw	r16, r24
     c3e:	68 94       	set
     c40:	05 c0       	rjmp	.+10     	; 0xc4c <__fp_powser+0x20>
     c42:	da 2e       	mov	r13, r26
     c44:	ef 01       	movw	r28, r30
     c46:	8d df       	rcall	.-230    	; 0xb62 <__mulsf3x>
     c48:	fe 01       	movw	r30, r28
     c4a:	e8 94       	clt
     c4c:	a5 91       	lpm	r26, Z+
     c4e:	25 91       	lpm	r18, Z+
     c50:	35 91       	lpm	r19, Z+
     c52:	45 91       	lpm	r20, Z+
     c54:	55 91       	lpm	r21, Z+
     c56:	ae f3       	brts	.-22     	; 0xc42 <__fp_powser+0x16>
     c58:	ef 01       	movw	r28, r30
     c5a:	8c dd       	rcall	.-1256   	; 0x774 <__addsf3x>
     c5c:	fe 01       	movw	r30, r28
     c5e:	97 01       	movw	r18, r14
     c60:	a8 01       	movw	r20, r16
     c62:	da 94       	dec	r13
     c64:	79 f7       	brne	.-34     	; 0xc44 <__fp_powser+0x18>
     c66:	df 90       	pop	r13
     c68:	ef 90       	pop	r14
     c6a:	ff 90       	pop	r15
     c6c:	0f 91       	pop	r16
     c6e:	1f 91       	pop	r17
     c70:	cf 91       	pop	r28
     c72:	df 91       	pop	r29
     c74:	08 95       	ret

00000c76 <__udivmodqi4>:
     c76:	99 1b       	sub	r25, r25
     c78:	79 e0       	ldi	r23, 0x09	; 9
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__udivmodqi4_ep>

00000c7c <__udivmodqi4_loop>:
     c7c:	99 1f       	adc	r25, r25
     c7e:	96 17       	cp	r25, r22
     c80:	08 f0       	brcs	.+2      	; 0xc84 <__udivmodqi4_ep>
     c82:	96 1b       	sub	r25, r22

00000c84 <__udivmodqi4_ep>:
     c84:	88 1f       	adc	r24, r24
     c86:	7a 95       	dec	r23
     c88:	c9 f7       	brne	.-14     	; 0xc7c <__udivmodqi4_loop>
     c8a:	80 95       	com	r24
     c8c:	08 95       	ret

00000c8e <snprintf>:
     c8e:	ae e0       	ldi	r26, 0x0E	; 14
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	ec e4       	ldi	r30, 0x4C	; 76
     c94:	f6 e0       	ldi	r31, 0x06	; 6
     c96:	e8 c2       	rjmp	.+1488   	; 0x1268 <__prologue_saves__+0x1c>
     c98:	0d 89       	ldd	r16, Y+21	; 0x15
     c9a:	1e 89       	ldd	r17, Y+22	; 0x16
     c9c:	8f 89       	ldd	r24, Y+23	; 0x17
     c9e:	98 8d       	ldd	r25, Y+24	; 0x18
     ca0:	26 e0       	ldi	r18, 0x06	; 6
     ca2:	2c 83       	std	Y+4, r18	; 0x04
     ca4:	1a 83       	std	Y+2, r17	; 0x02
     ca6:	09 83       	std	Y+1, r16	; 0x01
     ca8:	97 ff       	sbrs	r25, 7
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <snprintf+0x22>
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e8       	ldi	r25, 0x80	; 128
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	9e 83       	std	Y+6, r25	; 0x06
     cb4:	8d 83       	std	Y+5, r24	; 0x05
     cb6:	ae 01       	movw	r20, r28
     cb8:	45 5e       	subi	r20, 0xE5	; 229
     cba:	5f 4f       	sbci	r21, 0xFF	; 255
     cbc:	69 8d       	ldd	r22, Y+25	; 0x19
     cbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cc0:	ce 01       	movw	r24, r28
     cc2:	01 96       	adiw	r24, 0x01	; 1
     cc4:	11 d0       	rcall	.+34     	; 0xce8 <vfprintf>
     cc6:	4d 81       	ldd	r20, Y+5	; 0x05
     cc8:	5e 81       	ldd	r21, Y+6	; 0x06
     cca:	57 fd       	sbrc	r21, 7
     ccc:	0a c0       	rjmp	.+20     	; 0xce2 <snprintf+0x54>
     cce:	2f 81       	ldd	r18, Y+7	; 0x07
     cd0:	38 85       	ldd	r19, Y+8	; 0x08
     cd2:	42 17       	cp	r20, r18
     cd4:	53 07       	cpc	r21, r19
     cd6:	0c f4       	brge	.+2      	; 0xcda <snprintf+0x4c>
     cd8:	9a 01       	movw	r18, r20
     cda:	f8 01       	movw	r30, r16
     cdc:	e2 0f       	add	r30, r18
     cde:	f3 1f       	adc	r31, r19
     ce0:	10 82       	st	Z, r1
     ce2:	2e 96       	adiw	r28, 0x0e	; 14
     ce4:	e4 e0       	ldi	r30, 0x04	; 4
     ce6:	dc c2       	rjmp	.+1464   	; 0x12a0 <__epilogue_restores__+0x1c>

00000ce8 <vfprintf>:
     ce8:	ab e0       	ldi	r26, 0x0B	; 11
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	e9 e7       	ldi	r30, 0x79	; 121
     cee:	f6 e0       	ldi	r31, 0x06	; 6
     cf0:	ad c2       	rjmp	.+1370   	; 0x124c <__prologue_saves__>
     cf2:	6c 01       	movw	r12, r24
     cf4:	7b 01       	movw	r14, r22
     cf6:	8a 01       	movw	r16, r20
     cf8:	fc 01       	movw	r30, r24
     cfa:	17 82       	std	Z+7, r1	; 0x07
     cfc:	16 82       	std	Z+6, r1	; 0x06
     cfe:	83 81       	ldd	r24, Z+3	; 0x03
     d00:	81 ff       	sbrs	r24, 1
     d02:	bf c1       	rjmp	.+894    	; 0x1082 <vfprintf+0x39a>
     d04:	ce 01       	movw	r24, r28
     d06:	01 96       	adiw	r24, 0x01	; 1
     d08:	3c 01       	movw	r6, r24
     d0a:	f6 01       	movw	r30, r12
     d0c:	93 81       	ldd	r25, Z+3	; 0x03
     d0e:	f7 01       	movw	r30, r14
     d10:	93 fd       	sbrc	r25, 3
     d12:	85 91       	lpm	r24, Z+
     d14:	93 ff       	sbrs	r25, 3
     d16:	81 91       	ld	r24, Z+
     d18:	7f 01       	movw	r14, r30
     d1a:	88 23       	and	r24, r24
     d1c:	09 f4       	brne	.+2      	; 0xd20 <vfprintf+0x38>
     d1e:	ad c1       	rjmp	.+858    	; 0x107a <vfprintf+0x392>
     d20:	85 32       	cpi	r24, 0x25	; 37
     d22:	39 f4       	brne	.+14     	; 0xd32 <vfprintf+0x4a>
     d24:	93 fd       	sbrc	r25, 3
     d26:	85 91       	lpm	r24, Z+
     d28:	93 ff       	sbrs	r25, 3
     d2a:	81 91       	ld	r24, Z+
     d2c:	7f 01       	movw	r14, r30
     d2e:	85 32       	cpi	r24, 0x25	; 37
     d30:	21 f4       	brne	.+8      	; 0xd3a <vfprintf+0x52>
     d32:	b6 01       	movw	r22, r12
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	c0 d1       	rcall	.+896    	; 0x10b8 <fputc>
     d38:	e8 cf       	rjmp	.-48     	; 0xd0a <vfprintf+0x22>
     d3a:	91 2c       	mov	r9, r1
     d3c:	21 2c       	mov	r2, r1
     d3e:	31 2c       	mov	r3, r1
     d40:	ff e1       	ldi	r31, 0x1F	; 31
     d42:	f3 15       	cp	r31, r3
     d44:	d8 f0       	brcs	.+54     	; 0xd7c <vfprintf+0x94>
     d46:	8b 32       	cpi	r24, 0x2B	; 43
     d48:	79 f0       	breq	.+30     	; 0xd68 <vfprintf+0x80>
     d4a:	38 f4       	brcc	.+14     	; 0xd5a <vfprintf+0x72>
     d4c:	80 32       	cpi	r24, 0x20	; 32
     d4e:	79 f0       	breq	.+30     	; 0xd6e <vfprintf+0x86>
     d50:	83 32       	cpi	r24, 0x23	; 35
     d52:	a1 f4       	brne	.+40     	; 0xd7c <vfprintf+0x94>
     d54:	23 2d       	mov	r18, r3
     d56:	20 61       	ori	r18, 0x10	; 16
     d58:	1d c0       	rjmp	.+58     	; 0xd94 <vfprintf+0xac>
     d5a:	8d 32       	cpi	r24, 0x2D	; 45
     d5c:	61 f0       	breq	.+24     	; 0xd76 <vfprintf+0x8e>
     d5e:	80 33       	cpi	r24, 0x30	; 48
     d60:	69 f4       	brne	.+26     	; 0xd7c <vfprintf+0x94>
     d62:	23 2d       	mov	r18, r3
     d64:	21 60       	ori	r18, 0x01	; 1
     d66:	16 c0       	rjmp	.+44     	; 0xd94 <vfprintf+0xac>
     d68:	83 2d       	mov	r24, r3
     d6a:	82 60       	ori	r24, 0x02	; 2
     d6c:	38 2e       	mov	r3, r24
     d6e:	e3 2d       	mov	r30, r3
     d70:	e4 60       	ori	r30, 0x04	; 4
     d72:	3e 2e       	mov	r3, r30
     d74:	2a c0       	rjmp	.+84     	; 0xdca <vfprintf+0xe2>
     d76:	f3 2d       	mov	r31, r3
     d78:	f8 60       	ori	r31, 0x08	; 8
     d7a:	1d c0       	rjmp	.+58     	; 0xdb6 <vfprintf+0xce>
     d7c:	37 fc       	sbrc	r3, 7
     d7e:	2d c0       	rjmp	.+90     	; 0xdda <vfprintf+0xf2>
     d80:	20 ed       	ldi	r18, 0xD0	; 208
     d82:	28 0f       	add	r18, r24
     d84:	2a 30       	cpi	r18, 0x0A	; 10
     d86:	40 f0       	brcs	.+16     	; 0xd98 <vfprintf+0xb0>
     d88:	8e 32       	cpi	r24, 0x2E	; 46
     d8a:	b9 f4       	brne	.+46     	; 0xdba <vfprintf+0xd2>
     d8c:	36 fc       	sbrc	r3, 6
     d8e:	75 c1       	rjmp	.+746    	; 0x107a <vfprintf+0x392>
     d90:	23 2d       	mov	r18, r3
     d92:	20 64       	ori	r18, 0x40	; 64
     d94:	32 2e       	mov	r3, r18
     d96:	19 c0       	rjmp	.+50     	; 0xdca <vfprintf+0xe2>
     d98:	36 fe       	sbrs	r3, 6
     d9a:	06 c0       	rjmp	.+12     	; 0xda8 <vfprintf+0xc0>
     d9c:	8a e0       	ldi	r24, 0x0A	; 10
     d9e:	98 9e       	mul	r9, r24
     da0:	20 0d       	add	r18, r0
     da2:	11 24       	eor	r1, r1
     da4:	92 2e       	mov	r9, r18
     da6:	11 c0       	rjmp	.+34     	; 0xdca <vfprintf+0xe2>
     da8:	ea e0       	ldi	r30, 0x0A	; 10
     daa:	2e 9e       	mul	r2, r30
     dac:	20 0d       	add	r18, r0
     dae:	11 24       	eor	r1, r1
     db0:	22 2e       	mov	r2, r18
     db2:	f3 2d       	mov	r31, r3
     db4:	f0 62       	ori	r31, 0x20	; 32
     db6:	3f 2e       	mov	r3, r31
     db8:	08 c0       	rjmp	.+16     	; 0xdca <vfprintf+0xe2>
     dba:	8c 36       	cpi	r24, 0x6C	; 108
     dbc:	21 f4       	brne	.+8      	; 0xdc6 <vfprintf+0xde>
     dbe:	83 2d       	mov	r24, r3
     dc0:	80 68       	ori	r24, 0x80	; 128
     dc2:	38 2e       	mov	r3, r24
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <vfprintf+0xe2>
     dc6:	88 36       	cpi	r24, 0x68	; 104
     dc8:	41 f4       	brne	.+16     	; 0xdda <vfprintf+0xf2>
     dca:	f7 01       	movw	r30, r14
     dcc:	93 fd       	sbrc	r25, 3
     dce:	85 91       	lpm	r24, Z+
     dd0:	93 ff       	sbrs	r25, 3
     dd2:	81 91       	ld	r24, Z+
     dd4:	7f 01       	movw	r14, r30
     dd6:	81 11       	cpse	r24, r1
     dd8:	b3 cf       	rjmp	.-154    	; 0xd40 <vfprintf+0x58>
     dda:	98 2f       	mov	r25, r24
     ddc:	9f 7d       	andi	r25, 0xDF	; 223
     dde:	95 54       	subi	r25, 0x45	; 69
     de0:	93 30       	cpi	r25, 0x03	; 3
     de2:	28 f4       	brcc	.+10     	; 0xdee <vfprintf+0x106>
     de4:	0c 5f       	subi	r16, 0xFC	; 252
     de6:	1f 4f       	sbci	r17, 0xFF	; 255
     de8:	9f e3       	ldi	r25, 0x3F	; 63
     dea:	99 83       	std	Y+1, r25	; 0x01
     dec:	0d c0       	rjmp	.+26     	; 0xe08 <vfprintf+0x120>
     dee:	83 36       	cpi	r24, 0x63	; 99
     df0:	31 f0       	breq	.+12     	; 0xdfe <vfprintf+0x116>
     df2:	83 37       	cpi	r24, 0x73	; 115
     df4:	71 f0       	breq	.+28     	; 0xe12 <vfprintf+0x12a>
     df6:	83 35       	cpi	r24, 0x53	; 83
     df8:	09 f0       	breq	.+2      	; 0xdfc <vfprintf+0x114>
     dfa:	55 c0       	rjmp	.+170    	; 0xea6 <vfprintf+0x1be>
     dfc:	20 c0       	rjmp	.+64     	; 0xe3e <vfprintf+0x156>
     dfe:	f8 01       	movw	r30, r16
     e00:	80 81       	ld	r24, Z
     e02:	89 83       	std	Y+1, r24	; 0x01
     e04:	0e 5f       	subi	r16, 0xFE	; 254
     e06:	1f 4f       	sbci	r17, 0xFF	; 255
     e08:	88 24       	eor	r8, r8
     e0a:	83 94       	inc	r8
     e0c:	91 2c       	mov	r9, r1
     e0e:	53 01       	movw	r10, r6
     e10:	12 c0       	rjmp	.+36     	; 0xe36 <vfprintf+0x14e>
     e12:	28 01       	movw	r4, r16
     e14:	f2 e0       	ldi	r31, 0x02	; 2
     e16:	4f 0e       	add	r4, r31
     e18:	51 1c       	adc	r5, r1
     e1a:	f8 01       	movw	r30, r16
     e1c:	a0 80       	ld	r10, Z
     e1e:	b1 80       	ldd	r11, Z+1	; 0x01
     e20:	36 fe       	sbrs	r3, 6
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <vfprintf+0x142>
     e24:	69 2d       	mov	r22, r9
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <vfprintf+0x146>
     e2a:	6f ef       	ldi	r22, 0xFF	; 255
     e2c:	7f ef       	ldi	r23, 0xFF	; 255
     e2e:	c5 01       	movw	r24, r10
     e30:	38 d1       	rcall	.+624    	; 0x10a2 <strnlen>
     e32:	4c 01       	movw	r8, r24
     e34:	82 01       	movw	r16, r4
     e36:	f3 2d       	mov	r31, r3
     e38:	ff 77       	andi	r31, 0x7F	; 127
     e3a:	3f 2e       	mov	r3, r31
     e3c:	15 c0       	rjmp	.+42     	; 0xe68 <vfprintf+0x180>
     e3e:	28 01       	movw	r4, r16
     e40:	22 e0       	ldi	r18, 0x02	; 2
     e42:	42 0e       	add	r4, r18
     e44:	51 1c       	adc	r5, r1
     e46:	f8 01       	movw	r30, r16
     e48:	a0 80       	ld	r10, Z
     e4a:	b1 80       	ldd	r11, Z+1	; 0x01
     e4c:	36 fe       	sbrs	r3, 6
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <vfprintf+0x16e>
     e50:	69 2d       	mov	r22, r9
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <vfprintf+0x172>
     e56:	6f ef       	ldi	r22, 0xFF	; 255
     e58:	7f ef       	ldi	r23, 0xFF	; 255
     e5a:	c5 01       	movw	r24, r10
     e5c:	17 d1       	rcall	.+558    	; 0x108c <strnlen_P>
     e5e:	4c 01       	movw	r8, r24
     e60:	f3 2d       	mov	r31, r3
     e62:	f0 68       	ori	r31, 0x80	; 128
     e64:	3f 2e       	mov	r3, r31
     e66:	82 01       	movw	r16, r4
     e68:	33 fc       	sbrc	r3, 3
     e6a:	19 c0       	rjmp	.+50     	; 0xe9e <vfprintf+0x1b6>
     e6c:	82 2d       	mov	r24, r2
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	88 16       	cp	r8, r24
     e72:	99 06       	cpc	r9, r25
     e74:	a0 f4       	brcc	.+40     	; 0xe9e <vfprintf+0x1b6>
     e76:	b6 01       	movw	r22, r12
     e78:	80 e2       	ldi	r24, 0x20	; 32
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	1d d1       	rcall	.+570    	; 0x10b8 <fputc>
     e7e:	2a 94       	dec	r2
     e80:	f5 cf       	rjmp	.-22     	; 0xe6c <vfprintf+0x184>
     e82:	f5 01       	movw	r30, r10
     e84:	37 fc       	sbrc	r3, 7
     e86:	85 91       	lpm	r24, Z+
     e88:	37 fe       	sbrs	r3, 7
     e8a:	81 91       	ld	r24, Z+
     e8c:	5f 01       	movw	r10, r30
     e8e:	b6 01       	movw	r22, r12
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	12 d1       	rcall	.+548    	; 0x10b8 <fputc>
     e94:	21 10       	cpse	r2, r1
     e96:	2a 94       	dec	r2
     e98:	21 e0       	ldi	r18, 0x01	; 1
     e9a:	82 1a       	sub	r8, r18
     e9c:	91 08       	sbc	r9, r1
     e9e:	81 14       	cp	r8, r1
     ea0:	91 04       	cpc	r9, r1
     ea2:	79 f7       	brne	.-34     	; 0xe82 <vfprintf+0x19a>
     ea4:	e1 c0       	rjmp	.+450    	; 0x1068 <vfprintf+0x380>
     ea6:	84 36       	cpi	r24, 0x64	; 100
     ea8:	11 f0       	breq	.+4      	; 0xeae <vfprintf+0x1c6>
     eaa:	89 36       	cpi	r24, 0x69	; 105
     eac:	39 f5       	brne	.+78     	; 0xefc <vfprintf+0x214>
     eae:	f8 01       	movw	r30, r16
     eb0:	37 fe       	sbrs	r3, 7
     eb2:	07 c0       	rjmp	.+14     	; 0xec2 <vfprintf+0x1da>
     eb4:	60 81       	ld	r22, Z
     eb6:	71 81       	ldd	r23, Z+1	; 0x01
     eb8:	82 81       	ldd	r24, Z+2	; 0x02
     eba:	93 81       	ldd	r25, Z+3	; 0x03
     ebc:	0c 5f       	subi	r16, 0xFC	; 252
     ebe:	1f 4f       	sbci	r17, 0xFF	; 255
     ec0:	08 c0       	rjmp	.+16     	; 0xed2 <vfprintf+0x1ea>
     ec2:	60 81       	ld	r22, Z
     ec4:	71 81       	ldd	r23, Z+1	; 0x01
     ec6:	07 2e       	mov	r0, r23
     ec8:	00 0c       	add	r0, r0
     eca:	88 0b       	sbc	r24, r24
     ecc:	99 0b       	sbc	r25, r25
     ece:	0e 5f       	subi	r16, 0xFE	; 254
     ed0:	1f 4f       	sbci	r17, 0xFF	; 255
     ed2:	f3 2d       	mov	r31, r3
     ed4:	ff 76       	andi	r31, 0x6F	; 111
     ed6:	3f 2e       	mov	r3, r31
     ed8:	97 ff       	sbrs	r25, 7
     eda:	09 c0       	rjmp	.+18     	; 0xeee <vfprintf+0x206>
     edc:	90 95       	com	r25
     ede:	80 95       	com	r24
     ee0:	70 95       	com	r23
     ee2:	61 95       	neg	r22
     ee4:	7f 4f       	sbci	r23, 0xFF	; 255
     ee6:	8f 4f       	sbci	r24, 0xFF	; 255
     ee8:	9f 4f       	sbci	r25, 0xFF	; 255
     eea:	f0 68       	ori	r31, 0x80	; 128
     eec:	3f 2e       	mov	r3, r31
     eee:	2a e0       	ldi	r18, 0x0A	; 10
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	a3 01       	movw	r20, r6
     ef4:	1d d1       	rcall	.+570    	; 0x1130 <__ultoa_invert>
     ef6:	88 2e       	mov	r8, r24
     ef8:	86 18       	sub	r8, r6
     efa:	44 c0       	rjmp	.+136    	; 0xf84 <vfprintf+0x29c>
     efc:	85 37       	cpi	r24, 0x75	; 117
     efe:	31 f4       	brne	.+12     	; 0xf0c <vfprintf+0x224>
     f00:	23 2d       	mov	r18, r3
     f02:	2f 7e       	andi	r18, 0xEF	; 239
     f04:	b2 2e       	mov	r11, r18
     f06:	2a e0       	ldi	r18, 0x0A	; 10
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	25 c0       	rjmp	.+74     	; 0xf56 <vfprintf+0x26e>
     f0c:	93 2d       	mov	r25, r3
     f0e:	99 7f       	andi	r25, 0xF9	; 249
     f10:	b9 2e       	mov	r11, r25
     f12:	8f 36       	cpi	r24, 0x6F	; 111
     f14:	c1 f0       	breq	.+48     	; 0xf46 <vfprintf+0x25e>
     f16:	18 f4       	brcc	.+6      	; 0xf1e <vfprintf+0x236>
     f18:	88 35       	cpi	r24, 0x58	; 88
     f1a:	79 f0       	breq	.+30     	; 0xf3a <vfprintf+0x252>
     f1c:	ae c0       	rjmp	.+348    	; 0x107a <vfprintf+0x392>
     f1e:	80 37       	cpi	r24, 0x70	; 112
     f20:	19 f0       	breq	.+6      	; 0xf28 <vfprintf+0x240>
     f22:	88 37       	cpi	r24, 0x78	; 120
     f24:	21 f0       	breq	.+8      	; 0xf2e <vfprintf+0x246>
     f26:	a9 c0       	rjmp	.+338    	; 0x107a <vfprintf+0x392>
     f28:	e9 2f       	mov	r30, r25
     f2a:	e0 61       	ori	r30, 0x10	; 16
     f2c:	be 2e       	mov	r11, r30
     f2e:	b4 fe       	sbrs	r11, 4
     f30:	0d c0       	rjmp	.+26     	; 0xf4c <vfprintf+0x264>
     f32:	fb 2d       	mov	r31, r11
     f34:	f4 60       	ori	r31, 0x04	; 4
     f36:	bf 2e       	mov	r11, r31
     f38:	09 c0       	rjmp	.+18     	; 0xf4c <vfprintf+0x264>
     f3a:	34 fe       	sbrs	r3, 4
     f3c:	0a c0       	rjmp	.+20     	; 0xf52 <vfprintf+0x26a>
     f3e:	29 2f       	mov	r18, r25
     f40:	26 60       	ori	r18, 0x06	; 6
     f42:	b2 2e       	mov	r11, r18
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <vfprintf+0x26a>
     f46:	28 e0       	ldi	r18, 0x08	; 8
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <vfprintf+0x26e>
     f4c:	20 e1       	ldi	r18, 0x10	; 16
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <vfprintf+0x26e>
     f52:	20 e1       	ldi	r18, 0x10	; 16
     f54:	32 e0       	ldi	r19, 0x02	; 2
     f56:	f8 01       	movw	r30, r16
     f58:	b7 fe       	sbrs	r11, 7
     f5a:	07 c0       	rjmp	.+14     	; 0xf6a <vfprintf+0x282>
     f5c:	60 81       	ld	r22, Z
     f5e:	71 81       	ldd	r23, Z+1	; 0x01
     f60:	82 81       	ldd	r24, Z+2	; 0x02
     f62:	93 81       	ldd	r25, Z+3	; 0x03
     f64:	0c 5f       	subi	r16, 0xFC	; 252
     f66:	1f 4f       	sbci	r17, 0xFF	; 255
     f68:	06 c0       	rjmp	.+12     	; 0xf76 <vfprintf+0x28e>
     f6a:	60 81       	ld	r22, Z
     f6c:	71 81       	ldd	r23, Z+1	; 0x01
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	0e 5f       	subi	r16, 0xFE	; 254
     f74:	1f 4f       	sbci	r17, 0xFF	; 255
     f76:	a3 01       	movw	r20, r6
     f78:	db d0       	rcall	.+438    	; 0x1130 <__ultoa_invert>
     f7a:	88 2e       	mov	r8, r24
     f7c:	86 18       	sub	r8, r6
     f7e:	fb 2d       	mov	r31, r11
     f80:	ff 77       	andi	r31, 0x7F	; 127
     f82:	3f 2e       	mov	r3, r31
     f84:	36 fe       	sbrs	r3, 6
     f86:	0d c0       	rjmp	.+26     	; 0xfa2 <vfprintf+0x2ba>
     f88:	23 2d       	mov	r18, r3
     f8a:	2e 7f       	andi	r18, 0xFE	; 254
     f8c:	a2 2e       	mov	r10, r18
     f8e:	89 14       	cp	r8, r9
     f90:	58 f4       	brcc	.+22     	; 0xfa8 <vfprintf+0x2c0>
     f92:	34 fe       	sbrs	r3, 4
     f94:	0b c0       	rjmp	.+22     	; 0xfac <vfprintf+0x2c4>
     f96:	32 fc       	sbrc	r3, 2
     f98:	09 c0       	rjmp	.+18     	; 0xfac <vfprintf+0x2c4>
     f9a:	83 2d       	mov	r24, r3
     f9c:	8e 7e       	andi	r24, 0xEE	; 238
     f9e:	a8 2e       	mov	r10, r24
     fa0:	05 c0       	rjmp	.+10     	; 0xfac <vfprintf+0x2c4>
     fa2:	b8 2c       	mov	r11, r8
     fa4:	a3 2c       	mov	r10, r3
     fa6:	03 c0       	rjmp	.+6      	; 0xfae <vfprintf+0x2c6>
     fa8:	b8 2c       	mov	r11, r8
     faa:	01 c0       	rjmp	.+2      	; 0xfae <vfprintf+0x2c6>
     fac:	b9 2c       	mov	r11, r9
     fae:	a4 fe       	sbrs	r10, 4
     fb0:	0f c0       	rjmp	.+30     	; 0xfd0 <vfprintf+0x2e8>
     fb2:	fe 01       	movw	r30, r28
     fb4:	e8 0d       	add	r30, r8
     fb6:	f1 1d       	adc	r31, r1
     fb8:	80 81       	ld	r24, Z
     fba:	80 33       	cpi	r24, 0x30	; 48
     fbc:	21 f4       	brne	.+8      	; 0xfc6 <vfprintf+0x2de>
     fbe:	9a 2d       	mov	r25, r10
     fc0:	99 7e       	andi	r25, 0xE9	; 233
     fc2:	a9 2e       	mov	r10, r25
     fc4:	09 c0       	rjmp	.+18     	; 0xfd8 <vfprintf+0x2f0>
     fc6:	a2 fe       	sbrs	r10, 2
     fc8:	06 c0       	rjmp	.+12     	; 0xfd6 <vfprintf+0x2ee>
     fca:	b3 94       	inc	r11
     fcc:	b3 94       	inc	r11
     fce:	04 c0       	rjmp	.+8      	; 0xfd8 <vfprintf+0x2f0>
     fd0:	8a 2d       	mov	r24, r10
     fd2:	86 78       	andi	r24, 0x86	; 134
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <vfprintf+0x2f0>
     fd6:	b3 94       	inc	r11
     fd8:	a3 fc       	sbrc	r10, 3
     fda:	10 c0       	rjmp	.+32     	; 0xffc <vfprintf+0x314>
     fdc:	a0 fe       	sbrs	r10, 0
     fde:	06 c0       	rjmp	.+12     	; 0xfec <vfprintf+0x304>
     fe0:	b2 14       	cp	r11, r2
     fe2:	80 f4       	brcc	.+32     	; 0x1004 <vfprintf+0x31c>
     fe4:	28 0c       	add	r2, r8
     fe6:	92 2c       	mov	r9, r2
     fe8:	9b 18       	sub	r9, r11
     fea:	0d c0       	rjmp	.+26     	; 0x1006 <vfprintf+0x31e>
     fec:	b2 14       	cp	r11, r2
     fee:	58 f4       	brcc	.+22     	; 0x1006 <vfprintf+0x31e>
     ff0:	b6 01       	movw	r22, r12
     ff2:	80 e2       	ldi	r24, 0x20	; 32
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	60 d0       	rcall	.+192    	; 0x10b8 <fputc>
     ff8:	b3 94       	inc	r11
     ffa:	f8 cf       	rjmp	.-16     	; 0xfec <vfprintf+0x304>
     ffc:	b2 14       	cp	r11, r2
     ffe:	18 f4       	brcc	.+6      	; 0x1006 <vfprintf+0x31e>
    1000:	2b 18       	sub	r2, r11
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <vfprintf+0x320>
    1004:	98 2c       	mov	r9, r8
    1006:	21 2c       	mov	r2, r1
    1008:	a4 fe       	sbrs	r10, 4
    100a:	0f c0       	rjmp	.+30     	; 0x102a <vfprintf+0x342>
    100c:	b6 01       	movw	r22, r12
    100e:	80 e3       	ldi	r24, 0x30	; 48
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	52 d0       	rcall	.+164    	; 0x10b8 <fputc>
    1014:	a2 fe       	sbrs	r10, 2
    1016:	16 c0       	rjmp	.+44     	; 0x1044 <vfprintf+0x35c>
    1018:	a1 fc       	sbrc	r10, 1
    101a:	03 c0       	rjmp	.+6      	; 0x1022 <vfprintf+0x33a>
    101c:	88 e7       	ldi	r24, 0x78	; 120
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <vfprintf+0x33e>
    1022:	88 e5       	ldi	r24, 0x58	; 88
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	b6 01       	movw	r22, r12
    1028:	0c c0       	rjmp	.+24     	; 0x1042 <vfprintf+0x35a>
    102a:	8a 2d       	mov	r24, r10
    102c:	86 78       	andi	r24, 0x86	; 134
    102e:	51 f0       	breq	.+20     	; 0x1044 <vfprintf+0x35c>
    1030:	a1 fe       	sbrs	r10, 1
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <vfprintf+0x350>
    1034:	8b e2       	ldi	r24, 0x2B	; 43
    1036:	01 c0       	rjmp	.+2      	; 0x103a <vfprintf+0x352>
    1038:	80 e2       	ldi	r24, 0x20	; 32
    103a:	a7 fc       	sbrc	r10, 7
    103c:	8d e2       	ldi	r24, 0x2D	; 45
    103e:	b6 01       	movw	r22, r12
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	3a d0       	rcall	.+116    	; 0x10b8 <fputc>
    1044:	89 14       	cp	r8, r9
    1046:	30 f4       	brcc	.+12     	; 0x1054 <vfprintf+0x36c>
    1048:	b6 01       	movw	r22, r12
    104a:	80 e3       	ldi	r24, 0x30	; 48
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	34 d0       	rcall	.+104    	; 0x10b8 <fputc>
    1050:	9a 94       	dec	r9
    1052:	f8 cf       	rjmp	.-16     	; 0x1044 <vfprintf+0x35c>
    1054:	8a 94       	dec	r8
    1056:	f3 01       	movw	r30, r6
    1058:	e8 0d       	add	r30, r8
    105a:	f1 1d       	adc	r31, r1
    105c:	80 81       	ld	r24, Z
    105e:	b6 01       	movw	r22, r12
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	2a d0       	rcall	.+84     	; 0x10b8 <fputc>
    1064:	81 10       	cpse	r8, r1
    1066:	f6 cf       	rjmp	.-20     	; 0x1054 <vfprintf+0x36c>
    1068:	22 20       	and	r2, r2
    106a:	09 f4       	brne	.+2      	; 0x106e <vfprintf+0x386>
    106c:	4e ce       	rjmp	.-868    	; 0xd0a <vfprintf+0x22>
    106e:	b6 01       	movw	r22, r12
    1070:	80 e2       	ldi	r24, 0x20	; 32
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	21 d0       	rcall	.+66     	; 0x10b8 <fputc>
    1076:	2a 94       	dec	r2
    1078:	f7 cf       	rjmp	.-18     	; 0x1068 <vfprintf+0x380>
    107a:	f6 01       	movw	r30, r12
    107c:	86 81       	ldd	r24, Z+6	; 0x06
    107e:	97 81       	ldd	r25, Z+7	; 0x07
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <vfprintf+0x39e>
    1082:	8f ef       	ldi	r24, 0xFF	; 255
    1084:	9f ef       	ldi	r25, 0xFF	; 255
    1086:	2b 96       	adiw	r28, 0x0b	; 11
    1088:	e2 e1       	ldi	r30, 0x12	; 18
    108a:	fc c0       	rjmp	.+504    	; 0x1284 <__epilogue_restores__>

0000108c <strnlen_P>:
    108c:	fc 01       	movw	r30, r24
    108e:	05 90       	lpm	r0, Z+
    1090:	61 50       	subi	r22, 0x01	; 1
    1092:	70 40       	sbci	r23, 0x00	; 0
    1094:	01 10       	cpse	r0, r1
    1096:	d8 f7       	brcc	.-10     	; 0x108e <strnlen_P+0x2>
    1098:	80 95       	com	r24
    109a:	90 95       	com	r25
    109c:	8e 0f       	add	r24, r30
    109e:	9f 1f       	adc	r25, r31
    10a0:	08 95       	ret

000010a2 <strnlen>:
    10a2:	fc 01       	movw	r30, r24
    10a4:	61 50       	subi	r22, 0x01	; 1
    10a6:	70 40       	sbci	r23, 0x00	; 0
    10a8:	01 90       	ld	r0, Z+
    10aa:	01 10       	cpse	r0, r1
    10ac:	d8 f7       	brcc	.-10     	; 0x10a4 <strnlen+0x2>
    10ae:	80 95       	com	r24
    10b0:	90 95       	com	r25
    10b2:	8e 0f       	add	r24, r30
    10b4:	9f 1f       	adc	r25, r31
    10b6:	08 95       	ret

000010b8 <fputc>:
    10b8:	0f 93       	push	r16
    10ba:	1f 93       	push	r17
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	fb 01       	movw	r30, r22
    10c2:	23 81       	ldd	r18, Z+3	; 0x03
    10c4:	21 fd       	sbrc	r18, 1
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <fputc+0x16>
    10c8:	8f ef       	ldi	r24, 0xFF	; 255
    10ca:	9f ef       	ldi	r25, 0xFF	; 255
    10cc:	2c c0       	rjmp	.+88     	; 0x1126 <fputc+0x6e>
    10ce:	22 ff       	sbrs	r18, 2
    10d0:	16 c0       	rjmp	.+44     	; 0x10fe <fputc+0x46>
    10d2:	46 81       	ldd	r20, Z+6	; 0x06
    10d4:	57 81       	ldd	r21, Z+7	; 0x07
    10d6:	24 81       	ldd	r18, Z+4	; 0x04
    10d8:	35 81       	ldd	r19, Z+5	; 0x05
    10da:	42 17       	cp	r20, r18
    10dc:	53 07       	cpc	r21, r19
    10de:	44 f4       	brge	.+16     	; 0x10f0 <fputc+0x38>
    10e0:	a0 81       	ld	r26, Z
    10e2:	b1 81       	ldd	r27, Z+1	; 0x01
    10e4:	9d 01       	movw	r18, r26
    10e6:	2f 5f       	subi	r18, 0xFF	; 255
    10e8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ea:	31 83       	std	Z+1, r19	; 0x01
    10ec:	20 83       	st	Z, r18
    10ee:	8c 93       	st	X, r24
    10f0:	26 81       	ldd	r18, Z+6	; 0x06
    10f2:	37 81       	ldd	r19, Z+7	; 0x07
    10f4:	2f 5f       	subi	r18, 0xFF	; 255
    10f6:	3f 4f       	sbci	r19, 0xFF	; 255
    10f8:	37 83       	std	Z+7, r19	; 0x07
    10fa:	26 83       	std	Z+6, r18	; 0x06
    10fc:	14 c0       	rjmp	.+40     	; 0x1126 <fputc+0x6e>
    10fe:	8b 01       	movw	r16, r22
    1100:	ec 01       	movw	r28, r24
    1102:	fb 01       	movw	r30, r22
    1104:	00 84       	ldd	r0, Z+8	; 0x08
    1106:	f1 85       	ldd	r31, Z+9	; 0x09
    1108:	e0 2d       	mov	r30, r0
    110a:	09 95       	icall
    110c:	89 2b       	or	r24, r25
    110e:	e1 f6       	brne	.-72     	; 0x10c8 <fputc+0x10>
    1110:	d8 01       	movw	r26, r16
    1112:	16 96       	adiw	r26, 0x06	; 6
    1114:	8d 91       	ld	r24, X+
    1116:	9c 91       	ld	r25, X
    1118:	17 97       	sbiw	r26, 0x07	; 7
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	17 96       	adiw	r26, 0x07	; 7
    111e:	9c 93       	st	X, r25
    1120:	8e 93       	st	-X, r24
    1122:	16 97       	sbiw	r26, 0x06	; 6
    1124:	ce 01       	movw	r24, r28
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	08 95       	ret

00001130 <__ultoa_invert>:
    1130:	fa 01       	movw	r30, r20
    1132:	aa 27       	eor	r26, r26
    1134:	28 30       	cpi	r18, 0x08	; 8
    1136:	51 f1       	breq	.+84     	; 0x118c <__ultoa_invert+0x5c>
    1138:	20 31       	cpi	r18, 0x10	; 16
    113a:	81 f1       	breq	.+96     	; 0x119c <__ultoa_invert+0x6c>
    113c:	e8 94       	clt
    113e:	6f 93       	push	r22
    1140:	6e 7f       	andi	r22, 0xFE	; 254
    1142:	6e 5f       	subi	r22, 0xFE	; 254
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
    1146:	8f 4f       	sbci	r24, 0xFF	; 255
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	af 4f       	sbci	r26, 0xFF	; 255
    114c:	b1 e0       	ldi	r27, 0x01	; 1
    114e:	3e d0       	rcall	.+124    	; 0x11cc <__ultoa_invert+0x9c>
    1150:	b4 e0       	ldi	r27, 0x04	; 4
    1152:	3c d0       	rcall	.+120    	; 0x11cc <__ultoa_invert+0x9c>
    1154:	67 0f       	add	r22, r23
    1156:	78 1f       	adc	r23, r24
    1158:	89 1f       	adc	r24, r25
    115a:	9a 1f       	adc	r25, r26
    115c:	a1 1d       	adc	r26, r1
    115e:	68 0f       	add	r22, r24
    1160:	79 1f       	adc	r23, r25
    1162:	8a 1f       	adc	r24, r26
    1164:	91 1d       	adc	r25, r1
    1166:	a1 1d       	adc	r26, r1
    1168:	6a 0f       	add	r22, r26
    116a:	71 1d       	adc	r23, r1
    116c:	81 1d       	adc	r24, r1
    116e:	91 1d       	adc	r25, r1
    1170:	a1 1d       	adc	r26, r1
    1172:	20 d0       	rcall	.+64     	; 0x11b4 <__ultoa_invert+0x84>
    1174:	09 f4       	brne	.+2      	; 0x1178 <__ultoa_invert+0x48>
    1176:	68 94       	set
    1178:	3f 91       	pop	r19
    117a:	2a e0       	ldi	r18, 0x0A	; 10
    117c:	26 9f       	mul	r18, r22
    117e:	11 24       	eor	r1, r1
    1180:	30 19       	sub	r19, r0
    1182:	30 5d       	subi	r19, 0xD0	; 208
    1184:	31 93       	st	Z+, r19
    1186:	de f6       	brtc	.-74     	; 0x113e <__ultoa_invert+0xe>
    1188:	cf 01       	movw	r24, r30
    118a:	08 95       	ret
    118c:	46 2f       	mov	r20, r22
    118e:	47 70       	andi	r20, 0x07	; 7
    1190:	40 5d       	subi	r20, 0xD0	; 208
    1192:	41 93       	st	Z+, r20
    1194:	b3 e0       	ldi	r27, 0x03	; 3
    1196:	0f d0       	rcall	.+30     	; 0x11b6 <__ultoa_invert+0x86>
    1198:	c9 f7       	brne	.-14     	; 0x118c <__ultoa_invert+0x5c>
    119a:	f6 cf       	rjmp	.-20     	; 0x1188 <__ultoa_invert+0x58>
    119c:	46 2f       	mov	r20, r22
    119e:	4f 70       	andi	r20, 0x0F	; 15
    11a0:	40 5d       	subi	r20, 0xD0	; 208
    11a2:	4a 33       	cpi	r20, 0x3A	; 58
    11a4:	18 f0       	brcs	.+6      	; 0x11ac <__ultoa_invert+0x7c>
    11a6:	49 5d       	subi	r20, 0xD9	; 217
    11a8:	31 fd       	sbrc	r19, 1
    11aa:	40 52       	subi	r20, 0x20	; 32
    11ac:	41 93       	st	Z+, r20
    11ae:	02 d0       	rcall	.+4      	; 0x11b4 <__ultoa_invert+0x84>
    11b0:	a9 f7       	brne	.-22     	; 0x119c <__ultoa_invert+0x6c>
    11b2:	ea cf       	rjmp	.-44     	; 0x1188 <__ultoa_invert+0x58>
    11b4:	b4 e0       	ldi	r27, 0x04	; 4
    11b6:	a6 95       	lsr	r26
    11b8:	97 95       	ror	r25
    11ba:	87 95       	ror	r24
    11bc:	77 95       	ror	r23
    11be:	67 95       	ror	r22
    11c0:	ba 95       	dec	r27
    11c2:	c9 f7       	brne	.-14     	; 0x11b6 <__ultoa_invert+0x86>
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	61 05       	cpc	r22, r1
    11c8:	71 05       	cpc	r23, r1
    11ca:	08 95       	ret
    11cc:	9b 01       	movw	r18, r22
    11ce:	ac 01       	movw	r20, r24
    11d0:	0a 2e       	mov	r0, r26
    11d2:	06 94       	lsr	r0
    11d4:	57 95       	ror	r21
    11d6:	47 95       	ror	r20
    11d8:	37 95       	ror	r19
    11da:	27 95       	ror	r18
    11dc:	ba 95       	dec	r27
    11de:	c9 f7       	brne	.-14     	; 0x11d2 <__ultoa_invert+0xa2>
    11e0:	62 0f       	add	r22, r18
    11e2:	73 1f       	adc	r23, r19
    11e4:	84 1f       	adc	r24, r20
    11e6:	95 1f       	adc	r25, r21
    11e8:	a0 1d       	adc	r26, r0
    11ea:	08 95       	ret

000011ec <eeprom_read_block>:
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22

000011f0 <eeprom_read_blraw>:
    11f0:	fc 01       	movw	r30, r24
    11f2:	e1 99       	sbic	0x1c, 1	; 28
    11f4:	fe cf       	rjmp	.-4      	; 0x11f2 <eeprom_read_blraw+0x2>
    11f6:	06 c0       	rjmp	.+12     	; 0x1204 <eeprom_read_blraw+0x14>
    11f8:	ff bb       	out	0x1f, r31	; 31
    11fa:	ee bb       	out	0x1e, r30	; 30
    11fc:	e0 9a       	sbi	0x1c, 0	; 28
    11fe:	31 96       	adiw	r30, 0x01	; 1
    1200:	0d b2       	in	r0, 0x1d	; 29
    1202:	0d 92       	st	X+, r0
    1204:	41 50       	subi	r20, 0x01	; 1
    1206:	50 40       	sbci	r21, 0x00	; 0
    1208:	b8 f7       	brcc	.-18     	; 0x11f8 <eeprom_read_blraw+0x8>
    120a:	08 95       	ret

0000120c <eeprom_update_block>:
    120c:	dc 01       	movw	r26, r24
    120e:	a4 0f       	add	r26, r20
    1210:	b5 1f       	adc	r27, r21
    1212:	41 50       	subi	r20, 0x01	; 1
    1214:	50 40       	sbci	r21, 0x00	; 0
    1216:	40 f0       	brcs	.+16     	; 0x1228 <eeprom_update_block+0x1c>
    1218:	cb 01       	movw	r24, r22
    121a:	84 0f       	add	r24, r20
    121c:	95 1f       	adc	r25, r21
    121e:	2e 91       	ld	r18, -X
    1220:	05 d0       	rcall	.+10     	; 0x122c <eeprom_update_r18>
    1222:	41 50       	subi	r20, 0x01	; 1
    1224:	50 40       	sbci	r21, 0x00	; 0
    1226:	d8 f7       	brcc	.-10     	; 0x121e <eeprom_update_block+0x12>
    1228:	08 95       	ret

0000122a <eeprom_update_byte>:
    122a:	26 2f       	mov	r18, r22

0000122c <eeprom_update_r18>:
    122c:	e1 99       	sbic	0x1c, 1	; 28
    122e:	fe cf       	rjmp	.-4      	; 0x122c <eeprom_update_r18>
    1230:	9f bb       	out	0x1f, r25	; 31
    1232:	8e bb       	out	0x1e, r24	; 30
    1234:	e0 9a       	sbi	0x1c, 0	; 28
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	0d b2       	in	r0, 0x1d	; 29
    123a:	02 16       	cp	r0, r18
    123c:	31 f0       	breq	.+12     	; 0x124a <eeprom_update_r18+0x1e>
    123e:	2d bb       	out	0x1d, r18	; 29
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	e2 9a       	sbi	0x1c, 2	; 28
    1246:	e1 9a       	sbi	0x1c, 1	; 28
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	08 95       	ret

0000124c <__prologue_saves__>:
    124c:	2f 92       	push	r2
    124e:	3f 92       	push	r3
    1250:	4f 92       	push	r4
    1252:	5f 92       	push	r5
    1254:	6f 92       	push	r6
    1256:	7f 92       	push	r7
    1258:	8f 92       	push	r8
    125a:	9f 92       	push	r9
    125c:	af 92       	push	r10
    125e:	bf 92       	push	r11
    1260:	cf 92       	push	r12
    1262:	df 92       	push	r13
    1264:	ef 92       	push	r14
    1266:	ff 92       	push	r15
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	ca 1b       	sub	r28, r26
    1276:	db 0b       	sbc	r29, r27
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	09 94       	ijmp

00001284 <__epilogue_restores__>:
    1284:	2a 88       	ldd	r2, Y+18	; 0x12
    1286:	39 88       	ldd	r3, Y+17	; 0x11
    1288:	48 88       	ldd	r4, Y+16	; 0x10
    128a:	5f 84       	ldd	r5, Y+15	; 0x0f
    128c:	6e 84       	ldd	r6, Y+14	; 0x0e
    128e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1290:	8c 84       	ldd	r8, Y+12	; 0x0c
    1292:	9b 84       	ldd	r9, Y+11	; 0x0b
    1294:	aa 84       	ldd	r10, Y+10	; 0x0a
    1296:	b9 84       	ldd	r11, Y+9	; 0x09
    1298:	c8 84       	ldd	r12, Y+8	; 0x08
    129a:	df 80       	ldd	r13, Y+7	; 0x07
    129c:	ee 80       	ldd	r14, Y+6	; 0x06
    129e:	fd 80       	ldd	r15, Y+5	; 0x05
    12a0:	0c 81       	ldd	r16, Y+4	; 0x04
    12a2:	1b 81       	ldd	r17, Y+3	; 0x03
    12a4:	aa 81       	ldd	r26, Y+2	; 0x02
    12a6:	b9 81       	ldd	r27, Y+1	; 0x01
    12a8:	ce 0f       	add	r28, r30
    12aa:	d1 1d       	adc	r29, r1
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	ed 01       	movw	r28, r26
    12b8:	08 95       	ret

000012ba <_exit>:
    12ba:	f8 94       	cli

000012bc <__stop_program>:
    12bc:	ff cf       	rjmp	.-2      	; 0x12bc <__stop_program>
