
main.elf:     формат файла elf32-avr

Разделы:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00001fa4  00002038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800148  00800148  00002080  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002094  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000020d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027f1  00000000  00000000  0000215c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db2  00000000  00000000  0000494d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001166  00000000  00000000  000056ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000780  00000000  00000000  00006868  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000913  00000000  00000000  00006fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e3e  00000000  00000000  000078fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00009739  2**0
                  CONTENTS, READONLY, DEBUGGING

Дизассемблирование раздела .text:

00000000 <__vectors>:
       0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
       4:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__vector_1>
       8:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_2>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_3>
      10:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      14:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_5>
      18:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      1c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      20:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      24:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      28:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      2c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      30:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      34:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_13>
      38:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      3c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      40:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      44:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      48:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      4c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      50:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      54:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      58:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      5c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      60:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      64:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      68:	7e 09       	sbc	r23, r14
      6a:	d4 09       	sbc	r29, r4
      6c:	d4 09       	sbc	r29, r4
      6e:	d4 09       	sbc	r29, r4
      70:	d4 09       	sbc	r29, r4
      72:	d4 09       	sbc	r29, r4
      74:	d4 09       	sbc	r29, r4
      76:	82 09       	sbc	r24, r2
      78:	d4 09       	sbc	r29, r4
      7a:	8c 09       	sbc	r24, r12
      7c:	d4 09       	sbc	r29, r4
      7e:	b5 09       	sbc	r27, r5
      80:	d4 09       	sbc	r29, r4
      82:	b9 09       	sbc	r27, r9
      84:	d4 09       	sbc	r29, r4
      86:	c0 09       	sbc	r28, r0
      88:	08 07       	cpc	r16, r24
      8a:	0a 07       	cpc	r16, r26
      8c:	0c 07       	cpc	r16, r28
      8e:	ea 06       	cpc	r14, r26
      90:	ec 06       	cpc	r14, r28
      92:	f0 06       	cpc	r15, r16
      94:	f2 06       	cpc	r15, r18
      96:	f4 06       	cpc	r15, r20
      98:	0a 07       	cpc	r16, r26
      9a:	f8 06       	cpc	r15, r24
      9c:	02 07       	cpc	r16, r18
      9e:	0a 07       	cpc	r16, r26
      a0:	0a 07       	cpc	r16, r26
      a2:	fe 06       	cpc	r15, r30
      a4:	0a 07       	cpc	r16, r26
      a6:	0a 07       	cpc	r16, r26
      a8:	0a 07       	cpc	r16, r26
      aa:	06 07       	cpc	r16, r22
      ac:	0a 07       	cpc	r16, r26
      ae:	0a 07       	cpc	r16, r26
      b0:	e8 06       	cpc	r14, r24
      b2:	0a 07       	cpc	r16, r26
      b4:	0a 07       	cpc	r16, r26
      b6:	0a 07       	cpc	r16, r26
      b8:	0a 07       	cpc	r16, r26
      ba:	0a 07       	cpc	r16, r26
      bc:	0a 07       	cpc	r16, r26
      be:	0a 07       	cpc	r16, r26
      c0:	0a 07       	cpc	r16, r26
      c2:	0a 07       	cpc	r16, r26
      c4:	0a 07       	cpc	r16, r26
      c6:	0a 07       	cpc	r16, r26
      c8:	0a 07       	cpc	r16, r26
      ca:	0a 07       	cpc	r16, r26
      cc:	0c 07       	cpc	r16, r28
      ce:	ea 06       	cpc	r14, r26
      d0:	ee 06       	cpc	r14, r30
      d2:	f0 06       	cpc	r15, r16
      d4:	f2 06       	cpc	r15, r18
      d6:	f4 06       	cpc	r15, r20
      d8:	0a 07       	cpc	r16, r26
      da:	f6 06       	cpc	r15, r22
      dc:	00 07       	cpc	r16, r16
      de:	0a 07       	cpc	r16, r26
      e0:	0a 07       	cpc	r16, r26
      e2:	0a 07       	cpc	r16, r26
      e4:	0a 07       	cpc	r16, r26
      e6:	fa 06       	cpc	r15, r26
      e8:	fc 06       	cpc	r15, r28
      ea:	0a 07       	cpc	r16, r26
      ec:	0a 07       	cpc	r16, r26
      ee:	04 07       	cpc	r16, r20
      f0:	0a 07       	cpc	r16, r26
      f2:	0d 07       	cpc	r16, r29

000000f4 <__ctors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	d8 e0       	ldi	r29, 0x08	; 8
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	cd bf       	out	0x3d, r28	; 61

00000100 <__do_copy_data>:
     100:	11 e0       	ldi	r17, 0x01	; 1
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b1 e0       	ldi	r27, 0x01	; 1
     106:	e4 ea       	ldi	r30, 0xA4	; 164
     108:	ff e1       	ldi	r31, 0x1F	; 31
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x10>
     10c:	05 90       	lpm	r0, Z+
     10e:	0d 92       	st	X+, r0
     110:	a8 34       	cpi	r26, 0x48	; 72
     112:	b1 07       	cpc	r27, r17
     114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0xc>

00000116 <__do_clear_bss>:
     116:	21 e0       	ldi	r18, 0x01	; 1
     118:	a8 e4       	ldi	r26, 0x48	; 72
     11a:	b1 e0       	ldi	r27, 0x01	; 1
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	ab 36       	cpi	r26, 0x6B	; 107
     122:	b2 07       	cpc	r27, r18
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
     126:	0e 94 71 08 	call	0x10e2	; 0x10e2 <main>
     12a:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <_exit>

0000012e <__bad_interrupt>:
     12e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000132 <int_to_uart>:
#include "subs.h"

//----------------------------------------------

void int_to_uart(char *id, int16_t num)
{
     132:	0f 93       	push	r16
     134:	1f 93       	push	r17
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	cd b7       	in	r28, 0x3d	; 61
     13c:	de b7       	in	r29, 0x3e	; 62
     13e:	2a 97       	sbiw	r28, 0x0a	; 10
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	f8 94       	cli
     144:	de bf       	out	0x3e, r29	; 62
     146:	0f be       	out	0x3f, r0	; 63
     148:	cd bf       	out	0x3d, r28	; 61
     14a:	16 2f       	mov	r17, r22
     14c:	07 2f       	mov	r16, r23
//    struct m2bytes nbuf;
    //USART_PutChar('\x0d');
    USART_SendStr(id);
     14e:	0e 94 4d 07 	call	0xe9a	; 0xe9a <USART_SendStr>
    USART_SendStr(":");
     152:	83 e1       	ldi	r24, 0x13	; 19
     154:	91 e0       	ldi	r25, 0x01	; 1
     156:	0e 94 4d 07 	call	0xe9a	; 0xe9a <USART_SendStr>
     num_to_str(&nbuf);
     USART_PutChar(nbuf.one);
     USART_PutChar(nbuf.two);
     */
    char buf[10];
    snprintf(buf, sizeof(buf), "%d", num);
     15a:	0f 93       	push	r16
     15c:	1f 93       	push	r17
     15e:	85 e1       	ldi	r24, 0x15	; 21
     160:	91 e0       	ldi	r25, 0x01	; 1
     162:	9f 93       	push	r25
     164:	8f 93       	push	r24
     166:	1f 92       	push	r1
     168:	8a e0       	ldi	r24, 0x0A	; 10
     16a:	8f 93       	push	r24
     16c:	8e 01       	movw	r16, r28
     16e:	0f 5f       	subi	r16, 0xFF	; 255
     170:	1f 4f       	sbci	r17, 0xFF	; 255
     172:	1f 93       	push	r17
     174:	0f 93       	push	r16
     176:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <snprintf>
    USART_SendStr(buf);
     17a:	c8 01       	movw	r24, r16
     17c:	0e 94 4d 07 	call	0xe9a	; 0xe9a <USART_SendStr>
    USART_PutChar(';');
     180:	8b e3       	ldi	r24, 0x3B	; 59
     182:	0e 94 40 07 	call	0xe80	; 0xe80 <USART_PutChar>
//    buf[cnt];
}
     186:	0f b6       	in	r0, 0x3f	; 63
     188:	f8 94       	cli
     18a:	de bf       	out	0x3e, r29	; 62
     18c:	0f be       	out	0x3f, r0	; 63
     18e:	cd bf       	out	0x3d, r28	; 61
     190:	2a 96       	adiw	r28, 0x0a	; 10
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	f8 94       	cli
     196:	de bf       	out	0x3e, r29	; 62
     198:	0f be       	out	0x3f, r0	; 63
     19a:	cd bf       	out	0x3d, r28	; 61
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	1f 91       	pop	r17
     1a2:	0f 91       	pop	r16
     1a4:	08 95       	ret

000001a6 <float_to_uart>:

void float_to_uart(char *id, float num)
{
     1a6:	cf 93       	push	r28
     1a8:	df 93       	push	r29
     1aa:	ec 01       	movw	r28, r24
    int_to_uart(id, num);
     1ac:	cb 01       	movw	r24, r22
     1ae:	ba 01       	movw	r22, r20
     1b0:	0e 94 36 0b 	call	0x166c	; 0x166c <__fixsfsi>
     1b4:	ce 01       	movw	r24, r28
     int8_t buf[10];
     int8_t cnt = snprintf(buf, sizeof(buf), "%g", num);
     USART_SendStr(buf);
     USART_Putint8_t(';');
     */
}
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
//    buf[cnt];
}

void float_to_uart(char *id, float num)
{
    int_to_uart(id, num);
     1ba:	0c 94 99 00 	jmp	0x132	; 0x132 <int_to_uart>

000001be <uart_nl>:
     */
}

void uart_nl(void)
{
    USART_PutChar('\x0d');
     1be:	8d e0       	ldi	r24, 0x0D	; 13
     1c0:	0e 94 40 07 	call	0xe80	; 0xe80 <USART_PutChar>
    USART_PutChar('\n');
     1c4:	8a e0       	ldi	r24, 0x0A	; 10
     1c6:	0c 94 40 07 	jmp	0xe80	; 0xe80 <USART_PutChar>

000001ca <__vector_13>:
}

//-------------------- Timer on 0.5 sec -----------------------

ISR (TIMER1_OVF_vect)
{
     1ca:	1f 92       	push	r1
     1cc:	0f 92       	push	r0
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	0f 92       	push	r0
     1d2:	11 24       	eor	r1, r1
     1d4:	8f 93       	push	r24
     1d6:	9f 93       	push	r25
    cli();
     1d8:	f8 94       	cli
    TCNT1 = 0x10000 - (F_CPU / 256);
     1da:	8e ee       	ldi	r24, 0xEE	; 238
     1dc:	95 e8       	ldi	r25, 0x85	; 133
     1de:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     1e2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

    SET_FLAG(f_e1sec);
     1e6:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <flags>
     1ea:	81 60       	ori	r24, 0x01	; 1
     1ec:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <flags>

//    SET_BIT(time_flag, tf_dps_en);
    sei();
     1f0:	78 94       	sei
}
     1f2:	9f 91       	pop	r25
     1f4:	8f 91       	pop	r24
     1f6:	0f 90       	pop	r0
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	0f 90       	pop	r0
     1fc:	1f 90       	pop	r1
     1fe:	18 95       	reti

00000200 <test_vent_enc>:

//********************** Vent Enc INT**********************
void test_vent_enc(int8_t up)
{
    if (get_input(IN_BTN_V_UP) == get_input(IN_BTN_V_DWN)) {
     200:	99 b1       	in	r25, 0x09	; 9
     202:	23 b1       	in	r18, 0x03	; 3
     204:	90 95       	com	r25
     206:	99 1f       	adc	r25, r25
     208:	99 27       	eor	r25, r25
     20a:	99 1f       	adc	r25, r25
     20c:	21 70       	andi	r18, 0x01	; 1
     20e:	92 17       	cp	r25, r18
     210:	59 f0       	breq	.+22     	; 0x228 <test_vent_enc+0x28>
	if (up) {
     212:	88 23       	and	r24, r24
     214:	21 f0       	breq	.+8      	; 0x21e <test_vent_enc+0x1e>
	    vent_enc++;
     216:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <vent_enc>
     21a:	8f 5f       	subi	r24, 0xFF	; 255
     21c:	03 c0       	rjmp	.+6      	; 0x224 <test_vent_enc+0x24>
	} else {
	    vent_enc--;
     21e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <vent_enc>
     222:	81 50       	subi	r24, 0x01	; 1
     224:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <vent_enc>
     228:	08 95       	ret

0000022a <__vector_3>:
	}
    }
}

ISR (PCINT0_vect) // IN_BTN_V_DWN Vent
{
     22a:	1f 92       	push	r1
     22c:	0f 92       	push	r0
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	0f 92       	push	r0
     232:	11 24       	eor	r1, r1
     234:	2f 93       	push	r18
     236:	3f 93       	push	r19
     238:	4f 93       	push	r20
     23a:	5f 93       	push	r21
     23c:	6f 93       	push	r22
     23e:	7f 93       	push	r23
     240:	8f 93       	push	r24
     242:	9f 93       	push	r25
     244:	af 93       	push	r26
     246:	bf 93       	push	r27
     248:	ef 93       	push	r30
     24a:	ff 93       	push	r31
    cli();
     24c:	f8 94       	cli
    test_vent_enc(1);
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	0e 94 00 01 	call	0x200	; 0x200 <test_vent_enc>
    sei();
     254:	78 94       	sei
}
     256:	ff 91       	pop	r31
     258:	ef 91       	pop	r30
     25a:	bf 91       	pop	r27
     25c:	af 91       	pop	r26
     25e:	9f 91       	pop	r25
     260:	8f 91       	pop	r24
     262:	7f 91       	pop	r23
     264:	6f 91       	pop	r22
     266:	5f 91       	pop	r21
     268:	4f 91       	pop	r20
     26a:	3f 91       	pop	r19
     26c:	2f 91       	pop	r18
     26e:	0f 90       	pop	r0
     270:	0f be       	out	0x3f, r0	; 63
     272:	0f 90       	pop	r0
     274:	1f 90       	pop	r1
     276:	18 95       	reti

00000278 <__vector_5>:

ISR (PCINT2_vect) // IN_BTN_V_UP Vent
{
     278:	1f 92       	push	r1
     27a:	0f 92       	push	r0
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	0f 92       	push	r0
     280:	11 24       	eor	r1, r1
     282:	2f 93       	push	r18
     284:	3f 93       	push	r19
     286:	4f 93       	push	r20
     288:	5f 93       	push	r21
     28a:	6f 93       	push	r22
     28c:	7f 93       	push	r23
     28e:	8f 93       	push	r24
     290:	9f 93       	push	r25
     292:	af 93       	push	r26
     294:	bf 93       	push	r27
     296:	ef 93       	push	r30
     298:	ff 93       	push	r31
    cli();
     29a:	f8 94       	cli
    test_vent_enc(0);
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	0e 94 00 01 	call	0x200	; 0x200 <test_vent_enc>
    sei();
     2a2:	78 94       	sei
}
     2a4:	ff 91       	pop	r31
     2a6:	ef 91       	pop	r30
     2a8:	bf 91       	pop	r27
     2aa:	af 91       	pop	r26
     2ac:	9f 91       	pop	r25
     2ae:	8f 91       	pop	r24
     2b0:	7f 91       	pop	r23
     2b2:	6f 91       	pop	r22
     2b4:	5f 91       	pop	r21
     2b6:	4f 91       	pop	r20
     2b8:	3f 91       	pop	r19
     2ba:	2f 91       	pop	r18
     2bc:	0f 90       	pop	r0
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	0f 90       	pop	r0
     2c2:	1f 90       	pop	r1
     2c4:	18 95       	reti

000002c6 <test_temp_enc>:
{
    if (__count == 0)
	__asm__ __volatile__( "rjmp 1f\n 1:" );
    // 2 cycles
    else
	__asm__ __volatile__ (
     2c6:	e2 e0       	ldi	r30, 0x02	; 2
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	31 97       	sbiw	r30, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <test_temp_enc+0x4>
//********************** Temp Enc INT**********************

void test_temp_enc(int8_t up)
{
    delay(1);
    if (get_input(IN_BTN_T_UP) == get_input(IN_BTN_T_DWN)) {
     2ce:	29 b1       	in	r18, 0x09	; 9
     2d0:	99 b1       	in	r25, 0x09	; 9
     2d2:	23 fb       	bst	r18, 3
     2d4:	33 27       	eor	r19, r19
     2d6:	30 f9       	bld	r19, 0
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	23 27       	eor	r18, r19
     2dc:	92 fb       	bst	r25, 2
     2de:	99 27       	eor	r25, r25
     2e0:	90 f9       	bld	r25, 0
     2e2:	29 17       	cp	r18, r25
     2e4:	59 f0       	breq	.+22     	; 0x2fc <test_temp_enc+0x36>
	if (up) {
     2e6:	88 23       	and	r24, r24
     2e8:	21 f0       	breq	.+8      	; 0x2f2 <test_temp_enc+0x2c>
	    temp_enc++;
     2ea:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <temp_enc>
     2ee:	8f 5f       	subi	r24, 0xFF	; 255
     2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <test_temp_enc+0x32>
	} else {
	    temp_enc--;
     2f2:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <temp_enc>
     2f6:	81 50       	subi	r24, 0x01	; 1
     2f8:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <temp_enc>
     2fc:	08 95       	ret

000002fe <__vector_1>:
	}
    }
}

ISR (INT0_vect) // IN_BTN_T_DWN Temp
{
     2fe:	1f 92       	push	r1
     300:	0f 92       	push	r0
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	0f 92       	push	r0
     306:	11 24       	eor	r1, r1
     308:	2f 93       	push	r18
     30a:	3f 93       	push	r19
     30c:	4f 93       	push	r20
     30e:	5f 93       	push	r21
     310:	6f 93       	push	r22
     312:	7f 93       	push	r23
     314:	8f 93       	push	r24
     316:	9f 93       	push	r25
     318:	af 93       	push	r26
     31a:	bf 93       	push	r27
     31c:	ef 93       	push	r30
     31e:	ff 93       	push	r31
    cli();
     320:	f8 94       	cli
    test_temp_enc(1);
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 63 01 	call	0x2c6	; 0x2c6 <test_temp_enc>
    sei();
     328:	78 94       	sei
}
     32a:	ff 91       	pop	r31
     32c:	ef 91       	pop	r30
     32e:	bf 91       	pop	r27
     330:	af 91       	pop	r26
     332:	9f 91       	pop	r25
     334:	8f 91       	pop	r24
     336:	7f 91       	pop	r23
     338:	6f 91       	pop	r22
     33a:	5f 91       	pop	r21
     33c:	4f 91       	pop	r20
     33e:	3f 91       	pop	r19
     340:	2f 91       	pop	r18
     342:	0f 90       	pop	r0
     344:	0f be       	out	0x3f, r0	; 63
     346:	0f 90       	pop	r0
     348:	1f 90       	pop	r1
     34a:	18 95       	reti

0000034c <__vector_2>:

ISR (INT1_vect) // IN_BTN_T_UP Temp
{
     34c:	1f 92       	push	r1
     34e:	0f 92       	push	r0
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	0f 92       	push	r0
     354:	11 24       	eor	r1, r1
     356:	2f 93       	push	r18
     358:	3f 93       	push	r19
     35a:	4f 93       	push	r20
     35c:	5f 93       	push	r21
     35e:	6f 93       	push	r22
     360:	7f 93       	push	r23
     362:	8f 93       	push	r24
     364:	9f 93       	push	r25
     366:	af 93       	push	r26
     368:	bf 93       	push	r27
     36a:	ef 93       	push	r30
     36c:	ff 93       	push	r31
    cli();
     36e:	f8 94       	cli
    test_temp_enc(0);
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 63 01 	call	0x2c6	; 0x2c6 <test_temp_enc>
    sei();
     376:	78 94       	sei
}
     378:	ff 91       	pop	r31
     37a:	ef 91       	pop	r30
     37c:	bf 91       	pop	r27
     37e:	af 91       	pop	r26
     380:	9f 91       	pop	r25
     382:	8f 91       	pop	r24
     384:	7f 91       	pop	r23
     386:	6f 91       	pop	r22
     388:	5f 91       	pop	r21
     38a:	4f 91       	pop	r20
     38c:	3f 91       	pop	r19
     38e:	2f 91       	pop	r18
     390:	0f 90       	pop	r0
     392:	0f be       	out	0x3f, r0	; 63
     394:	0f 90       	pop	r0
     396:	1f 90       	pop	r1
     398:	18 95       	reti

0000039a <set_def_vals>:

//********************** **********************
void set_def_vals(void)
{
    vars.setup_temp = 20;
     39a:	ee e5       	ldi	r30, 0x5E	; 94
     39c:	f1 e0       	ldi	r31, 0x01	; 1
     39e:	84 e1       	ldi	r24, 0x14	; 20
     3a0:	81 83       	std	Z+1, r24	; 0x01
    vars.vent_nom_seg = 4;
     3a2:	84 e0       	ldi	r24, 0x04	; 4
     3a4:	82 83       	std	Z+2, r24	; 0x02
    vars.temp_seg = 2;
     3a6:	92 e0       	ldi	r25, 0x02	; 2
     3a8:	93 83       	std	Z+3, r25	; 0x03
    vars.wmode = wmode_auto;
     3aa:	10 82       	st	Z, r1
    vars.const_cnd_frost_t = COND_T_FROST;
     3ac:	85 e0       	ldi	r24, 0x05	; 5
     3ae:	80 87       	std	Z+8, r24	; 0x08
    vars.pid_P_kfc = PID_P_KFC;
     3b0:	8a e0       	ldi	r24, 0x0A	; 10
     3b2:	84 83       	std	Z+4, r24	; 0x04
    vars.pid_I_kfc = PID_I_KFC;
     3b4:	8f e0       	ldi	r24, 0x0F	; 15
     3b6:	85 83       	std	Z+5, r24	; 0x05
    vars.vent_var_kfc = VENT_VAR_KFC;
     3b8:	83 e0       	ldi	r24, 0x03	; 3
     3ba:	86 83       	std	Z+6, r24	; 0x06
    vars.temp_seg_delay = TEMP_OUT_DELAY;
     3bc:	97 83       	std	Z+7, r25	; 0x07
    vars.cond_enabled = 0;
     3be:	11 86       	std	Z+9, r1	; 0x09
    vars.auto_defrost = 3;
     3c0:	82 87       	std	Z+10, r24	; 0x0a
     3c2:	08 95       	ret

000003c4 <myread_eeprom>:
}

void myread_eeprom(void)
{
    cli();
     3c4:	f8 94       	cli
    eeprom_read_buf((uint8_t *) &vars, EEMEM_VARS, sizeof(vars));
     3c6:	4b e0       	ldi	r20, 0x0B	; 11
     3c8:	50 e0       	ldi	r21, 0x00	; 0
     3ca:	64 e6       	ldi	r22, 0x64	; 100
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	8e e5       	ldi	r24, 0x5E	; 94
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 27 08 	call	0x104e	; 0x104e <eeprom_read_buf>
//    eeprom_read_block(&vars, 10, sizeof(vars));
//    uint8_t tst = eeprom_read_byte(&ftst_ee);
    uint8_t tst = eeprom_read_byte1(EEMEM_TST);
     3d6:	82 e3       	ldi	r24, 0x32	; 50
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 20 08 	call	0x1040	; 0x1040 <eeprom_read_byte1>
    if (tst != 0xaa) {
     3de:	8a 3a       	cpi	r24, 0xAA	; 170
     3e0:	11 f0       	breq	.+4      	; 0x3e6 <myread_eeprom+0x22>
	set_def_vals();
     3e2:	0c 94 cd 01 	jmp	0x39a	; 0x39a <set_def_vals>
     3e6:	08 95       	ret

000003e8 <myupdate_eeprom>:
    }
}

void myupdate_eeprom(void)
{
    cli();
     3e8:	f8 94       	cli
    eeprom_update_buf(EEMEM_VARS, (uint8_t *) &vars, sizeof(vars));
     3ea:	4b e0       	ldi	r20, 0x0B	; 11
     3ec:	50 e0       	ldi	r21, 0x00	; 0
     3ee:	6e e5       	ldi	r22, 0x5E	; 94
     3f0:	71 e0       	ldi	r23, 0x01	; 1
     3f2:	84 e6       	ldi	r24, 0x64	; 100
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 47 08 	call	0x108e	; 0x108e <eeprom_update_buf>
    if (eeprom_read_byte1(EEMEM_TST) != 0xaa) {
     3fa:	82 e3       	ldi	r24, 0x32	; 50
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 20 08 	call	0x1040	; 0x1040 <eeprom_read_byte1>
     402:	8a 3a       	cpi	r24, 0xAA	; 170
     404:	29 f0       	breq	.+10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	eeprom_write_byte1(EEMEM_TST, 0xaa);
     406:	6a ea       	ldi	r22, 0xAA	; 170
     408:	82 e3       	ldi	r24, 0x32	; 50
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0c 94 18 08 	jmp	0x1030	; 0x1030 <eeprom_write_byte1>
     410:	08 95       	ret

00000412 <switch_temp>:
 */
#define DELAY_ENC_BTWN 550
#define DELAY_ENC_CKL_MS 40
void switch_temp(int8_t up)
{
    if (up) {
     412:	88 23       	and	r24, r24
     414:	81 f0       	breq	.+32     	; 0x436 <switch_temp+0x24>
	if (get_output(OUT_BTN_T_UP)) {
     416:	5d 9b       	sbis	0x0b, 5	; 11
     418:	07 c0       	rjmp	.+14     	; 0x428 <switch_temp+0x16>
	    pin_low(OUT_BTN_T_UP);
     41a:	5d 98       	cbi	0x0b, 5	; 11
     41c:	8c e4       	ldi	r24, 0x4C	; 76
     41e:	94 e0       	ldi	r25, 0x04	; 4
     420:	01 97       	sbiw	r24, 0x01	; 1
     422:	f1 f7       	brne	.-4      	; 0x420 <switch_temp+0xe>
	    delay(DELAY_ENC_BTWN);
	    pin_low(OUT_BTN_T_DWN);
     424:	5c 98       	cbi	0x0b, 4	; 11
     426:	16 c0       	rjmp	.+44     	; 0x454 <switch_temp+0x42>
	} else {
	    pin_high(OUT_BTN_T_UP);
     428:	5d 9a       	sbi	0x0b, 5	; 11
     42a:	8c e4       	ldi	r24, 0x4C	; 76
     42c:	94 e0       	ldi	r25, 0x04	; 4
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <switch_temp+0x1c>
	    delay(DELAY_ENC_BTWN);
	    pin_high(OUT_BTN_T_DWN);
     432:	5c 9a       	sbi	0x0b, 4	; 11
     434:	0f c0       	rjmp	.+30     	; 0x454 <switch_temp+0x42>
	}
    } else {
	if (get_output(OUT_BTN_T_UP)) {
     436:	5d 9b       	sbis	0x0b, 5	; 11
     438:	07 c0       	rjmp	.+14     	; 0x448 <switch_temp+0x36>
	    pin_low(OUT_BTN_T_DWN);
     43a:	5c 98       	cbi	0x0b, 4	; 11
     43c:	8c e4       	ldi	r24, 0x4C	; 76
     43e:	94 e0       	ldi	r25, 0x04	; 4
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <switch_temp+0x2e>
	    delay(DELAY_ENC_BTWN);
	    pin_low(OUT_BTN_T_UP);
     444:	5d 98       	cbi	0x0b, 5	; 11
     446:	06 c0       	rjmp	.+12     	; 0x454 <switch_temp+0x42>
	} else {
	    pin_high(OUT_BTN_T_DWN);
     448:	5c 9a       	sbi	0x0b, 4	; 11
     44a:	8c e4       	ldi	r24, 0x4C	; 76
     44c:	94 e0       	ldi	r25, 0x04	; 4
     44e:	01 97       	sbiw	r24, 0x01	; 1
     450:	f1 f7       	brne	.-4      	; 0x44e <switch_temp+0x3c>
	    delay(DELAY_ENC_BTWN);
	    pin_high(OUT_BTN_T_UP);
     452:	5d 9a       	sbi	0x0b, 5	; 11
	}
    }
    delay_ms(DELAY_ENC_CKL_MS);
     454:	88 e2       	ldi	r24, 0x28	; 40
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0c 94 63 07 	jmp	0xec6	; 0xec6 <delay_ms>

0000045c <switch_vent>:
}

void switch_vent(int8_t up)
{
    if (up) {
     45c:	88 23       	and	r24, r24
     45e:	81 f0       	breq	.+32     	; 0x480 <switch_vent+0x24>
	if (get_output(OUT_BTN_V_UP)) {
     460:	5e 9b       	sbis	0x0b, 6	; 11
     462:	07 c0       	rjmp	.+14     	; 0x472 <switch_vent+0x16>
	    pin_low(OUT_BTN_V_UP);
     464:	5e 98       	cbi	0x0b, 6	; 11
     466:	8c e4       	ldi	r24, 0x4C	; 76
     468:	94 e0       	ldi	r25, 0x04	; 4
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <switch_vent+0xe>
	    delay(DELAY_ENC_BTWN);
	    pin_low(OUT_BTN_V_DWN);
     46e:	29 98       	cbi	0x05, 1	; 5
     470:	16 c0       	rjmp	.+44     	; 0x49e <switch_vent+0x42>
	} else {
	    pin_high(OUT_BTN_V_UP);
     472:	5e 9a       	sbi	0x0b, 6	; 11
     474:	8c e4       	ldi	r24, 0x4C	; 76
     476:	94 e0       	ldi	r25, 0x04	; 4
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <switch_vent+0x1c>
	    delay(DELAY_ENC_BTWN);
	    pin_high(OUT_BTN_V_DWN);
     47c:	29 9a       	sbi	0x05, 1	; 5
     47e:	0f c0       	rjmp	.+30     	; 0x49e <switch_vent+0x42>
	}
    } else {
	if (get_output(OUT_BTN_V_UP)) {
     480:	5e 9b       	sbis	0x0b, 6	; 11
     482:	07 c0       	rjmp	.+14     	; 0x492 <switch_vent+0x36>
	    pin_low(OUT_BTN_V_DWN);
     484:	29 98       	cbi	0x05, 1	; 5
     486:	8c e4       	ldi	r24, 0x4C	; 76
     488:	94 e0       	ldi	r25, 0x04	; 4
     48a:	01 97       	sbiw	r24, 0x01	; 1
     48c:	f1 f7       	brne	.-4      	; 0x48a <switch_vent+0x2e>
	    delay(DELAY_ENC_BTWN);
	    pin_low(OUT_BTN_V_UP);
     48e:	5e 98       	cbi	0x0b, 6	; 11
     490:	06 c0       	rjmp	.+12     	; 0x49e <switch_vent+0x42>
	} else {
	    pin_high(OUT_BTN_V_DWN);
     492:	29 9a       	sbi	0x05, 1	; 5
     494:	8c e4       	ldi	r24, 0x4C	; 76
     496:	94 e0       	ldi	r25, 0x04	; 4
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <switch_vent+0x3c>
	    delay(DELAY_ENC_BTWN);
	    pin_high(OUT_BTN_V_UP);
     49c:	5e 9a       	sbi	0x0b, 6	; 11
	}
    }
    delay_ms(DELAY_ENC_CKL_MS);
     49e:	88 e2       	ldi	r24, 0x28	; 40
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0c 94 63 07 	jmp	0xec6	; 0xec6 <delay_ms>

000004a6 <prc2Seg>:
}

uint8_t prc2Seg(uint8_t segs, uint8_t prc)
{
     4a6:	cf 93       	push	r28
     4a8:	c8 2f       	mov	r28, r24
    prc = check_range(0, prc, 100);
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	44 e6       	ldi	r20, 0x64	; 100
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 79 07 	call	0xef2	; 0xef2 <check_range>
    uint16_t tmp = (segs * prc + segs) / 100;
    return tmp;
     4b8:	9c 01       	movw	r18, r24
     4ba:	33 27       	eor	r19, r19
     4bc:	2f 5f       	subi	r18, 0xFF	; 255
     4be:	3f 4f       	sbci	r19, 0xFF	; 255
     4c0:	c2 9f       	mul	r28, r18
     4c2:	c0 01       	movw	r24, r0
     4c4:	c3 9f       	mul	r28, r19
     4c6:	90 0d       	add	r25, r0
     4c8:	11 24       	eor	r1, r1
     4ca:	64 e6       	ldi	r22, 0x64	; 100
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__divmodhi4>
     4d2:	86 2f       	mov	r24, r22
}
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <seg2Prc>:

uint8_t seg2Prc(uint8_t segs, uint8_t seg)
{
    //seg = check_range(0, seg, segs);
    uint16_t tmp = (seg * 100) / segs;
    return tmp;
     4d8:	94 e6       	ldi	r25, 0x64	; 100
     4da:	69 9f       	mul	r22, r25
     4dc:	90 01       	movw	r18, r0
     4de:	11 24       	eor	r1, r1
     4e0:	68 2f       	mov	r22, r24
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	c9 01       	movw	r24, r18
     4e6:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__divmodhi4>
     4ea:	86 2f       	mov	r24, r22
}
     4ec:	08 95       	ret

000004ee <set_temp>:

void set_temp(uint8_t prc, int8_t full_sync)
{
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	d6 2f       	mov	r29, r22
    uint8_t seg_temp = prc2Seg(TEMP_SEG, prc);
     4f8:	68 2f       	mov	r22, r24
     4fa:	8f e0       	ldi	r24, 0x0F	; 15
     4fc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <prc2Seg>
     500:	c8 2f       	mov	r28, r24

    if (seg_temp == 0) { //add sync
     502:	81 11       	cpse	r24, r1
     504:	02 c0       	rjmp	.+4      	; 0x50a <set_temp+0x1c>
	switch_temp(0);
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	03 c0       	rjmp	.+6      	; 0x510 <set_temp+0x22>
    } else if (seg_temp == TEMP_SEG) {
     50a:	8f 30       	cpi	r24, 0x0F	; 15
     50c:	19 f4       	brne	.+6      	; 0x514 <set_temp+0x26>
	switch_temp(1);
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	0e 94 09 02 	call	0x412	; 0x412 <switch_temp>
    }

    if (temp_seg_cur != seg_temp) {
     514:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <temp_seg_cur>
     518:	2c 2f       	mov	r18, r28
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	08 2e       	mov	r0, r24
     51e:	00 0c       	add	r0, r0
     520:	99 0b       	sbc	r25, r25
     522:	82 17       	cp	r24, r18
     524:	93 07       	cpc	r25, r19
     526:	09 f4       	brne	.+2      	; 0x52a <set_temp+0x3c>
     528:	41 c0       	rjmp	.+130    	; 0x5ac <set_temp+0xbe>
	uint8_t seg_t = seg_temp;
	if (full_sync) {
     52a:	dd 23       	and	r29, r29
     52c:	29 f1       	breq	.+74     	; 0x578 <set_temp+0x8a>
	    int8_t up = (temp_seg_cur > TEMP_SEG / 2);
     52e:	10 91 50 01 	lds	r17, 0x0150	; 0x800150 <temp_seg_cur>
     532:	01 e0       	ldi	r16, 0x01	; 1
     534:	18 30       	cpi	r17, 0x08	; 8
     536:	0c f4       	brge	.+2      	; 0x53a <set_temp+0x4c>
     538:	00 e0       	ldi	r16, 0x00	; 0
     53a:	d9 e0       	ldi	r29, 0x09	; 9
	    for (uint8_t i = 0; i < TEMP_SEG / 2 + 2; i++) {
		switch_temp(up);
     53c:	80 2f       	mov	r24, r16
     53e:	0e 94 09 02 	call	0x412	; 0x412 <switch_temp>
     542:	d1 50       	subi	r29, 0x01	; 1

    if (temp_seg_cur != seg_temp) {
	uint8_t seg_t = seg_temp;
	if (full_sync) {
	    int8_t up = (temp_seg_cur > TEMP_SEG / 2);
	    for (uint8_t i = 0; i < TEMP_SEG / 2 + 2; i++) {
     544:	d9 f7       	brne	.-10     	; 0x53c <set_temp+0x4e>
		switch_temp(up);
	    }
	    if (up) {
     546:	18 30       	cpi	r17, 0x08	; 8
     548:	1c f0       	brlt	.+6      	; 0x550 <set_temp+0x62>
		seg_temp = TEMP_SEG - seg_temp;
     54a:	df e0       	ldi	r29, 0x0F	; 15
     54c:	dc 1b       	sub	r29, r28
     54e:	01 c0       	rjmp	.+2      	; 0x552 <set_temp+0x64>
    return tmp;
}

void set_temp(uint8_t prc, int8_t full_sync)
{
    uint8_t seg_temp = prc2Seg(TEMP_SEG, prc);
     550:	dc 2f       	mov	r29, r28
		switch_temp(up);
	    }
	    if (up) {
		seg_temp = TEMP_SEG - seg_temp;
	    }
	    up = !up;
     552:	01 e0       	ldi	r16, 0x01	; 1
     554:	18 30       	cpi	r17, 0x08	; 8
     556:	0c f0       	brlt	.+2      	; 0x55a <set_temp+0x6c>
     558:	00 e0       	ldi	r16, 0x00	; 0
	    delay_ms(60);
     55a:	8c e3       	ldi	r24, 0x3C	; 60
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 63 07 	call	0xec6	; 0xec6 <delay_ms>
	    for (uint8_t i = 0; i < seg_temp; i++) {
     562:	10 e0       	ldi	r17, 0x00	; 0
     564:	d1 17       	cp	r29, r17
     566:	29 f0       	breq	.+10     	; 0x572 <set_temp+0x84>
		switch_temp(up);
     568:	80 2f       	mov	r24, r16
     56a:	0e 94 09 02 	call	0x412	; 0x412 <switch_temp>
	    if (up) {
		seg_temp = TEMP_SEG - seg_temp;
	    }
	    up = !up;
	    delay_ms(60);
	    for (uint8_t i = 0; i < seg_temp; i++) {
     56e:	1f 5f       	subi	r17, 0xFF	; 255
     570:	f9 cf       	rjmp	.-14     	; 0x564 <set_temp+0x76>
	    }
	    for (uint8_t i = 0; i < seg_temp; i++) {
		switch_temp(up);
	    }
	}
	temp_seg_cur = seg_t;
     572:	c0 93 50 01 	sts	0x0150, r28	; 0x800150 <temp_seg_cur>
     576:	1a c0       	rjmp	.+52     	; 0x5ac <set_temp+0xbe>
	    for (uint8_t i = 0; i < seg_temp; i++) {
		switch_temp(up);
	    }
	} else {
	    int8_t up = 0;
	    if (seg_temp > temp_seg_cur) {
     578:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <temp_seg_cur>
     57c:	08 2e       	mov	r0, r24
     57e:	00 0c       	add	r0, r0
     580:	99 0b       	sbc	r25, r25
     582:	82 17       	cp	r24, r18
     584:	93 07       	cpc	r25, r19
     586:	34 f4       	brge	.+12     	; 0x594 <set_temp+0xa6>
		seg_temp = seg_temp - temp_seg_cur; // delta
     588:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <temp_seg_cur>
     58c:	dc 2f       	mov	r29, r28
     58e:	d8 1b       	sub	r29, r24
		up = 1;
     590:	01 e0       	ldi	r16, 0x01	; 1
     592:	04 c0       	rjmp	.+8      	; 0x59c <set_temp+0xae>
	    } else {
		seg_temp = temp_seg_cur - seg_temp; // delta
     594:	d0 91 50 01 	lds	r29, 0x0150	; 0x800150 <temp_seg_cur>
     598:	dc 1b       	sub	r29, r28
	    delay_ms(60);
	    for (uint8_t i = 0; i < seg_temp; i++) {
		switch_temp(up);
	    }
	} else {
	    int8_t up = 0;
     59a:	00 e0       	ldi	r16, 0x00	; 0
		seg_temp = seg_temp - temp_seg_cur; // delta
		up = 1;
	    } else {
		seg_temp = temp_seg_cur - seg_temp; // delta
	    }
	    for (uint8_t i = 0; i < seg_temp; i++) {
     59c:	10 e0       	ldi	r17, 0x00	; 0
     59e:	d1 17       	cp	r29, r17
     5a0:	41 f3       	breq	.-48     	; 0x572 <set_temp+0x84>
		switch_temp(up);
     5a2:	80 2f       	mov	r24, r16
     5a4:	0e 94 09 02 	call	0x412	; 0x412 <switch_temp>
		seg_temp = seg_temp - temp_seg_cur; // delta
		up = 1;
	    } else {
		seg_temp = temp_seg_cur - seg_temp; // delta
	    }
	    for (uint8_t i = 0; i < seg_temp; i++) {
     5a8:	1f 5f       	subi	r17, 0xFF	; 255
     5aa:	f9 cf       	rjmp	.-14     	; 0x59e <set_temp+0xb0>
		switch_temp(up);
	    }
	}
	temp_seg_cur = seg_t;
    }
}
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	08 95       	ret

000005b6 <switch_cond>:

void switch_cond(char on)
{
    if (vars.cond_enabled) {
     5b6:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <vars+0x9>
     5ba:	99 23       	and	r25, r25
     5bc:	89 f0       	breq	.+34     	; 0x5e0 <switch_cond+0x2a>
	if (on && vent_seg_cur > 0) {
     5be:	88 23       	and	r24, r24
     5c0:	59 f0       	breq	.+22     	; 0x5d8 <switch_cond+0x22>
     5c2:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <vent_seg_cur>
     5c6:	18 16       	cp	r1, r24
     5c8:	3c f4       	brge	.+14     	; 0x5d8 <switch_cond+0x22>
	    CLR_FLAG(f_cond_ind_flash);
     5ca:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <flags>
     5ce:	8f 7d       	andi	r24, 0xDF	; 223
     5d0:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <flags>
	    pin_high(OUT_FROST_SW);
     5d4:	45 9a       	sbi	0x08, 5	; 8
     5d6:	08 95       	ret
	} else {
	    SET_FLAG(f_cond_ind_flash);
     5d8:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <flags>
     5dc:	80 62       	ori	r24, 0x20	; 32
     5de:	03 c0       	rjmp	.+6      	; 0x5e6 <switch_cond+0x30>
	    pin_low(OUT_FROST_SW);
	}
    } else {
	CLR_FLAG(f_cond_ind_flash);
     5e0:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <flags>
     5e4:	8f 7d       	andi	r24, 0xDF	; 223
     5e6:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <flags>
	pin_low(OUT_FROST_SW);
     5ea:	45 98       	cbi	0x08, 5	; 8
     5ec:	08 95       	ret

000005ee <set_vent_seg>:
    }
}

void set_vent_seg(uint8_t seg_vent, int8_t full_sync)
{
     5ee:	ff 92       	push	r15
     5f0:	0f 93       	push	r16
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	06 2f       	mov	r16, r22
    seg_vent = check_range(0, seg_vent, VENT_SEG);
     5fa:	68 2f       	mov	r22, r24
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	48 e0       	ldi	r20, 0x08	; 8
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 79 07 	call	0xef2	; 0xef2 <check_range>
     60a:	ec 01       	movw	r28, r24
     60c:	18 2f       	mov	r17, r24

    if (seg_vent == 0) { //add sync
     60e:	81 11       	cpse	r24, r1
     610:	07 c0       	rjmp	.+14     	; 0x620 <set_vent_seg+0x32>
	switch_vent(0);
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	0e 94 2e 02 	call	0x45c	; 0x45c <switch_vent>
	switch_cond(0); // выключаем кондиционер
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <switch_cond>
     61e:	05 c0       	rjmp	.+10     	; 0x62a <set_vent_seg+0x3c>
    } else if (seg_vent == VENT_SEG) {
     620:	88 30       	cpi	r24, 0x08	; 8
     622:	19 f4       	brne	.+6      	; 0x62a <set_vent_seg+0x3c>
	switch_vent(1);
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	0e 94 2e 02 	call	0x45c	; 0x45c <switch_vent>
    }

    if (vent_seg_cur != seg_vent) {
     62a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <vent_seg_cur>
     62e:	9e 01       	movw	r18, r28
     630:	33 27       	eor	r19, r19
     632:	08 2e       	mov	r0, r24
     634:	00 0c       	add	r0, r0
     636:	99 0b       	sbc	r25, r25
     638:	82 17       	cp	r24, r18
     63a:	93 07       	cpc	r25, r19
     63c:	e9 f1       	breq	.+122    	; 0x6b8 <set_vent_seg+0xca>
	uint8_t seg_v = seg_vent;
	if (full_sync) {
     63e:	00 23       	and	r16, r16
     640:	01 f1       	breq	.+64     	; 0x682 <set_vent_seg+0x94>
     642:	00 e0       	ldi	r16, 0x00	; 0
	    for (uint8_t i = 0; i < vent_seg_cur + 2; i++) {
     644:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <vent_seg_cur>
     648:	08 2e       	mov	r0, r24
     64a:	00 0c       	add	r0, r0
     64c:	99 0b       	sbc	r25, r25
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	20 2f       	mov	r18, r16
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	82 17       	cp	r24, r18
     656:	93 07       	cpc	r25, r19
     658:	2c f0       	brlt	.+10     	; 0x664 <set_vent_seg+0x76>
		switch_vent(0);
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	0e 94 2e 02 	call	0x45c	; 0x45c <switch_vent>
    }

    if (vent_seg_cur != seg_vent) {
	uint8_t seg_v = seg_vent;
	if (full_sync) {
	    for (uint8_t i = 0; i < vent_seg_cur + 2; i++) {
     660:	0f 5f       	subi	r16, 0xFF	; 255
     662:	f0 cf       	rjmp	.-32     	; 0x644 <set_vent_seg+0x56>
		switch_vent(0);
	    }
	    delay_ms(60);
     664:	8c e3       	ldi	r24, 0x3C	; 60
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0e 94 63 07 	call	0xec6	; 0xec6 <delay_ms>
	    for (uint8_t i = 0; i < seg_vent; i++) {
     66c:	00 e0       	ldi	r16, 0x00	; 0
     66e:	01 17       	cp	r16, r17
     670:	28 f4       	brcc	.+10     	; 0x67c <set_vent_seg+0x8e>
		switch_vent(1);
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	0e 94 2e 02 	call	0x45c	; 0x45c <switch_vent>
	if (full_sync) {
	    for (uint8_t i = 0; i < vent_seg_cur + 2; i++) {
		switch_vent(0);
	    }
	    delay_ms(60);
	    for (uint8_t i = 0; i < seg_vent; i++) {
     678:	0f 5f       	subi	r16, 0xFF	; 255
     67a:	f9 cf       	rjmp	.-14     	; 0x66e <set_vent_seg+0x80>
	    }
	    for (uint8_t i = 0; i < seg_vent; i++) {
		switch_vent(up);
	    }
	}
	vent_seg_cur = seg_v;
     67c:	c0 93 6a 01 	sts	0x016A, r28	; 0x80016a <vent_seg_cur>
     680:	1b c0       	rjmp	.+54     	; 0x6b8 <set_vent_seg+0xca>
	    for (uint8_t i = 0; i < seg_vent; i++) {
		switch_vent(1);
	    }
	} else {
	    int8_t up = 0;
	    if (seg_vent > vent_seg_cur) {
     682:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <vent_seg_cur>
     686:	08 2e       	mov	r0, r24
     688:	00 0c       	add	r0, r0
     68a:	99 0b       	sbc	r25, r25
     68c:	82 17       	cp	r24, r18
     68e:	93 07       	cpc	r25, r19
     690:	3c f4       	brge	.+14     	; 0x6a0 <set_vent_seg+0xb2>
		seg_vent = seg_vent - vent_seg_cur; // delta
     692:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <vent_seg_cur>
     696:	1c 2f       	mov	r17, r28
     698:	18 1b       	sub	r17, r24
		up = 1;
     69a:	ff 24       	eor	r15, r15
     69c:	f3 94       	inc	r15
     69e:	04 c0       	rjmp	.+8      	; 0x6a8 <set_vent_seg+0xba>
	    } else {
		seg_vent = vent_seg_cur - seg_vent; // delta
     6a0:	10 91 6a 01 	lds	r17, 0x016A	; 0x80016a <vent_seg_cur>
     6a4:	1c 1b       	sub	r17, r28
	    delay_ms(60);
	    for (uint8_t i = 0; i < seg_vent; i++) {
		switch_vent(1);
	    }
	} else {
	    int8_t up = 0;
     6a6:	f1 2c       	mov	r15, r1
		seg_vent = seg_vent - vent_seg_cur; // delta
		up = 1;
	    } else {
		seg_vent = vent_seg_cur - seg_vent; // delta
	    }
	    for (uint8_t i = 0; i < seg_vent; i++) {
     6a8:	00 e0       	ldi	r16, 0x00	; 0
     6aa:	10 17       	cp	r17, r16
     6ac:	39 f3       	breq	.-50     	; 0x67c <set_vent_seg+0x8e>
		switch_vent(up);
     6ae:	8f 2d       	mov	r24, r15
     6b0:	0e 94 2e 02 	call	0x45c	; 0x45c <switch_vent>
		seg_vent = seg_vent - vent_seg_cur; // delta
		up = 1;
	    } else {
		seg_vent = vent_seg_cur - seg_vent; // delta
	    }
	    for (uint8_t i = 0; i < seg_vent; i++) {
     6b4:	0f 5f       	subi	r16, 0xFF	; 255
     6b6:	f9 cf       	rjmp	.-14     	; 0x6aa <set_vent_seg+0xbc>
		switch_vent(up);
	    }
	}
	vent_seg_cur = seg_v;
    }
}
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	ff 90       	pop	r15
     6c2:	08 95       	ret

000006c4 <set_vent_prc>:

void set_vent_prc(uint8_t prc, int8_t full_sync)
{
     6c4:	cf 93       	push	r28
     6c6:	c6 2f       	mov	r28, r22
    uint8_t seg_vent = prc2Seg(VENT_SEG, prc);
     6c8:	68 2f       	mov	r22, r24
     6ca:	88 e0       	ldi	r24, 0x08	; 8
     6cc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <prc2Seg>
    set_vent_seg(seg_vent, full_sync);
     6d0:	6c 2f       	mov	r22, r28
}
     6d2:	cf 91       	pop	r28
}

void set_vent_prc(uint8_t prc, int8_t full_sync)
{
    uint8_t seg_vent = prc2Seg(VENT_SEG, prc);
    set_vent_seg(seg_vent, full_sync);
     6d4:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <set_vent_seg>

000006d8 <calcTemp>:
	    + 0.5;

    return resf;
*/

    if(input == IN_ADC_T_SALON){
     6d8:	87 30       	cpi	r24, 0x07	; 7
     6da:	79 f4       	brne	.+30     	; 0x6fa <calcTemp+0x22>
	return Ts+0.1;
     6dc:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <__data_end>
     6e0:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <__data_end+0x1>
     6e4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end+0x2>
     6e8:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <__data_end+0x3>
     6ec:	2d ec       	ldi	r18, 0xCD	; 205
     6ee:	3c ec       	ldi	r19, 0xCC	; 204
     6f0:	4c ec       	ldi	r20, 0xCC	; 204
     6f2:	5d e3       	ldi	r21, 0x3D	; 61
     6f4:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__addsf3>
     6f8:	08 95       	ret
    }
    return -13;
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	80 e5       	ldi	r24, 0x50	; 80
     700:	91 ec       	ldi	r25, 0xC1	; 193
}
     702:	08 95       	ret

00000704 <calcCond>:

void calcCond(void)
{
     704:	cf 92       	push	r12
     706:	df 92       	push	r13
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	cf 93       	push	r28

    if (Ti > vars.setup_temp) {
     70e:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <vars+0x1>
     712:	c0 90 4c 01 	lds	r12, 0x014C	; 0x80014c <Ti>
     716:	d0 90 4d 01 	lds	r13, 0x014D	; 0x80014d <Ti+0x1>
     71a:	e0 90 4e 01 	lds	r14, 0x014E	; 0x80014e <Ti+0x2>
     71e:	f0 90 4f 01 	lds	r15, 0x014F	; 0x80014f <Ti+0x3>
     722:	06 2e       	mov	r0, r22
     724:	00 0c       	add	r0, r0
     726:	77 0b       	sbc	r23, r23
     728:	88 0b       	sbc	r24, r24
     72a:	99 0b       	sbc	r25, r25
     72c:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__floatsisf>
     730:	a7 01       	movw	r20, r14
     732:	96 01       	movw	r18, r12
     734:	0e 94 bf 0a 	call	0x157e	; 0x157e <__cmpsf2>
     738:	87 ff       	sbrs	r24, 7
     73a:	04 c0       	rjmp	.+8      	; 0x744 <calcCond+0x40>
	CLR_FLAG(f_mode_hot);
     73c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <flags>
     740:	8d 7f       	andi	r24, 0xFD	; 253
     742:	07 c0       	rjmp	.+14     	; 0x752 <calcCond+0x4e>
    } else if (temp_seg_cur > VENT_TO_HOT_SW_SEG) {
     744:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <temp_seg_cur>
     748:	84 30       	cpi	r24, 0x04	; 4
     74a:	2c f0       	brlt	.+10     	; 0x756 <calcCond+0x52>
	SET_FLAG(f_mode_hot);
     74c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <flags>
     750:	82 60       	ori	r24, 0x02	; 2
     752:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <flags>
    }

    if ( TST_FLAG(f_mode_frost_cicle_on) && Ti > (vars.setup_temp - COND_WORK_DELTA_T * 2)
     756:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <flags>
     75a:	82 ff       	sbrs	r24, 2
     75c:	32 c0       	rjmp	.+100    	; 0x7c2 <calcCond+0xbe>
     75e:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <vars+0x1>
     762:	c0 90 4c 01 	lds	r12, 0x014C	; 0x80014c <Ti>
     766:	d0 90 4d 01 	lds	r13, 0x014D	; 0x80014d <Ti+0x1>
     76a:	e0 90 4e 01 	lds	r14, 0x014E	; 0x80014e <Ti+0x2>
     76e:	f0 90 4f 01 	lds	r15, 0x014F	; 0x80014f <Ti+0x3>
     772:	06 2e       	mov	r0, r22
     774:	00 0c       	add	r0, r0
     776:	77 0b       	sbc	r23, r23
     778:	6a 50       	subi	r22, 0x0A	; 10
     77a:	71 09       	sbc	r23, r1
     77c:	07 2e       	mov	r0, r23
     77e:	00 0c       	add	r0, r0
     780:	88 0b       	sbc	r24, r24
     782:	99 0b       	sbc	r25, r25
     784:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__floatsisf>
     788:	a7 01       	movw	r20, r14
     78a:	96 01       	movw	r18, r12
     78c:	0e 94 bf 0a 	call	0x157e	; 0x157e <__cmpsf2>
     790:	87 ff       	sbrs	r24, 7
     792:	17 c0       	rjmp	.+46     	; 0x7c2 <calcCond+0xbe>
	    && Ti > vars.const_cnd_frost_t) {
     794:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <vars+0x8>
     798:	c0 90 4c 01 	lds	r12, 0x014C	; 0x80014c <Ti>
     79c:	d0 90 4d 01 	lds	r13, 0x014D	; 0x80014d <Ti+0x1>
     7a0:	e0 90 4e 01 	lds	r14, 0x014E	; 0x80014e <Ti+0x2>
     7a4:	f0 90 4f 01 	lds	r15, 0x014F	; 0x80014f <Ti+0x3>
     7a8:	06 2e       	mov	r0, r22
     7aa:	00 0c       	add	r0, r0
     7ac:	77 0b       	sbc	r23, r23
     7ae:	88 0b       	sbc	r24, r24
     7b0:	99 0b       	sbc	r25, r25
     7b2:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__floatsisf>
     7b6:	a7 01       	movw	r20, r14
     7b8:	96 01       	movw	r18, r12
     7ba:	0e 94 bf 0a 	call	0x157e	; 0x157e <__cmpsf2>
     7be:	87 fd       	sbrc	r24, 7
     7c0:	36 c0       	rjmp	.+108    	; 0x82e <calcCond+0x12a>
	SET_FLAG(f_mode_frost_cicle_on);
    } else if (!TST_FLAG(f_mode_frost_cicle_on) && Ti > (vars.setup_temp - COND_WORK_DELTA_T)
     7c2:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <flags>
     7c6:	82 fd       	sbrc	r24, 2
     7c8:	36 c0       	rjmp	.+108    	; 0x836 <calcCond+0x132>
     7ca:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <vars+0x1>
     7ce:	c0 90 4c 01 	lds	r12, 0x014C	; 0x80014c <Ti>
     7d2:	d0 90 4d 01 	lds	r13, 0x014D	; 0x80014d <Ti+0x1>
     7d6:	e0 90 4e 01 	lds	r14, 0x014E	; 0x80014e <Ti+0x2>
     7da:	f0 90 4f 01 	lds	r15, 0x014F	; 0x80014f <Ti+0x3>
     7de:	06 2e       	mov	r0, r22
     7e0:	00 0c       	add	r0, r0
     7e2:	77 0b       	sbc	r23, r23
     7e4:	65 50       	subi	r22, 0x05	; 5
     7e6:	71 09       	sbc	r23, r1
     7e8:	07 2e       	mov	r0, r23
     7ea:	00 0c       	add	r0, r0
     7ec:	88 0b       	sbc	r24, r24
     7ee:	99 0b       	sbc	r25, r25
     7f0:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__floatsisf>
     7f4:	a7 01       	movw	r20, r14
     7f6:	96 01       	movw	r18, r12
     7f8:	0e 94 bf 0a 	call	0x157e	; 0x157e <__cmpsf2>
     7fc:	87 ff       	sbrs	r24, 7
     7fe:	1b c0       	rjmp	.+54     	; 0x836 <calcCond+0x132>
	    && Ts > (vars.setup_temp - COND_OVERCOOL_DELTA_T)) {
     800:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <vars+0x1>
     804:	c0 90 48 01 	lds	r12, 0x0148	; 0x800148 <__data_end>
     808:	d0 90 49 01 	lds	r13, 0x0149	; 0x800149 <__data_end+0x1>
     80c:	e0 90 4a 01 	lds	r14, 0x014A	; 0x80014a <__data_end+0x2>
     810:	f0 90 4b 01 	lds	r15, 0x014B	; 0x80014b <__data_end+0x3>
     814:	06 2e       	mov	r0, r22
     816:	00 0c       	add	r0, r0
     818:	77 0b       	sbc	r23, r23
     81a:	88 0b       	sbc	r24, r24
     81c:	99 0b       	sbc	r25, r25
     81e:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__floatsisf>
     822:	a7 01       	movw	r20, r14
     824:	96 01       	movw	r18, r12
     826:	0e 94 bf 0a 	call	0x157e	; 0x157e <__cmpsf2>
     82a:	87 ff       	sbrs	r24, 7
     82c:	04 c0       	rjmp	.+8      	; 0x836 <calcCond+0x132>
	SET_FLAG(f_mode_frost_cicle_on);
     82e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <flags>
     832:	84 60       	ori	r24, 0x04	; 4
     834:	03 c0       	rjmp	.+6      	; 0x83c <calcCond+0x138>
    } else {
	CLR_FLAG(f_mode_frost_cicle_on);
     836:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <flags>
     83a:	8b 7f       	andi	r24, 0xFB	; 251
     83c:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <flags>
    }

    char mode_cond_on = 0;
    if ((!TST_FLAG(f_mode_hot) || get_output(OUT_FROST_SW)) && TST_FLAG(f_mode_frost_cicle_on)) {
     840:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <flags>
     844:	81 ff       	sbrs	r24, 1
     846:	02 c0       	rjmp	.+4      	; 0x84c <calcCond+0x148>
     848:	45 9b       	sbis	0x08, 5	; 8
     84a:	06 c0       	rjmp	.+12     	; 0x858 <calcCond+0x154>
     84c:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <flags>
	SET_FLAG(f_mode_frost_cicle_on);
    } else {
	CLR_FLAG(f_mode_frost_cicle_on);
    }

    char mode_cond_on = 0;
     850:	62 fb       	bst	r22, 2
     852:	cc 27       	eor	r28, r28
     854:	c0 f9       	bld	r28, 0
     856:	01 c0       	rjmp	.+2      	; 0x85a <calcCond+0x156>
     858:	c0 e0       	ldi	r28, 0x00	; 0
    if ((!TST_FLAG(f_mode_hot) || get_output(OUT_FROST_SW)) && TST_FLAG(f_mode_frost_cicle_on)) {
	mode_cond_on = 1;
    }

    switch_cond(mode_cond_on);
     85a:	8c 2f       	mov	r24, r28
     85c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <switch_cond>

    int_to_uart("Mh", TST_FLAG(f_mode_hot));
     860:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <flags>
     864:	62 70       	andi	r22, 0x02	; 2
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	88 e1       	ldi	r24, 0x18	; 24
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 99 00 	call	0x132	; 0x132 <int_to_uart>
    int_to_uart("Mf", TST_FLAG(f_mode_frost_cicle_on));
     870:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <flags>
     874:	64 70       	andi	r22, 0x04	; 4
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	8b e1       	ldi	r24, 0x1B	; 27
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	0e 94 99 00 	call	0x132	; 0x132 <int_to_uart>
    int_to_uart("Mc", mode_cond_on);
     880:	6c 2f       	mov	r22, r28
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	8e e1       	ldi	r24, 0x1E	; 30
     886:	91 e0       	ldi	r25, 0x01	; 1
}
     888:	cf 91       	pop	r28
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	df 90       	pop	r13
     890:	cf 90       	pop	r12

    switch_cond(mode_cond_on);

    int_to_uart("Mh", TST_FLAG(f_mode_hot));
    int_to_uart("Mf", TST_FLAG(f_mode_frost_cicle_on));
    int_to_uart("Mc", mode_cond_on);
     892:	0c 94 99 00 	jmp	0x132	; 0x132 <int_to_uart>

00000896 <calcVent>:
}

void calcVent(float id)
{
     896:	4f 92       	push	r4
     898:	5f 92       	push	r5
     89a:	6f 92       	push	r6
     89c:	7f 92       	push	r7
     89e:	8f 92       	push	r8
     8a0:	9f 92       	push	r9
     8a2:	af 92       	push	r10
     8a4:	bf 92       	push	r11
     8a6:	cf 92       	push	r12
     8a8:	df 92       	push	r13
     8aa:	ef 92       	push	r14
     8ac:	ff 92       	push	r15
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	6b 01       	movw	r12, r22
     8b6:	7c 01       	movw	r14, r24
    float vent_nom_prc = seg2Prc(VENT_SEG, vars.vent_nom_seg);
     8b8:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <vars+0x2>
     8bc:	84 e6       	ldi	r24, 0x64	; 100
     8be:	68 9f       	mul	r22, r24
     8c0:	b0 01       	movw	r22, r0
     8c2:	11 24       	eor	r1, r1
     8c4:	93 e0       	ldi	r25, 0x03	; 3
     8c6:	75 95       	asr	r23
     8c8:	67 95       	ror	r22
     8ca:	9a 95       	dec	r25
     8cc:	e1 f7       	brne	.-8      	; 0x8c6 <calcVent+0x30>
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__floatunsisf>
     8d8:	2b 01       	movw	r4, r22
     8da:	3c 01       	movw	r6, r24
     if (vent_add_prc < 15) { // min 1 seg
     vent_add_prc = 15;
     }
     */

    float p = last_delta * (float) vars.vent_var_kfc * (float) vars.pid_P_kfc;
     8dc:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <vars+0x6>
     8e0:	80 90 51 01 	lds	r8, 0x0151	; 0x800151 <last_delta>
     8e4:	90 90 52 01 	lds	r9, 0x0152	; 0x800152 <last_delta+0x1>
     8e8:	a0 90 53 01 	lds	r10, 0x0153	; 0x800153 <last_delta+0x2>
     8ec:	b0 90 54 01 	lds	r11, 0x0154	; 0x800154 <last_delta+0x3>
     8f0:	c0 91 62 01 	lds	r28, 0x0162	; 0x800162 <vars+0x4>
     8f4:	06 2e       	mov	r0, r22
     8f6:	00 0c       	add	r0, r0
     8f8:	77 0b       	sbc	r23, r23
     8fa:	88 0b       	sbc	r24, r24
     8fc:	99 0b       	sbc	r25, r25
     8fe:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__floatsisf>
     902:	a5 01       	movw	r20, r10
     904:	94 01       	movw	r18, r8
     906:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsf3>
     90a:	4b 01       	movw	r8, r22
     90c:	5c 01       	movw	r10, r24
     90e:	6c 2f       	mov	r22, r28
     910:	cc 0f       	add	r28, r28
     912:	77 0b       	sbc	r23, r23
     914:	88 0b       	sbc	r24, r24
     916:	99 0b       	sbc	r25, r25
     918:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__floatsisf>
     91c:	9b 01       	movw	r18, r22
     91e:	ac 01       	movw	r20, r24
     920:	c5 01       	movw	r24, r10
     922:	b4 01       	movw	r22, r8
     924:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsf3>
     928:	4b 01       	movw	r8, r22
     92a:	5c 01       	movw	r10, r24
//    buf[cnt];
}

void float_to_uart(char *id, float num)
{
    int_to_uart(id, num);
     92c:	0e 94 36 0b 	call	0x166c	; 0x166c <__fixsfsi>
     930:	81 e2       	ldi	r24, 0x21	; 33
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	0e 94 99 00 	call	0x132	; 0x132 <int_to_uart>
     */

    float p = last_delta * (float) vars.vent_var_kfc * (float) vars.pid_P_kfc;
    float_to_uart("Vp", p);

    if (id < 0.0) {
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	a9 01       	movw	r20, r18
     93e:	c7 01       	movw	r24, r14
     940:	b6 01       	movw	r22, r12
     942:	0e 94 bf 0a 	call	0x157e	; 0x157e <__cmpsf2>
     946:	87 ff       	sbrs	r24, 7
     948:	04 c0       	rjmp	.+8      	; 0x952 <__stack+0x53>
	p = -p;
     94a:	b7 fa       	bst	r11, 7
     94c:	b0 94       	com	r11
     94e:	b7 f8       	bld	r11, 7
     950:	b0 94       	com	r11
    }

    float rng = vent_nom_prc / 2;
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	5f e3       	ldi	r21, 0x3F	; 63
     95a:	c3 01       	movw	r24, r6
     95c:	b2 01       	movw	r22, r4
     95e:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsf3>
     962:	7b 01       	movw	r14, r22
     964:	8c 01       	movw	r16, r24
    p = check_rangef(-rng, p, rng);
     966:	90 58       	subi	r25, 0x80	; 128
     968:	a5 01       	movw	r20, r10
     96a:	94 01       	movw	r18, r8
     96c:	0e 94 87 07 	call	0xf0e	; 0xf0e <check_rangef>
     970:	6b 01       	movw	r12, r22
     972:	7c 01       	movw	r14, r24
//    buf[cnt];
}

void float_to_uart(char *id, float num)
{
    int_to_uart(id, num);
     974:	0e 94 36 0b 	call	0x166c	; 0x166c <__fixsfsi>
     978:	84 e2       	ldi	r24, 0x24	; 36
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	0e 94 99 00 	call	0x132	; 0x132 <int_to_uart>

    float rng = vent_nom_prc / 2;
    p = check_rangef(-rng, p, rng);
    float_to_uart("Vn", p);

    vent_add_prc = check_rangef(0, p + vent_nom_prc, 100);
     980:	a7 01       	movw	r20, r14
     982:	96 01       	movw	r18, r12
     984:	c3 01       	movw	r24, r6
     986:	b2 01       	movw	r22, r4
     988:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__addsf3>
     98c:	9b 01       	movw	r18, r22
     98e:	ac 01       	movw	r20, r24
     990:	e1 2c       	mov	r14, r1
     992:	f1 2c       	mov	r15, r1
     994:	08 ec       	ldi	r16, 0xC8	; 200
     996:	12 e4       	ldi	r17, 0x42	; 66
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	cb 01       	movw	r24, r22
     99e:	0e 94 87 07 	call	0xf0e	; 0xf0e <check_rangef>
     9a2:	0e 94 36 0b 	call	0x166c	; 0x166c <__fixsfsi>
     9a6:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <vent_add_prc>
    int_to_uart("Va", vent_add_prc);
     9aa:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <vent_add_prc>
     9ae:	06 2e       	mov	r0, r22
     9b0:	00 0c       	add	r0, r0
     9b2:	77 0b       	sbc	r23, r23
     9b4:	87 e2       	ldi	r24, 0x27	; 39
     9b6:	91 e0       	ldi	r25, 0x01	; 1
}
     9b8:	cf 91       	pop	r28
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
     9be:	ff 90       	pop	r15
     9c0:	ef 90       	pop	r14
     9c2:	df 90       	pop	r13
     9c4:	cf 90       	pop	r12
     9c6:	bf 90       	pop	r11
     9c8:	af 90       	pop	r10
     9ca:	9f 90       	pop	r9
     9cc:	8f 90       	pop	r8
     9ce:	7f 90       	pop	r7
     9d0:	6f 90       	pop	r6
     9d2:	5f 90       	pop	r5
     9d4:	4f 90       	pop	r4
    float rng = vent_nom_prc / 2;
    p = check_rangef(-rng, p, rng);
    float_to_uart("Vn", p);

    vent_add_prc = check_rangef(0, p + vent_nom_prc, 100);
    int_to_uart("Va", vent_add_prc);
     9d6:	0c 94 99 00 	jmp	0x132	; 0x132 <int_to_uart>

000009da <calcVal>:
}

void calcVal(void)
{
     9da:	4f 92       	push	r4
     9dc:	5f 92       	push	r5
     9de:	6f 92       	push	r6
     9e0:	7f 92       	push	r7
     9e2:	8f 92       	push	r8
     9e4:	9f 92       	push	r9
     9e6:	af 92       	push	r10
     9e8:	bf 92       	push	r11
     9ea:	cf 92       	push	r12
     9ec:	df 92       	push	r13
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
    calcCond();
     9f8:	0e 94 82 03 	call	0x704	; 0x704 <calcCond>

    int_to_uart("Ti", Ti);
     9fc:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <Ti>
     a00:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <Ti+0x1>
     a04:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <Ti+0x2>
     a08:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <Ti+0x3>
     a0c:	0e 94 36 0b 	call	0x166c	; 0x166c <__fixsfsi>
     a10:	8a e2       	ldi	r24, 0x2A	; 42
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	0e 94 99 00 	call	0x132	; 0x132 <int_to_uart>
    int_to_uart("Ts", Ts);
     a18:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <__data_end>
     a1c:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <__data_end+0x1>
     a20:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end+0x2>
     a24:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <__data_end+0x3>
     a28:	0e 94 36 0b 	call	0x166c	; 0x166c <__fixsfsi>
     a2c:	8d e2       	ldi	r24, 0x2D	; 45
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	0e 94 99 00 	call	0x132	; 0x132 <int_to_uart>
    int_to_uart("St", vars.setup_temp);
     a34:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <vars+0x1>
     a38:	06 2e       	mov	r0, r22
     a3a:	00 0c       	add	r0, r0
     a3c:	77 0b       	sbc	r23, r23
     a3e:	80 e3       	ldi	r24, 0x30	; 48
     a40:	91 e0       	ldi	r25, 0x01	; 1
     a42:	0e 94 99 00 	call	0x132	; 0x132 <int_to_uart>
    float_to_uart("lD", last_delta);
     a46:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <last_delta>
     a4a:	70 91 52 01 	lds	r23, 0x0152	; 0x800152 <last_delta+0x1>
     a4e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <last_delta+0x2>
     a52:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <last_delta+0x3>
//    buf[cnt];
}

void float_to_uart(char *id, float num)
{
    int_to_uart(id, num);
     a56:	0e 94 36 0b 	call	0x166c	; 0x166c <__fixsfsi>
     a5a:	83 e3       	ldi	r24, 0x33	; 51
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	0e 94 99 00 	call	0x132	; 0x132 <int_to_uart>

    int_to_uart("Ti", Ti);
    int_to_uart("Ts", Ts);
    int_to_uart("St", vars.setup_temp);
    float_to_uart("lD", last_delta);
    float delta = (float) vars.setup_temp;
     a62:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <vars+0x1>
    delta = check_rangef(-40.0, delta - Ts, 40.0);
     a66:	c0 90 48 01 	lds	r12, 0x0148	; 0x800148 <__data_end>
     a6a:	d0 90 49 01 	lds	r13, 0x0149	; 0x800149 <__data_end+0x1>
     a6e:	e0 90 4a 01 	lds	r14, 0x014A	; 0x80014a <__data_end+0x2>
     a72:	f0 90 4b 01 	lds	r15, 0x014B	; 0x80014b <__data_end+0x3>
     a76:	06 2e       	mov	r0, r22
     a78:	00 0c       	add	r0, r0
     a7a:	77 0b       	sbc	r23, r23
     a7c:	88 0b       	sbc	r24, r24
     a7e:	99 0b       	sbc	r25, r25
     a80:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__floatsisf>
     a84:	a7 01       	movw	r20, r14
     a86:	96 01       	movw	r18, r12
     a88:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__subsf3>
     a8c:	9b 01       	movw	r18, r22
     a8e:	ac 01       	movw	r20, r24
     a90:	e1 2c       	mov	r14, r1
     a92:	f1 2c       	mov	r15, r1
     a94:	00 e2       	ldi	r16, 0x20	; 32
     a96:	12 e4       	ldi	r17, 0x42	; 66
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	80 e2       	ldi	r24, 0x20	; 32
     a9e:	92 ec       	ldi	r25, 0xC2	; 194
     aa0:	0e 94 87 07 	call	0xf0e	; 0xf0e <check_rangef>
     aa4:	6b 01       	movw	r12, r22
     aa6:	7c 01       	movw	r14, r24
    if (fabs(delta) < 0.2) {
     aa8:	9f 77       	andi	r25, 0x7F	; 127
     aaa:	2d ec       	ldi	r18, 0xCD	; 205
     aac:	3c ec       	ldi	r19, 0xCC	; 204
     aae:	4c e4       	ldi	r20, 0x4C	; 76
     ab0:	5e e3       	ldi	r21, 0x3E	; 62
     ab2:	0e 94 bf 0a 	call	0x157e	; 0x157e <__cmpsf2>
     ab6:	87 ff       	sbrs	r24, 7
     ab8:	03 c0       	rjmp	.+6      	; 0xac0 <calcVal+0xe6>
	delta = 0.0;
     aba:	c1 2c       	mov	r12, r1
     abc:	d1 2c       	mov	r13, r1
     abe:	76 01       	movw	r14, r12
//    buf[cnt];
}

void float_to_uart(char *id, float num)
{
    int_to_uart(id, num);
     ac0:	c7 01       	movw	r24, r14
     ac2:	b6 01       	movw	r22, r12
     ac4:	0e 94 36 0b 	call	0x166c	; 0x166c <__fixsfsi>
     ac8:	86 e3       	ldi	r24, 0x36	; 54
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	0e 94 99 00 	call	0x132	; 0x132 <int_to_uart>
    delta = check_rangef(-40.0, delta - Ts, 40.0);
    if (fabs(delta) < 0.2) {
	delta = 0.0;
    }
    float_to_uart("Dt", delta);
    float id = delta - last_delta;
     ad0:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <last_delta>
     ad4:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <last_delta+0x1>
     ad8:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <last_delta+0x2>
     adc:	50 91 54 01 	lds	r21, 0x0154	; 0x800154 <last_delta+0x3>
     ae0:	c7 01       	movw	r24, r14
     ae2:	b6 01       	movw	r22, r12
     ae4:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__subsf3>
     ae8:	2b 01       	movw	r4, r22
     aea:	3c 01       	movw	r6, r24
    last_delta = delta;
     aec:	c0 92 51 01 	sts	0x0151, r12	; 0x800151 <last_delta>
     af0:	d0 92 52 01 	sts	0x0152, r13	; 0x800152 <last_delta+0x1>
     af4:	e0 92 53 01 	sts	0x0153, r14	; 0x800153 <last_delta+0x2>
     af8:	f0 92 54 01 	sts	0x0154, r15	; 0x800154 <last_delta+0x3>
//    buf[cnt];
}

void float_to_uart(char *id, float num)
{
    int_to_uart(id, num);
     afc:	0e 94 36 0b 	call	0x166c	; 0x166c <__fixsfsi>
     b00:	89 e3       	ldi	r24, 0x39	; 57
     b02:	91 e0       	ldi	r25, 0x01	; 1
     b04:	0e 94 99 00 	call	0x132	; 0x132 <int_to_uart>
    float_to_uart("Dt", delta);
    float id = delta - last_delta;
    last_delta = delta;
    float_to_uart("Id", id);

    float pid = (delta + (Ipid * (float) vars.pid_I_kfc) / 100.0 + (id * (float) PID_D_KFC) / 100.0)
     b08:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <vars+0x5>
     b0c:	80 90 58 01 	lds	r8, 0x0158	; 0x800158 <Ipid>
     b10:	90 90 59 01 	lds	r9, 0x0159	; 0x800159 <Ipid+0x1>
     b14:	a0 90 5a 01 	lds	r10, 0x015A	; 0x80015a <Ipid+0x2>
     b18:	b0 90 5b 01 	lds	r11, 0x015B	; 0x80015b <Ipid+0x3>
	    * (float) vars.pid_P_kfc;
     b1c:	c0 91 62 01 	lds	r28, 0x0162	; 0x800162 <vars+0x4>
    float_to_uart("Dt", delta);
    float id = delta - last_delta;
    last_delta = delta;
    float_to_uart("Id", id);

    float pid = (delta + (Ipid * (float) vars.pid_I_kfc) / 100.0 + (id * (float) PID_D_KFC) / 100.0)
     b20:	06 2e       	mov	r0, r22
     b22:	00 0c       	add	r0, r0
     b24:	77 0b       	sbc	r23, r23
     b26:	88 0b       	sbc	r24, r24
     b28:	99 0b       	sbc	r25, r25
     b2a:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__floatsisf>
     b2e:	a5 01       	movw	r20, r10
     b30:	94 01       	movw	r18, r8
     b32:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsf3>
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	48 ec       	ldi	r20, 0xC8	; 200
     b3c:	52 e4       	ldi	r21, 0x42	; 66
     b3e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__divsf3>
     b42:	a7 01       	movw	r20, r14
     b44:	96 01       	movw	r18, r12
     b46:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__addsf3>
     b4a:	4b 01       	movw	r8, r22
     b4c:	5c 01       	movw	r10, r24
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e2       	ldi	r20, 0x20	; 32
     b54:	51 e4       	ldi	r21, 0x41	; 65
     b56:	c3 01       	movw	r24, r6
     b58:	b2 01       	movw	r22, r4
     b5a:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsf3>
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	48 ec       	ldi	r20, 0xC8	; 200
     b64:	52 e4       	ldi	r21, 0x42	; 66
     b66:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__divsf3>
     b6a:	9b 01       	movw	r18, r22
     b6c:	ac 01       	movw	r20, r24
     b6e:	c5 01       	movw	r24, r10
     b70:	b4 01       	movw	r22, r8
     b72:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__addsf3>
     b76:	2b 01       	movw	r4, r22
     b78:	3c 01       	movw	r6, r24
     b7a:	6c 2f       	mov	r22, r28
     b7c:	cc 0f       	add	r28, r28
     b7e:	77 0b       	sbc	r23, r23
     b80:	88 0b       	sbc	r24, r24
     b82:	99 0b       	sbc	r25, r25
     b84:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__floatsisf>
     b88:	9b 01       	movw	r18, r22
     b8a:	ac 01       	movw	r20, r24
     b8c:	c3 01       	movw	r24, r6
     b8e:	b2 01       	movw	r22, r4
     b90:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsf3>
     b94:	4b 01       	movw	r8, r22
     b96:	5c 01       	movw	r10, r24
	    * (float) vars.pid_P_kfc;

    if (!(pid > 100.0 && delta > 0.0) && !(pid < -100.0 && delta < 0.0)) {
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	48 ec       	ldi	r20, 0xC8	; 200
     b9e:	52 e4       	ldi	r21, 0x42	; 66
     ba0:	0e 94 1e 0c 	call	0x183c	; 0x183c <__gesf2>
     ba4:	18 16       	cp	r1, r24
     ba6:	4c f4       	brge	.+18     	; 0xbba <calcVal+0x1e0>
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	a9 01       	movw	r20, r18
     bae:	c7 01       	movw	r24, r14
     bb0:	b6 01       	movw	r22, r12
     bb2:	0e 94 1e 0c 	call	0x183c	; 0x183c <__gesf2>
     bb6:	18 16       	cp	r1, r24
     bb8:	3c f1       	brlt	.+78     	; 0xc08 <calcVal+0x22e>
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	48 ec       	ldi	r20, 0xC8	; 200
     bc0:	52 ec       	ldi	r21, 0xC2	; 194
     bc2:	c5 01       	movw	r24, r10
     bc4:	b4 01       	movw	r22, r8
     bc6:	0e 94 bf 0a 	call	0x157e	; 0x157e <__cmpsf2>
     bca:	87 ff       	sbrs	r24, 7
     bcc:	09 c0       	rjmp	.+18     	; 0xbe0 <calcVal+0x206>
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	a9 01       	movw	r20, r18
     bd4:	c7 01       	movw	r24, r14
     bd6:	b6 01       	movw	r22, r12
     bd8:	0e 94 bf 0a 	call	0x157e	; 0x157e <__cmpsf2>
     bdc:	87 fd       	sbrc	r24, 7
     bde:	14 c0       	rjmp	.+40     	; 0xc08 <calcVal+0x22e>
	Ipid += delta;
     be0:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <Ipid>
     be4:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <Ipid+0x1>
     be8:	40 91 5a 01 	lds	r20, 0x015A	; 0x80015a <Ipid+0x2>
     bec:	50 91 5b 01 	lds	r21, 0x015B	; 0x80015b <Ipid+0x3>
     bf0:	c7 01       	movw	r24, r14
     bf2:	b6 01       	movw	r22, r12
     bf4:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__addsf3>
     bf8:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <Ipid>
     bfc:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <Ipid+0x1>
     c00:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Ipid+0x2>
     c04:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <Ipid+0x3>
    }

    float_to_uart("Ip", Ipid);
     c08:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <Ipid>
     c0c:	70 91 59 01 	lds	r23, 0x0159	; 0x800159 <Ipid+0x1>
     c10:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Ipid+0x2>
     c14:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Ipid+0x3>
//    buf[cnt];
}

void float_to_uart(char *id, float num)
{
    int_to_uart(id, num);
     c18:	0e 94 36 0b 	call	0x166c	; 0x166c <__fixsfsi>
     c1c:	8c e3       	ldi	r24, 0x3C	; 60
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	0e 94 99 00 	call	0x132	; 0x132 <int_to_uart>
     c24:	c5 01       	movw	r24, r10
     c26:	b4 01       	movw	r22, r8
     c28:	0e 94 36 0b 	call	0x166c	; 0x166c <__fixsfsi>
     c2c:	8f e3       	ldi	r24, 0x3F	; 63
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	0e 94 99 00 	call	0x132	; 0x132 <int_to_uart>
    }

    float_to_uart("Ip", Ipid);
    float_to_uart("pid", pid);

    temp_out_delay++;
     c34:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <temp_out_delay>
     c38:	8f 5f       	subi	r24, 0xFF	; 255
     c3a:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <temp_out_delay>
    if (temp_out_delay > vars.temp_seg_delay) {
     c3e:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <temp_out_delay>
     c42:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <vars+0x7>
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	08 2e       	mov	r0, r24
     c4a:	00 0c       	add	r0, r0
     c4c:	99 0b       	sbc	r25, r25
     c4e:	82 17       	cp	r24, r18
     c50:	93 07       	cpc	r25, r19
     c52:	8c f4       	brge	.+34     	; 0xc76 <calcVal+0x29c>
	temp_out_delay = 0;
     c54:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <temp_out_delay>
	//temp_out_prc = (check_rangef(0, pid, 101) + temp_out_prc) / 2;
	temp_out_prc = check_rangef(0, pid, 101);
     c58:	e1 2c       	mov	r14, r1
     c5a:	f1 2c       	mov	r15, r1
     c5c:	0a ec       	ldi	r16, 0xCA	; 202
     c5e:	12 e4       	ldi	r17, 0x42	; 66
     c60:	a5 01       	movw	r20, r10
     c62:	94 01       	movw	r18, r8
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	cb 01       	movw	r24, r22
     c6a:	0e 94 87 07 	call	0xf0e	; 0xf0e <check_rangef>
     c6e:	0e 94 3d 0b 	call	0x167a	; 0x167a <__fixunssfsi>
     c72:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <temp_out_prc>
    }

    int_to_uart("out", temp_out_prc);
     c76:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <temp_out_prc>
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	83 e4       	ldi	r24, 0x43	; 67
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	0e 94 99 00 	call	0x132	; 0x132 <int_to_uart>

    //calcVent(id);
    calcVent(pid);
     c84:	c5 01       	movw	r24, r10
     c86:	b4 01       	movw	r22, r8
     c88:	0e 94 4b 04 	call	0x896	; 0x896 <calcVent>

    uart_nl();
}
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	df 90       	pop	r13
     c98:	cf 90       	pop	r12
     c9a:	bf 90       	pop	r11
     c9c:	af 90       	pop	r10
     c9e:	9f 90       	pop	r9
     ca0:	8f 90       	pop	r8
     ca2:	7f 90       	pop	r7
     ca4:	6f 90       	pop	r6
     ca6:	5f 90       	pop	r5
     ca8:	4f 90       	pop	r4
    int_to_uart("out", temp_out_prc);

    //calcVent(id);
    calcVent(pid);

    uart_nl();
     caa:	0c 94 df 00 	jmp	0x1be	; 0x1be <uart_nl>

00000cae <recycleSwitch>:
}

void recycleSwitch(void) // эмуляция нажатия
{
    pin_low(OUT_BTN_Recycle);
     cae:	58 98       	cbi	0x0b, 0	; 11
    set_dir_out(OUT_BTN_Recycle);
     cb0:	50 9a       	sbi	0x0a, 0	; 10
    delay_ms(50);
     cb2:	82 e3       	ldi	r24, 0x32	; 50
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 63 07 	call	0xec6	; 0xec6 <delay_ms>
//    pin_high(OUT_BTN_Recycle);
    set_dir_in(OUT_BTN_Recycle);
     cba:	50 98       	cbi	0x0a, 0	; 10
     cbc:	08 95       	ret

00000cbe <prefAirSwitch>:
}

void prefAirSwitch(void) // эмуляция нажатия
{
    pin_low(OUT_BTN_PREF_MODE);
     cbe:	40 98       	cbi	0x08, 0	; 8
    set_dir_out(OUT_BTN_PREF_MODE);
     cc0:	38 9a       	sbi	0x07, 0	; 7
    delay_ms(50);
     cc2:	82 e3       	ldi	r24, 0x32	; 50
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 63 07 	call	0xec6	; 0xec6 <delay_ms>
    set_dir_in(OUT_BTN_PREF_MODE);
     cca:	38 98       	cbi	0x07, 0	; 7
     ccc:	08 95       	ret

00000cce <hiAirSwitch>:
}

void hiAirSwitch(void) // эмуляция нажатия
{
    pin_low(IN_BTN_HI_MODE);
     cce:	44 98       	cbi	0x08, 4	; 8
    set_dir_out(IN_BTN_HI_MODE);
     cd0:	3c 9a       	sbi	0x07, 4	; 7
    delay_ms(50);
     cd2:	82 e3       	ldi	r24, 0x32	; 50
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 63 07 	call	0xec6	; 0xec6 <delay_ms>
    set_dir_in(IN_BTN_HI_MODE);
     cda:	3c 98       	cbi	0x07, 4	; 7
     cdc:	08 95       	ret

00000cde <setup_pins>:
}

void setup_pins(void)
{
    PORTB = 0;
     cde:	15 b8       	out	0x05, r1	; 5
    PORTC = 0;
     ce0:	18 b8       	out	0x08, r1	; 8
    PORTD = 0;
     ce2:	1b b8       	out	0x0b, r1	; 11
    DDRB = 0; //dir to in
     ce4:	14 b8       	out	0x04, r1	; 4
    DDRC = 0; //dir to in
     ce6:	17 b8       	out	0x07, r1	; 7
    DDRD = 0; //dir to in
     ce8:	1a b8       	out	0x0a, r1	; 10
     set_dir_in(IN_BTN_V_DWN);
     set_dir_in(IN_ACC);
     IN_NIGHT_BR
     set_dir_in(IN_FROST_BTN);*/

    pin_low(OUT_FROST_SW);
     cea:	45 98       	cbi	0x08, 5	; 8
    set_dir_out(OUT_FROST_SW);
     cec:	3d 9a       	sbi	0x07, 5	; 7
    pin_low(OUT_FROST_IND);
     cee:	41 98       	cbi	0x08, 1	; 8
    set_dir_out(OUT_FROST_IND);
     cf0:	39 9a       	sbi	0x07, 1	; 7
    set_dir_out(OUT_BTN_T_UP);
     cf2:	55 9a       	sbi	0x0a, 5	; 10
    set_dir_out(OUT_BTN_T_DWN);
     cf4:	54 9a       	sbi	0x0a, 4	; 10
    set_dir_out(OUT_BTN_V_UP);
     cf6:	56 9a       	sbi	0x0a, 6	; 10
    set_dir_out(OUT_BTN_V_DWN);
     cf8:	21 9a       	sbi	0x04, 1	; 4
     cfa:	08 95       	ret

00000cfc <setup_display>:
}

void setup_display(void)
{
    Send_7219(0x09, 0x00); //режим декодирования
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	89 e0       	ldi	r24, 0x09	; 9
     d00:	0e 94 96 06 	call	0xd2c	; 0xd2c <Send_7219>
    int8_t br_dsp = DISP_BRG_MIN;
    if (!get_input(IN_NIGHT_BR)) {
     d04:	32 99       	sbic	0x06, 2	; 6
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <setup_display+0x10>
	br_dsp = DISP_BRG_MAX;
     d08:	67 e0       	ldi	r22, 0x07	; 7
     d0a:	01 c0       	rjmp	.+2      	; 0xd0e <setup_display+0x12>
}

void setup_display(void)
{
    Send_7219(0x09, 0x00); //режим декодирования
    int8_t br_dsp = DISP_BRG_MIN;
     d0c:	61 e0       	ldi	r22, 0x01	; 1
    if (!get_input(IN_NIGHT_BR)) {
	br_dsp = DISP_BRG_MAX;
    }
    Send_7219(0x0A, br_dsp); //яркость
     d0e:	8a e0       	ldi	r24, 0x0A	; 10
     d10:	0e 94 96 06 	call	0xd2c	; 0xd2c <Send_7219>
    Send_7219(0x0B, DISP_LEN - 1); //сколько разрядов используем
     d14:	63 e0       	ldi	r22, 0x03	; 3
     d16:	8b e0       	ldi	r24, 0x0B	; 11
     d18:	0e 94 96 06 	call	0xd2c	; 0xd2c <Send_7219>
    Send_7219(0x0C, 1); //включим индикатор
     d1c:	61 e0       	ldi	r22, 0x01	; 1
     d1e:	8c e0       	ldi	r24, 0x0C	; 12
     d20:	0e 94 96 06 	call	0xd2c	; 0xd2c <Send_7219>
    Send_7219(0x0F, 0x00);
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	8f e0       	ldi	r24, 0x0F	; 15
     d28:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <Send_7219>

00000d2c <Send_7219>:
#include "disp.h"
#include "io.h"
#include <stdlib.h>

void Send_7219(int8_t rg, int8_t dt)
{
     d2c:	1f 93       	push	r17
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	16 2f       	mov	r17, r22
    pin_low(SPI_SS);
     d34:	2a 98       	cbi	0x05, 2	; 5
     d36:	c2 e0       	ldi	r28, 0x02	; 2
     d38:	d0 e0       	ldi	r29, 0x00	; 0
     d3a:	fe 01       	movw	r30, r28
     d3c:	31 97       	sbiw	r30, 0x01	; 1
     d3e:	f1 f7       	brne	.-4      	; 0xd3c <Send_7219+0x10>
    delay(1);
    SPI_SendByte(rg);
     d40:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <SPI_SendByte>
    SPI_SendByte(dt);
     d44:	81 2f       	mov	r24, r17
     d46:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <SPI_SendByte>
     d4a:	21 97       	sbiw	r28, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <Send_7219+0x1e>
    delay(1);
    pin_high(SPI_SS);
     d4e:	2a 9a       	sbi	0x05, 2	; 5
}
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	08 95       	ret

00000d58 <Clear_7219>:

void Clear_7219(void)
{
     d58:	cf 93       	push	r28
    int8_t i = DISP_LEN;
     d5a:	c4 e0       	ldi	r28, 0x04	; 4
    // Loop until 0, but don't run for zero
    do {
	// Set each display in use to blank
	Send_7219(i, 0xF); //int8_t BLANK
     d5c:	6f e0       	ldi	r22, 0x0F	; 15
     d5e:	8c 2f       	mov	r24, r28
     d60:	0e 94 96 06 	call	0xd2c	; 0xd2c <Send_7219>
     d64:	c1 50       	subi	r28, 0x01	; 1
    } while (--i);
     d66:	d1 f7       	brne	.-12     	; 0xd5c <Clear_7219+0x4>
}
     d68:	cf 91       	pop	r28
     d6a:	08 95       	ret

00000d6c <Disp_Bars>:
	0, 0b1000, 0b10000000, 0b100, 0b10000, 1, 0b100000, 0b10, 0b1000000 };
	*/
static uint8_t bar_conv_full[] = {
	0, 0b1000, 136, 140, 156, 157, 189, 191, 255 };
void Disp_Bars(uint8_t dt)
{
     d6c:	cf 93       	push	r28
    if (dt < 9) {
	dt = bar_conv_full[dt];
     d6e:	e8 2f       	mov	r30, r24
	*/
static uint8_t bar_conv_full[] = {
	0, 0b1000, 136, 140, 156, 157, 189, 191, 255 };
void Disp_Bars(uint8_t dt)
{
    if (dt < 9) {
     d70:	89 30       	cpi	r24, 0x09	; 9
     d72:	48 f4       	brcc	.+18     	; 0xd86 <Disp_Bars+0x1a>
	dt = bar_conv_full[dt];
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	e6 5f       	subi	r30, 0xF6	; 246
     d78:	fe 4f       	sbci	r31, 0xFE	; 254
     d7a:	c0 81       	ld	r28, Z
	Send_7219(BAR1_SEG, 0);
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	0e 94 96 06 	call	0xd2c	; 0xd2c <Send_7219>
     d84:	0b c0       	rjmp	.+22     	; 0xd9c <Disp_Bars+0x30>
    } else {
	if (dt > 10)
	    dt = 10;
	Send_7219(BAR1_SEG, bar_conv_full[dt - 8]);
     d86:	8b 30       	cpi	r24, 0x0B	; 11
     d88:	08 f0       	brcs	.+2      	; 0xd8c <Disp_Bars+0x20>
     d8a:	ea e0       	ldi	r30, 0x0A	; 10
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	ee 5f       	subi	r30, 0xFE	; 254
     d90:	fe 4f       	sbci	r31, 0xFE	; 254
     d92:	60 81       	ld	r22, Z
     d94:	82 e0       	ldi	r24, 0x02	; 2
     d96:	0e 94 96 06 	call	0xd2c	; 0xd2c <Send_7219>
	dt = 255;
     d9a:	cf ef       	ldi	r28, 0xFF	; 255
    }
    Send_7219(BAR0_SEG, dt);
     d9c:	6c 2f       	mov	r22, r28
     d9e:	81 e0       	ldi	r24, 0x01	; 1
}
     da0:	cf 91       	pop	r28
	if (dt > 10)
	    dt = 10;
	Send_7219(BAR1_SEG, bar_conv_full[dt - 8]);
	dt = 255;
    }
    Send_7219(BAR0_SEG, dt);
     da2:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <Send_7219>

00000da6 <Disp_Num_Seg>:

static uint8_t num_conv_singl[10] = {
	0b10111101, 0b10000001, 0b11111000, 0b11101001, 0b11000101, 0b1101101, 0b1111101, 0b10001001, 0b11111101,
	0b11101101 };
void Disp_Num_Seg(uint8_t seg, uint8_t num, uint8_t dot)
{
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
    if (num < 10) {
     daa:	6a 30       	cpi	r22, 0x0A	; 10
     dac:	30 f4       	brcc	.+12     	; 0xdba <Disp_Num_Seg+0x14>
	num = num_conv_singl[num];
     dae:	e6 2f       	mov	r30, r22
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	e0 50       	subi	r30, 0x00	; 0
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	60 81       	ld	r22, Z
     db8:	30 c0       	rjmp	.+96     	; 0xe1a <Disp_Num_Seg+0x74>
    } else {
	switch (num) {
     dba:	06 2f       	mov	r16, r22
     dbc:	10 e0       	ldi	r17, 0x00	; 0
     dbe:	f8 01       	movw	r30, r16
     dc0:	ff 97       	sbiw	r30, 0x3f	; 63
     dc2:	e6 33       	cpi	r30, 0x36	; 54
     dc4:	f1 05       	cpc	r31, r1
     dc6:	30 f5       	brcc	.+76     	; 0xe14 <Disp_Num_Seg+0x6e>
     dc8:	ec 5b       	subi	r30, 0xBC	; 188
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	0c 94 be 0c 	jmp	0x197c	; 0x197c <__tablejump2__>
	case 'S':
	    num = num_conv_singl[5];
     dd0:	6d e6       	ldi	r22, 0x6D	; 109
     dd2:	23 c0       	rjmp	.+70     	; 0xe1a <Disp_Num_Seg+0x74>
	case 'a':
	    num = 0b11011101;
	    break;
	case 'b':
	case 'B':
	    num = 0b01110101;
     dd4:	65 e7       	ldi	r22, 0x75	; 117
	    break;
     dd6:	21 c0       	rjmp	.+66     	; 0xe1a <Disp_Num_Seg+0x74>
	case 'C':
	    num = 0b00111100;
     dd8:	6c e3       	ldi	r22, 0x3C	; 60
	    break;
     dda:	1f c0       	rjmp	.+62     	; 0xe1a <Disp_Num_Seg+0x74>
	case 'c':
	    num = 0b01110000;
     ddc:	60 e7       	ldi	r22, 0x70	; 112
	    break;
     dde:	1d c0       	rjmp	.+58     	; 0xe1a <Disp_Num_Seg+0x74>
	case 'D':
	case 'd':
	    num = 0b11110001;
     de0:	61 ef       	ldi	r22, 0xF1	; 241
	    break;
     de2:	1b c0       	rjmp	.+54     	; 0xe1a <Disp_Num_Seg+0x74>
	case 'E':
	case 'e':
	    num = 0b01111100;
     de4:	6c e7       	ldi	r22, 0x7C	; 124
	    break;
     de6:	19 c0       	rjmp	.+50     	; 0xe1a <Disp_Num_Seg+0x74>
	case 'F':
	case 'f':
	    num = 0b01011100;
     de8:	6c e5       	ldi	r22, 0x5C	; 92
	    break;
     dea:	17 c0       	rjmp	.+46     	; 0xe1a <Disp_Num_Seg+0x74>
	case 'h':
	    num = 0b01010101;
     dec:	65 e5       	ldi	r22, 0x55	; 85
	    break;
     dee:	15 c0       	rjmp	.+42     	; 0xe1a <Disp_Num_Seg+0x74>
	case 'H':
	    num = 0b11010101;
     df0:	65 ed       	ldi	r22, 0xD5	; 213
	    break;
     df2:	13 c0       	rjmp	.+38     	; 0xe1a <Disp_Num_Seg+0x74>
	case 'n':
	    num = 0b01010001;
     df4:	61 e5       	ldi	r22, 0x51	; 81
	    break;
     df6:	11 c0       	rjmp	.+34     	; 0xe1a <Disp_Num_Seg+0x74>
	case 'o':
	    num = 0b01110001;
     df8:	61 e7       	ldi	r22, 0x71	; 113
	    break;
     dfa:	0f c0       	rjmp	.+30     	; 0xe1a <Disp_Num_Seg+0x74>
	case 't':
	    num = 0b01110100;
	    break;
	case 'L':
	    num = 0b00110100;
     dfc:	64 e3       	ldi	r22, 0x34	; 52
	    break;
     dfe:	0d c0       	rjmp	.+26     	; 0xe1a <Disp_Num_Seg+0x74>
	case 'i':
	    num = 0b00000001;
     e00:	61 e0       	ldi	r22, 0x01	; 1
	    break;
     e02:	0b c0       	rjmp	.+22     	; 0xe1a <Disp_Num_Seg+0x74>
	case 'I':
	    num = 0b00010100;
     e04:	64 e1       	ldi	r22, 0x14	; 20
	    break;
     e06:	09 c0       	rjmp	.+18     	; 0xe1a <Disp_Num_Seg+0x74>
	case 'r':
	    num = 0b01010000;
     e08:	60 e5       	ldi	r22, 0x50	; 80
	    break;
     e0a:	07 c0       	rjmp	.+14     	; 0xe1a <Disp_Num_Seg+0x74>
	case 'P':
	    num = 0b11011100;
     e0c:	6c ed       	ldi	r22, 0xDC	; 220
	    break;
     e0e:	05 c0       	rjmp	.+10     	; 0xe1a <Disp_Num_Seg+0x74>
	case '?':
	    num = 0b11011000;
     e10:	68 ed       	ldi	r22, 0xD8	; 216
	    break;
     e12:	03 c0       	rjmp	.+6      	; 0xe1a <Disp_Num_Seg+0x74>
	default:
	    num = 0b01000000;
     e14:	60 e4       	ldi	r22, 0x40	; 64
     e16:	01 c0       	rjmp	.+2      	; 0xe1a <Disp_Num_Seg+0x74>
	case 'S':
	    num = num_conv_singl[5];
	    break;
	case 'A':
	case 'a':
	    num = 0b11011101;
     e18:	6d ed       	ldi	r22, 0xDD	; 221
	    break;
	default:
	    num = 0b01000000;
	}
    }
    if (dot)
     e1a:	41 11       	cpse	r20, r1
	num |= 2;
     e1c:	62 60       	ori	r22, 0x02	; 2
    Send_7219(seg, num);
}
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
	    num = 0b01000000;
	}
    }
    if (dot)
	num |= 2;
    Send_7219(seg, num);
     e22:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <Send_7219>

00000e26 <Disp_Num>:
}

void Disp_Num(int8_t num, uint8_t dot)
{
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	28 2f       	mov	r18, r24
     e2c:	d6 2f       	mov	r29, r22
    uint8_t dot1 = 0;
    uint8_t st, ml;
    if (num < 0) {
     e2e:	87 ff       	sbrs	r24, 7
     e30:	03 c0       	rjmp	.+6      	; 0xe38 <Disp_Num+0x12>
	dot1 = 1;
	num = abs(num);
     e32:	21 95       	neg	r18
void Disp_Num(int8_t num, uint8_t dot)
{
    uint8_t dot1 = 0;
    uint8_t st, ml;
    if (num < 0) {
	dot1 = 1;
     e34:	41 e0       	ldi	r20, 0x01	; 1
     e36:	01 c0       	rjmp	.+2      	; 0xe3a <Disp_Num+0x14>
    Send_7219(seg, num);
}

void Disp_Num(int8_t num, uint8_t dot)
{
    uint8_t dot1 = 0;
     e38:	40 e0       	ldi	r20, 0x00	; 0
    uint8_t st, ml;
    if (num < 0) {
	dot1 = 1;
	num = abs(num);
    }
    if (num > 99) {
     e3a:	24 36       	cpi	r18, 0x64	; 100
     e3c:	54 f4       	brge	.+20     	; 0xe52 <Disp_Num+0x2c>
	st = 'h';
	ml = 'i';
    } else {
	st = num / 10;
     e3e:	82 2f       	mov	r24, r18
     e40:	6a e0       	ldi	r22, 0x0A	; 10
     e42:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__divmodqi4>
	ml = num - (st * 10);
     e46:	c2 2f       	mov	r28, r18
     e48:	9a e0       	ldi	r25, 0x0A	; 10
     e4a:	89 9f       	mul	r24, r25
     e4c:	c0 19       	sub	r28, r0
     e4e:	11 24       	eor	r1, r1
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <Disp_Num+0x30>
	dot1 = 1;
	num = abs(num);
    }
    if (num > 99) {
	st = 'h';
	ml = 'i';
     e52:	c9 e6       	ldi	r28, 0x69	; 105
    if (num < 0) {
	dot1 = 1;
	num = abs(num);
    }
    if (num > 99) {
	st = 'h';
     e54:	88 e6       	ldi	r24, 0x68	; 104
    } else {
	st = num / 10;
	ml = num - (st * 10);
    }

    Disp_Num_Seg(NUM0_SEG, st, dot1);
     e56:	68 2f       	mov	r22, r24
     e58:	83 e0       	ldi	r24, 0x03	; 3
     e5a:	0e 94 d3 06 	call	0xda6	; 0xda6 <Disp_Num_Seg>
    Disp_Num_Seg(NUM1_SEG, ml, dot);
     e5e:	4d 2f       	mov	r20, r29
     e60:	6c 2f       	mov	r22, r28
     e62:	84 e0       	ldi	r24, 0x04	; 4
}
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
	st = num / 10;
	ml = num - (st * 10);
    }

    Disp_Num_Seg(NUM0_SEG, st, dot1);
    Disp_Num_Seg(NUM1_SEG, ml, dot);
     e68:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <Disp_Num_Seg>

00000e6c <USART_Init>:
#define USART_BAUDRATE 38400
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1) 

void USART_Init(void)
{
    UBRR0L = (uint8_t) (BAUD_PRESCALE & 0xff);
     e6c:	8c e0       	ldi	r24, 0x0C	; 12
     e6e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    UBRR0H = (uint8_t) (BAUD_PRESCALE >> 8);
     e72:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    //UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
    UCSR0B = (1 << TXEN0);
     e76:	88 e0       	ldi	r24, 0x08	; 8
     e78:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    set_dir_out(OUT_UART_TX);
     e7c:	51 9a       	sbi	0x0a, 1	; 10
     e7e:	08 95       	ret

00000e80 <USART_PutChar>:
     e80:	22 e0       	ldi	r18, 0x02	; 2
     e82:	30 e0       	ldi	r19, 0x00	; 0

//______________________________________________________________________________
//помещает символ в буфер, инициирует начало передачи
void USART_PutChar(char sym)
{
    while (!( UCSR0A & (1 << UDRE0)))
     e84:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     e88:	95 fd       	sbrc	r25, 5
     e8a:	04 c0       	rjmp	.+8      	; 0xe94 <USART_PutChar+0x14>
     e8c:	f9 01       	movw	r30, r18
     e8e:	31 97       	sbiw	r30, 0x01	; 1
     e90:	f1 f7       	brne	.-4      	; 0xe8e <USART_PutChar+0xe>
     e92:	f8 cf       	rjmp	.-16     	; 0xe84 <USART_PutChar+0x4>
	delay(1);
    UDR0 = sym;
     e94:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     e98:	08 95       	ret

00000e9a <USART_SendStr>:
}

//функция посылающая строку по usart`у
void USART_SendStr(char * data)
{
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	ec 01       	movw	r28, r24
    uint8_t sym;
    while (*data) {
     ea0:	89 91       	ld	r24, Y+
     ea2:	88 23       	and	r24, r24
     ea4:	19 f0       	breq	.+6      	; 0xeac <USART_SendStr+0x12>
	sym = *data++;
	USART_PutChar(sym);
     ea6:	0e 94 40 07 	call	0xe80	; 0xe80 <USART_PutChar>
     eaa:	fa cf       	rjmp	.-12     	; 0xea0 <USART_SendStr+0x6>
    }
}
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	08 95       	ret

00000eb2 <delay_ms0>:
     eb2:	20 ed       	ldi	r18, 0xD0	; 208
     eb4:	37 e0       	ldi	r19, 0x07	; 7
#include "disp.h"
#include "io.h"

void delay_ms0(uint8_t ms)
{
    while (ms > 0) {
     eb6:	88 23       	and	r24, r24
     eb8:	29 f0       	breq	.+10     	; 0xec4 <delay_ms0+0x12>
     eba:	f9 01       	movw	r30, r18
     ebc:	31 97       	sbiw	r30, 0x01	; 1
     ebe:	f1 f7       	brne	.-4      	; 0xebc <delay_ms0+0xa>
	delay(1000);
	ms--;
     ec0:	81 50       	subi	r24, 0x01	; 1
     ec2:	f9 cf       	rjmp	.-14     	; 0xeb6 <delay_ms0+0x4>
    }
//	wdt_reset();
}
     ec4:	08 95       	ret

00000ec6 <delay_ms>:
     ec6:	20 ed       	ldi	r18, 0xD0	; 208
     ec8:	37 e0       	ldi	r19, 0x07	; 7

void delay_ms(uint16_t ms)
{
    while (ms > 0) {
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	29 f0       	breq	.+10     	; 0xed8 <delay_ms+0x12>
     ece:	f9 01       	movw	r30, r18
     ed0:	31 97       	sbiw	r30, 0x01	; 1
     ed2:	f1 f7       	brne	.-4      	; 0xed0 <delay_ms+0xa>
	delay(1000);
	ms--;
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	f9 cf       	rjmp	.-14     	; 0xeca <delay_ms+0x4>
    }
//	wdt_reset();
}
     ed8:	08 95       	ret

00000eda <delay_s>:

void delay_s(uint8_t s)
{
     eda:	cf 93       	push	r28
     edc:	c8 2f       	mov	r28, r24
    while (s > 0) {
     ede:	cc 23       	and	r28, r28
     ee0:	31 f0       	breq	.+12     	; 0xeee <delay_s+0x14>
	delay_ms(1000);
     ee2:	88 ee       	ldi	r24, 0xE8	; 232
     ee4:	93 e0       	ldi	r25, 0x03	; 3
     ee6:	0e 94 63 07 	call	0xec6	; 0xec6 <delay_ms>
	s--;
     eea:	c1 50       	subi	r28, 0x01	; 1
     eec:	f8 cf       	rjmp	.-16     	; 0xede <delay_s+0x4>
    }
//	wdt_reset();
}
     eee:	cf 91       	pop	r28
     ef0:	08 95       	ret

00000ef2 <check_range>:

int16_t check_range(int16_t min, int16_t in, int16_t max)
{
     ef2:	f8 2f       	mov	r31, r24
     ef4:	e9 2f       	mov	r30, r25
     ef6:	9b 01       	movw	r18, r22
     ef8:	46 17       	cp	r20, r22
     efa:	57 07       	cpc	r21, r23
     efc:	0c f4       	brge	.+2      	; 0xf00 <check_range+0xe>
     efe:	9a 01       	movw	r18, r20
    if (in > max)
	in = max;
    if (in < min)
	in = min;
    return in;
     f00:	8f 2f       	mov	r24, r31
     f02:	9e 2f       	mov	r25, r30
     f04:	82 17       	cp	r24, r18
     f06:	93 07       	cpc	r25, r19
     f08:	0c f4       	brge	.+2      	; 0xf0c <check_range+0x1a>
     f0a:	c9 01       	movw	r24, r18
}
     f0c:	08 95       	ret

00000f0e <check_rangef>:

float check_rangef(float min, float in, float max)
{
     f0e:	8f 92       	push	r8
     f10:	9f 92       	push	r9
     f12:	af 92       	push	r10
     f14:	bf 92       	push	r11
     f16:	cf 92       	push	r12
     f18:	df 92       	push	r13
     f1a:	ef 92       	push	r14
     f1c:	ff 92       	push	r15
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	4b 01       	movw	r8, r22
     f28:	5c 01       	movw	r10, r24
     f2a:	69 01       	movw	r12, r18
     f2c:	d4 2f       	mov	r29, r20
     f2e:	c5 2f       	mov	r28, r21
    if (in > max)
     f30:	97 01       	movw	r18, r14
     f32:	a8 01       	movw	r20, r16
     f34:	b6 01       	movw	r22, r12
     f36:	8d 2f       	mov	r24, r29
     f38:	9c 2f       	mov	r25, r28
     f3a:	0e 94 1e 0c 	call	0x183c	; 0x183c <__gesf2>
     f3e:	18 16       	cp	r1, r24
     f40:	1c f4       	brge	.+6      	; 0xf48 <check_rangef+0x3a>
	in = max;
     f42:	67 01       	movw	r12, r14
     f44:	d0 2f       	mov	r29, r16
     f46:	c1 2f       	mov	r28, r17
    if (in < min)
     f48:	94 01       	movw	r18, r8
     f4a:	a5 01       	movw	r20, r10
     f4c:	b6 01       	movw	r22, r12
     f4e:	8d 2f       	mov	r24, r29
     f50:	9c 2f       	mov	r25, r28
     f52:	0e 94 bf 0a 	call	0x157e	; 0x157e <__cmpsf2>
     f56:	87 ff       	sbrs	r24, 7
     f58:	03 c0       	rjmp	.+6      	; 0xf60 <check_rangef+0x52>
	in = min;
     f5a:	64 01       	movw	r12, r8
     f5c:	da 2d       	mov	r29, r10
     f5e:	cb 2d       	mov	r28, r11
    return in;
}
     f60:	b6 01       	movw	r22, r12
     f62:	8d 2f       	mov	r24, r29
     f64:	9c 2f       	mov	r25, r28
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	ff 90       	pop	r15
     f70:	ef 90       	pop	r14
     f72:	df 90       	pop	r13
     f74:	cf 90       	pop	r12
     f76:	bf 90       	pop	r11
     f78:	af 90       	pop	r10
     f7a:	9f 90       	pop	r9
     f7c:	8f 90       	pop	r8
     f7e:	08 95       	ret

00000f80 <delay_btn_check>:

int8_t delay_btn_check(int8_t *delay_var)
{
     f80:	fc 01       	movw	r30, r24
    if (*delay_var) {
     f82:	80 81       	ld	r24, Z
     f84:	88 23       	and	r24, r24
     f86:	29 f0       	breq	.+10     	; 0xf92 <delay_btn_check+0x12>
	if (*delay_var > BTN_LONG_DELAY) {
     f88:	83 30       	cpi	r24, 0x03	; 3
     f8a:	34 f0       	brlt	.+12     	; 0xf98 <delay_btn_check+0x18>
	    *delay_var = 0;
     f8c:	10 82       	st	Z, r1
	    return 1;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	08 95       	ret
	}
    } else {
	*delay_var = 1;
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	90 83       	st	Z, r25
     f96:	08 95       	ret
    }
    return 0;
     f98:	80 e0       	ldi	r24, 0x00	; 0
}
     f9a:	08 95       	ret

00000f9c <num_to_str>:

void num_to_str(struct m2bytes *nbuf)
{
     f9c:	fc 01       	movw	r30, r24
    uint8_t tmp, num;
//m2bytes nbuf;

    num = nbuf->one;
     f9e:	20 81       	ld	r18, Z
     fa0:	24 36       	cpi	r18, 0x64	; 100
     fa2:	08 f0       	brcs	.+2      	; 0xfa6 <num_to_str+0xa>
     fa4:	23 e6       	ldi	r18, 0x63	; 99
    if (num > 99)
	num = 99;
    tmp = num / 10;
     fa6:	82 2f       	mov	r24, r18
     fa8:	6a e0       	ldi	r22, 0x0A	; 10
     faa:	0e 94 90 0c 	call	0x1920	; 0x1920 <__udivmodqi4>
    nbuf->one = tmp + '0';
     fae:	90 e3       	ldi	r25, 0x30	; 48
     fb0:	98 0f       	add	r25, r24
     fb2:	90 83       	st	Z, r25
    num -= tmp * 10;
    nbuf->two = num + '0';
     fb4:	20 5d       	subi	r18, 0xD0	; 208
     fb6:	9a e0       	ldi	r25, 0x0A	; 10
     fb8:	89 9f       	mul	r24, r25
     fba:	20 19       	sub	r18, r0
     fbc:	11 24       	eor	r1, r1
     fbe:	21 83       	std	Z+1, r18	; 0x01
     fc0:	08 95       	ret

00000fc2 <SPI_SendByte>:
 }
 */

void SPI_SendByte(int8_t byte)
{
    SPDR = byte;
     fc2:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)))
     fc4:	0d b4       	in	r0, 0x2d	; 45
     fc6:	07 fe       	sbrs	r0, 7
     fc8:	fd cf       	rjmp	.-6      	; 0xfc4 <SPI_SendByte+0x2>
	;
}
     fca:	08 95       	ret

00000fcc <SPI_init>:

void SPI_init(void)
{
//    PORTB &= ~((1 << PORTB3) | (1 << PORTB5)); //низкий уровень
//    PORTB |= (1 << PORTB2);
    pin_high(SPI_SS);
     fcc:	2a 9a       	sbi	0x05, 2	; 5
    pin_low(SPI_MOSI);
     fce:	2b 98       	cbi	0x05, 3	; 5
    pin_low(SPI_SCK);
     fd0:	2d 98       	cbi	0x05, 5	; 5

    //    DDRB = DDRB & ~((1 << PORTB2) | (1 << PORTB3) | (1 << PORTB4) | (1 << PORTB5));
    //    DDRB |= ((1 << PORTB2) | (1 << PORTB3) | (1 << PORTB5)); //ножки SPI на выход
    set_dir_in(SPI_MISO);
     fd2:	24 98       	cbi	0x04, 4	; 4
    set_dir_out(SPI_MOSI);
     fd4:	23 9a       	sbi	0x04, 3	; 4
    set_dir_out(SPI_SS);
     fd6:	22 9a       	sbi	0x04, 2	; 4
    set_dir_out(SPI_SCK);
     fd8:	25 9a       	sbi	0x04, 5	; 4

    //SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0); //включим шину, объ¤вим ведущим, делитель 16
    /*разрешение spi,старший бит вперед,мастер, режим 0*/
    SPCR = (1 << SPE) | (0 << DORD) | (1 << MSTR) | (0 << CPOL) | (0 << CPHA) | (0 << SPR1) | (0 << SPR0);
     fda:	80 e5       	ldi	r24, 0x50	; 80
     fdc:	8c bd       	out	0x2c, r24	; 44
    SPSR = 0;    //(0 << SPI2X);
     fde:	1d bc       	out	0x2d, r1	; 45
     fe0:	08 95       	ret

00000fe2 <SPI_deInit>:
}

void SPI_deInit()
{
    SPCR = 0;
     fe2:	1c bc       	out	0x2c, r1	; 44
    set_dir_in(SPI_MISO);
     fe4:	24 98       	cbi	0x04, 4	; 4
    set_dir_in(SPI_MOSI);
     fe6:	23 98       	cbi	0x04, 3	; 4
    set_dir_in(SPI_SS);
     fe8:	22 98       	cbi	0x04, 2	; 4
    set_dir_in(SPI_SCK);
     fea:	25 98       	cbi	0x04, 5	; 4
     fec:	08 95       	ret

00000fee <ADC_Init>:
}

void ADC_Init()
{
    ADCSRA = (1 << ADEN) // Включаем АЦП
     fee:	83 e8       	ldi	r24, 0x83	; 131
     ff0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    | (1 << ADPS1) | (1 << ADPS0);    // устанавливаем предделитель преобразователя на 8
    ADMUX = (1 << REFS1) | (1 << REFS0); //Подключен внутренний ион 1.1В, с внешним конденсатором на AREF пине
     ff4:	80 ec       	ldi	r24, 0xC0	; 192
     ff6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     ffa:	08 95       	ret

00000ffc <ADC_Mux>:
}

void ADC_Mux(adc_in_type input)
{
    ADMUX &= ~(0b1111);
     ffc:	ec e7       	ldi	r30, 0x7C	; 124
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	90 81       	ld	r25, Z
    1002:	90 7f       	andi	r25, 0xF0	; 240
    1004:	90 83       	st	Z, r25
    ADMUX |= (input & 0b1111);
    1006:	90 81       	ld	r25, Z
    1008:	8f 70       	andi	r24, 0x0F	; 15
    100a:	98 2b       	or	r25, r24
    100c:	90 83       	st	Z, r25
    delay_ms(1); // TODO
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0c 94 63 07 	jmp	0xec6	; 0xec6 <delay_ms>

00001016 <ADC_Start>:
}

void ADC_Start()
{
    ADCSRA |= (1 << ADSC);    // Начинаем преобразование
    1016:	ea e7       	ldi	r30, 0x7A	; 122
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	80 64       	ori	r24, 0x40	; 64
    101e:	80 83       	st	Z, r24
    1020:	08 95       	ret

00001022 <ADC_GetData>:
}

uint16_t ADC_GetData()
{
    return (ADCL | ADCH << 8); // Считываем  полученное значение
    1022:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1026:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    102a:	90 e0       	ldi	r25, 0x00	; 0
}
    102c:	92 2b       	or	r25, r18
    102e:	08 95       	ret

00001030 <eeprom_write_byte1>:

void eeprom_write_byte1(uint16_t addr, uint8_t data)
{
    /*wait until previous write any*/
    while (EECR & (1 << EEPE))
    1030:	f9 99       	sbic	0x1f, 1	; 31
    1032:	fe cf       	rjmp	.-4      	; 0x1030 <eeprom_write_byte1>
	;
    EEAR = addr;
    1034:	92 bd       	out	0x22, r25	; 34
    1036:	81 bd       	out	0x21, r24	; 33
    EEDR = data;
    1038:	60 bd       	out	0x20, r22	; 32
    EECR |= (1 << EEMPE);
    103a:	fa 9a       	sbi	0x1f, 2	; 31
    EECR |= (1 << EEPE);
    103c:	f9 9a       	sbi	0x1f, 1	; 31
    103e:	08 95       	ret

00001040 <eeprom_read_byte1>:
}

uint8_t eeprom_read_byte1(uint16_t addr)
{
    /*wait until previous write any*/
    while (EECR & (1 << EEPE))
    1040:	f9 99       	sbic	0x1f, 1	; 31
    1042:	fe cf       	rjmp	.-4      	; 0x1040 <eeprom_read_byte1>
	;
    EEAR = addr;
    1044:	92 bd       	out	0x22, r25	; 34
    1046:	81 bd       	out	0x21, r24	; 33
    EECR |= (1 << EERE);
    1048:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    104a:	80 b5       	in	r24, 0x20	; 32
}
    104c:	08 95       	ret

0000104e <eeprom_read_buf>:

void eeprom_read_buf(uint8_t *data, uint16_t addr, uint16_t len)
{
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	8c 01       	movw	r16, r24
    105c:	04 0f       	add	r16, r20
    105e:	15 1f       	adc	r17, r21
    for (uint16_t i = 0; i < len; i++) {
    1060:	ec 01       	movw	r28, r24
	data[i] = eeprom_read_byte1(addr + i);
    1062:	7b 01       	movw	r14, r22
    1064:	e8 1a       	sub	r14, r24
    1066:	f9 0a       	sbc	r15, r25
    return EEDR;
}

void eeprom_read_buf(uint8_t *data, uint16_t addr, uint16_t len)
{
    for (uint16_t i = 0; i < len; i++) {
    1068:	c0 17       	cp	r28, r16
    106a:	d1 07       	cpc	r29, r17
    106c:	39 f0       	breq	.+14     	; 0x107c <eeprom_read_buf+0x2e>
	data[i] = eeprom_read_byte1(addr + i);
    106e:	c7 01       	movw	r24, r14
    1070:	8c 0f       	add	r24, r28
    1072:	9d 1f       	adc	r25, r29
    1074:	0e 94 20 08 	call	0x1040	; 0x1040 <eeprom_read_byte1>
    1078:	89 93       	st	Y+, r24
    107a:	f6 cf       	rjmp	.-20     	; 0x1068 <eeprom_read_buf+0x1a>
    }
    while (EECR & (1 << EEPE))
    107c:	f9 99       	sbic	0x1f, 1	; 31
    107e:	fe cf       	rjmp	.-4      	; 0x107c <eeprom_read_buf+0x2e>
	;
}
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	1f 91       	pop	r17
    1086:	0f 91       	pop	r16
    1088:	ff 90       	pop	r15
    108a:	ef 90       	pop	r14
    108c:	08 95       	ret

0000108e <eeprom_update_buf>:

void eeprom_update_buf(uint16_t addr, uint8_t *data, uint16_t len)
{
    108e:	cf 92       	push	r12
    1090:	df 92       	push	r13
    1092:	ef 92       	push	r14
    1094:	ff 92       	push	r15
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	8b 01       	movw	r16, r22
    10a0:	04 0f       	add	r16, r20
    10a2:	15 1f       	adc	r17, r21
    for (uint16_t i = 0; i < len; i++) {
    10a4:	eb 01       	movw	r28, r22
    10a6:	6c 01       	movw	r12, r24
    10a8:	c6 1a       	sub	r12, r22
    10aa:	d7 0a       	sbc	r13, r23
    10ac:	c0 17       	cp	r28, r16
    10ae:	d1 07       	cpc	r29, r17
    10b0:	69 f0       	breq	.+26     	; 0x10cc <eeprom_update_buf+0x3e>
    10b2:	76 01       	movw	r14, r12
    10b4:	ec 0e       	add	r14, r28
    10b6:	fd 1e       	adc	r15, r29
	uint8_t b = eeprom_read_byte1(addr + i);
    10b8:	c7 01       	movw	r24, r14
    10ba:	0e 94 20 08 	call	0x1040	; 0x1040 <eeprom_read_byte1>
	if (b != data[i]) {
    10be:	69 91       	ld	r22, Y+
    10c0:	86 17       	cp	r24, r22
    10c2:	a1 f3       	breq	.-24     	; 0x10ac <eeprom_update_buf+0x1e>
	    eeprom_write_byte1(addr + i, data[i]);
    10c4:	c7 01       	movw	r24, r14
    10c6:	0e 94 18 08 	call	0x1030	; 0x1030 <eeprom_write_byte1>
    10ca:	f0 cf       	rjmp	.-32     	; 0x10ac <eeprom_update_buf+0x1e>
	}
    }
    while (EECR & (1 << EEPE))
    10cc:	f9 99       	sbic	0x1f, 1	; 31
    10ce:	fe cf       	rjmp	.-4      	; 0x10cc <eeprom_update_buf+0x3e>
	;
}
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	08 95       	ret

000010e2 <main>:
}

int main(void)
{
    wdt_reset();
    10e2:	a8 95       	wdr
    cli();
    10e4:	f8 94       	cli
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    10e6:	c8 e1       	ldi	r28, 0x18	; 24
    10e8:	18 e2       	ldi	r17, 0x28	; 40
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	a8 95       	wdr
    10f0:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    wdt_enable(WDTO_4S);
    wdt_reset();
    10fa:	a8 95       	wdr
    int8_t tmp;
    uint8_t time_cnt;
    int8_t smode = 0;
    int8_t bdelay = 0;

    vent_add_prc = 0;
    10fc:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <vent_add_prc>
    temp_out_prc = 0;
    1100:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <temp_out_prc>
    temp_out_delay = TEMP_OUT_DELAY;
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <temp_out_delay>

//    powerUp_time_sec = 0;
    Ipid = 0.0;
    110a:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <Ipid>
    110e:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <Ipid+0x1>
    1112:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <Ipid+0x2>
    1116:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <Ipid+0x3>
    last_delta = 0.0;
    111a:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <last_delta>
    111e:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <last_delta+0x1>
    1122:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <last_delta+0x2>
    1126:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <last_delta+0x3>
    flags = 0;
    112a:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <flags>
    SET_FLAG(f_mode_hot);
    112e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <flags>
    1132:	82 60       	ori	r24, 0x02	; 2
    1134:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <flags>
    CLR_FLAG(f_cond_btn_press);
    1138:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <flags>
    113c:	8f 7e       	andi	r24, 0xEF	; 239
    113e:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <flags>

    setup_pins();
    1142:	0e 94 6f 06 	call	0xcde	; 0xcde <setup_pins>
/*    while (!get_input(IN_ACC)) { //ACC off
	wdt_reset();
	delay_ms(100); // wait for ACC
    }
*/
    delay_ms(10);
    1146:	8a e0       	ldi	r24, 0x0A	; 10
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 63 07 	call	0xec6	; 0xec6 <delay_ms>
    myread_eeprom();
    114e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <myread_eeprom>
    //TODO sei();

    ADC_Init();
    1152:	0e 94 f7 07 	call	0xfee	; 0xfee <ADC_Init>
    USART_Init();
    1156:	0e 94 36 07 	call	0xe6c	; 0xe6c <USART_Init>
    //int_to_uart("T", 0);

    SPI_init();
    115a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <SPI_init>
    delay_ms(1);
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 63 07 	call	0xec6	; 0xec6 <delay_ms>

    //int_to_uart("T", 1);
    Send_7219(0, 0);
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	0e 94 96 06 	call	0xd2c	; 0xd2c <Send_7219>
    delay_ms(1);
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	0e 94 63 07 	call	0xec6	; 0xec6 <delay_ms>
    Clear_7219();
    1176:	0e 94 ac 06 	call	0xd58	; 0xd58 <Clear_7219>
    Send_7219(0x09, 0x00); //режим декодирования
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	89 e0       	ldi	r24, 0x09	; 9
    117e:	0e 94 96 06 	call	0xd2c	; 0xd2c <Send_7219>
    Send_7219(0x0A, 0x01); //яркость
    1182:	61 e0       	ldi	r22, 0x01	; 1
    1184:	8a e0       	ldi	r24, 0x0A	; 10
    1186:	0e 94 96 06 	call	0xd2c	; 0xd2c <Send_7219>
    Send_7219(0x0B, DISP_LEN - 1); //сколько разрядов используем
    118a:	63 e0       	ldi	r22, 0x03	; 3
    118c:	8b e0       	ldi	r24, 0x0B	; 11
    118e:	0e 94 96 06 	call	0xd2c	; 0xd2c <Send_7219>
    Send_7219(0x0D, 0x00);
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	8d e0       	ldi	r24, 0x0D	; 13
    1196:	0e 94 96 06 	call	0xd2c	; 0xd2c <Send_7219>
    Send_7219(0x0E, 0x00);
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	8e e0       	ldi	r24, 0x0E	; 14
    119e:	0e 94 96 06 	call	0xd2c	; 0xd2c <Send_7219>
    Send_7219(0x0F, 0x00);
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	8f e0       	ldi	r24, 0x0F	; 15
    11a6:	0e 94 96 06 	call	0xd2c	; 0xd2c <Send_7219>
    delay_ms(1);
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	0e 94 63 07 	call	0xec6	; 0xec6 <delay_ms>

    //int_to_uart("T", 2);
    wdt_reset();
    11b2:	a8 95       	wdr

    disp_num = vars.setup_temp;
    11b4:	d0 91 5f 01 	lds	r29, 0x015F	; 0x80015f <vars+0x1>
    Disp_Num(disp_num, 0);
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	8d 2f       	mov	r24, r29
    11bc:	0e 94 13 07 	call	0xe26	; 0xe26 <Disp_Num>
    Send_7219(0x0C, 1); //включим индикатор
    11c0:	61 e0       	ldi	r22, 0x01	; 1
    11c2:	8c e0       	ldi	r24, 0x0C	; 12
    11c4:	0e 94 96 06 	call	0xd2c	; 0xd2c <Send_7219>
    disp_bar = vars.vent_nom_seg;
    11c8:	d0 90 60 01 	lds	r13, 0x0160	; 0x800160 <vars+0x2>
    Disp_Bars(disp_bar);
    11cc:	8d 2d       	mov	r24, r13
    11ce:	0e 94 b6 06 	call	0xd6c	; 0xd6c <Disp_Bars>

    cli();
    11d2:	f8 94       	cli
    //int_to_uart("T", 3);
//timer init
    TCCR1A = 0;  	//Т/С1 отсоединен от вывода ОС1, режим ШИМ отключен
    11d4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = 4;  	//Коэффициент деления частоты системной	синхронизации = 256
    11d8:	84 e0       	ldi	r24, 0x04	; 4
    11da:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCNT1 = 0x10000 - (F_CPU / 512); //Инициализируем счетный регистр
    11de:	87 ef       	ldi	r24, 0xF7	; 247
    11e0:	92 ec       	ldi	r25, 0xC2	; 194
    11e2:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    11e6:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

    TIFR1 = 0;       //Сбрасываем все флаги прерываний от Т/С1
    11ea:	16 ba       	out	0x16, r1	; 22
    TIMSK1 = 1 << TOIE1;  	//Разрешаем прерывание при переполнении Т/С1
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

    //interrupt setup
    EICRA = 0; // External Interrupt Control Register A
    11f2:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    EIMSK = 0; //External Interrupt Mask Register
    11f6:	1d ba       	out	0x1d, r1	; 29
    //set by IN_BTN_V_DWN  + IN_BTN_V_UP
    PCMSK0 = (1 << PCINT0);  // set PCINT0 to trigger an interrupt on state change
    PCMSK2 = (1 << PCINT23);  // set PCINT23 to trigger an interrupt on state change
    PCICR = (1 << PCIE0) | (1 << PCIE2);    // Pin Change Interrupt Control Register
*/
    PCMSK0 = 0;
    11f8:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    PCMSK2 = 0;
    11fc:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
    PCICR = 0;
    1200:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>

//todo	GIMSK = 0;     	//Запрет внешних прерываний
    //int_to_uart("T", 5);
    delay_ms(10);
    1204:	8a e0       	ldi	r24, 0x0A	; 10
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 63 07 	call	0xec6	; 0xec6 <delay_ms>
    sei();
    120c:	78 94       	sei

    vent_enc = 0;
    120e:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <vent_enc>
    temp_enc = 0;
    1212:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <temp_enc>
    time_cnt = 0;

    wdt_reset();
    1216:	a8 95       	wdr
    vent_seg_cur = VENT_SEG;
    1218:	88 e0       	ldi	r24, 0x08	; 8
    121a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <vent_seg_cur>
    temp_seg_cur = TEMP_SEG;
    121e:	8f e0       	ldi	r24, 0x0F	; 15
    1220:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <temp_seg_cur>
    set_vent_seg(0, 1);
    1224:	61 e0       	ldi	r22, 0x01	; 1
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	0e 94 f7 02 	call	0x5ee	; 0x5ee <set_vent_seg>
    set_temp(0, 1);
    122c:	61 e0       	ldi	r22, 0x01	; 1
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	0e 94 77 02 	call	0x4ee	; 0x4ee <set_temp>
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	a8 95       	wdr
    123a:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	if (Ts < tmp) {
	    smode = smode_hi_mode;
	}
    }
*/
    Ts = 16.0;
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	a0 e8       	ldi	r26, 0x80	; 128
    124a:	b1 e4       	ldi	r27, 0x41	; 65
    124c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__data_end>
    1250:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__data_end+0x1>
    1254:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <__data_end+0x2>
    1258:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <__data_end+0x3>

    Ipid =  (float) vars.setup_temp;
    125c:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <vars+0x1>
    1260:	06 2e       	mov	r0, r22
    1262:	00 0c       	add	r0, r0
    1264:	77 0b       	sbc	r23, r23
    1266:	88 0b       	sbc	r24, r24
    1268:	99 0b       	sbc	r25, r25
    126a:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__floatsisf>
    126e:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <Ipid>
    1272:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <Ipid+0x1>
    1276:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Ipid+0x2>
    127a:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <Ipid+0x3>
    Ipid = check_rangef(-(100/PID_I_KFC), Ipid - Ts, 100/PID_I_KFC);
    127e:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <Ipid>
    1282:	70 91 59 01 	lds	r23, 0x0159	; 0x800159 <Ipid+0x1>
    1286:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Ipid+0x2>
    128a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Ipid+0x3>
    128e:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <__data_end>
    1292:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <__data_end+0x1>
    1296:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <__data_end+0x2>
    129a:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <__data_end+0x3>
    129e:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__subsf3>
    12a2:	9b 01       	movw	r18, r22
    12a4:	ac 01       	movw	r20, r24
    12a6:	e1 2c       	mov	r14, r1
    12a8:	f1 2c       	mov	r15, r1
    12aa:	00 ec       	ldi	r16, 0xC0	; 192
    12ac:	10 e4       	ldi	r17, 0x40	; 64
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	80 ec       	ldi	r24, 0xC0	; 192
    12b4:	90 ec       	ldi	r25, 0xC0	; 192
    12b6:	0e 94 87 07 	call	0xf0e	; 0xf0e <check_rangef>
    12ba:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <Ipid>
    12be:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <Ipid+0x1>
    12c2:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Ipid+0x2>
    12c6:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <Ipid+0x3>

    wdt_reset();
    12ca:	a8 95       	wdr
    delay_ms(10);
    sei();

    vent_enc = 0;
    temp_enc = 0;
    time_cnt = 0;
    12cc:	c0 e0       	ldi	r28, 0x00	; 0
}

uint8_t seg2Prc(uint8_t segs, uint8_t seg)
{
    //seg = check_range(0, seg, segs);
    uint16_t tmp = (seg * 100) / segs;
    12ce:	0f e0       	ldi	r16, 0x0F	; 15
    12d0:	10 e0       	ldi	r17, 0x00	; 0
			time_cnt++;
			break;
		    case 1 ... 6:
			break;
		    case 7:
			Ti = calcTemp(IN_ADC_T_FROST);
    12d2:	81 2c       	mov	r8, r1
    12d4:	91 2c       	mov	r9, r1
    12d6:	90 e5       	ldi	r25, 0x50	; 80
    12d8:	a9 2e       	mov	r10, r25
    12da:	91 ec       	ldi	r25, 0xC1	; 193
    12dc:	b9 2e       	mov	r11, r25
		}
		Disp_Bars(smode);

	    } else { // work mode

		if (vars.wmode == wmode_auto) {
    12de:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <vars>
    12e2:	81 11       	cpse	r24, r1
    12e4:	9a c0       	rjmp	.+308    	; 0x141a <main+0x338>
		    switch (time_cnt) {
    12e6:	8c 2f       	mov	r24, r28
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	80 31       	cpi	r24, 0x10	; 16
    12ec:	91 05       	cpc	r25, r1
    12ee:	08 f0       	brcs	.+2      	; 0x12f2 <main+0x210>
    12f0:	55 c0       	rjmp	.+170    	; 0x139c <main+0x2ba>
    12f2:	fc 01       	movw	r30, r24
    12f4:	ec 5c       	subi	r30, 0xCC	; 204
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	0c 94 be 0c 	jmp	0x197c	; 0x197c <__tablejump2__>
		    case 0:
			setup_display();
    12fc:	0e 94 7e 06 	call	0xcfc	; 0xcfc <setup_display>
			time_cnt++;
    1300:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1302:	52 c0       	rjmp	.+164    	; 0x13a8 <main+0x2c6>
		    case 1 ... 6:
			break;
		    case 7:
			Ti = calcTemp(IN_ADC_T_FROST);
    1304:	80 92 4c 01 	sts	0x014C, r8	; 0x80014c <Ti>
    1308:	90 92 4d 01 	sts	0x014D, r9	; 0x80014d <Ti+0x1>
    130c:	a0 92 4e 01 	sts	0x014E, r10	; 0x80014e <Ti+0x2>
    1310:	b0 92 4f 01 	sts	0x014F, r11	; 0x80014f <Ti+0x3>
			time_cnt = 8;
    1314:	c8 e0       	ldi	r28, 0x08	; 8
			break;
    1316:	48 c0       	rjmp	.+144    	; 0x13a8 <main+0x2c6>

    return resf;
*/

    if(input == IN_ADC_T_SALON){
	return Ts+0.1;
    1318:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <__data_end>
    131c:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <__data_end+0x1>
    1320:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end+0x2>
    1324:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <__data_end+0x3>
    1328:	2d ec       	ldi	r18, 0xCD	; 205
    132a:	3c ec       	ldi	r19, 0xCC	; 204
    132c:	4c ec       	ldi	r20, 0xCC	; 204
    132e:	5d e3       	ldi	r21, 0x3D	; 61
    1330:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__addsf3>
			time_cnt = 8;
			break;
		    case 8:
			break;
		    case 9:
			Ts = calcTemp(IN_ADC_T_SALON);
    1334:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__data_end>
    1338:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__data_end+0x1>
    133c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end+0x2>
    1340:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__data_end+0x3>
			float t = Ts + 0.4;
    1344:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <__data_end>
    1348:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <__data_end+0x1>
    134c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end+0x2>
    1350:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <__data_end+0x3>
			disp_num = t;
    1354:	2d ec       	ldi	r18, 0xCD	; 205
    1356:	3c ec       	ldi	r19, 0xCC	; 204
    1358:	4c ec       	ldi	r20, 0xCC	; 204
    135a:	5e e3       	ldi	r21, 0x3E	; 62
    135c:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__addsf3>
    1360:	0e 94 36 0b 	call	0x166c	; 0x166c <__fixsfsi>
    1364:	d6 2f       	mov	r29, r22
			time_cnt++;
    1366:	ca e0       	ldi	r28, 0x0A	; 10
			break;
    1368:	1f c0       	rjmp	.+62     	; 0x13a8 <main+0x2c6>
		    case 10:
			break;
		    case 11: //calc
			calcVal();
    136a:	0e 94 ed 04 	call	0x9da	; 0x9da <calcVal>
			time_cnt++;
    136e:	cc e0       	ldi	r28, 0x0C	; 12
			break;
    1370:	1b c0       	rjmp	.+54     	; 0x13a8 <main+0x2c6>
		    case 12:
			break;
		    case 13:
			set_temp(temp_out_prc, 1);
    1372:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <temp_out_prc>
    1376:	61 e0       	ldi	r22, 0x01	; 1
    1378:	0e 94 77 02 	call	0x4ee	; 0x4ee <set_temp>
			time_cnt++;
    137c:	ce e0       	ldi	r28, 0x0E	; 14
			break;
    137e:	14 c0       	rjmp	.+40     	; 0x13a8 <main+0x2c6>
		    case 14:
			break;
		    case 15:
			set_vent_prc(vent_add_prc, 1);
    1380:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <vent_add_prc>
    1384:	61 e0       	ldi	r22, 0x01	; 1
    1386:	0e 94 62 03 	call	0x6c4	; 0x6c4 <set_vent_prc>
			disp_bar = vent_seg_cur;
    138a:	d0 90 6a 01 	lds	r13, 0x016A	; 0x80016a <vent_seg_cur>
			SET_FLAG(f_num_dot)
    138e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <flags>
    1392:	88 60       	ori	r24, 0x08	; 8
    1394:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <flags>
			time_cnt++;
    1398:	c0 e1       	ldi	r28, 0x10	; 16
			break;
    139a:	06 c0       	rjmp	.+12     	; 0x13a8 <main+0x2c6>
		    default: //  цикл
			time_cnt = 0;
			CLR_FLAG(f_num_dot)
    139c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <flags>
    13a0:	87 7f       	andi	r24, 0xF7	; 247
    13a2:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <flags>
			disp_bar = vent_seg_cur;
			SET_FLAG(f_num_dot)
			time_cnt++;
			break;
		    default: //  цикл
			time_cnt = 0;
    13a6:	c0 e0       	ldi	r28, 0x00	; 0
			CLR_FLAG(f_num_dot)
		    }

		    if (vent_enc) {
    13a8:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <vent_enc>
    13ac:	88 23       	and	r24, r24
    13ae:	c1 f0       	breq	.+48     	; 0x13e0 <main+0x2fe>
			vars.vent_nom_seg = check_range(0, vars.vent_nom_seg + vent_enc, VENT_SEG + 2);
    13b0:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <vars+0x2>
    13b4:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <vent_enc>
    13b8:	06 2e       	mov	r0, r22
    13ba:	00 0c       	add	r0, r0
    13bc:	77 0b       	sbc	r23, r23
    13be:	68 0f       	add	r22, r24
    13c0:	71 1d       	adc	r23, r1
    13c2:	87 fd       	sbrc	r24, 7
    13c4:	7a 95       	dec	r23
    13c6:	4a e0       	ldi	r20, 0x0A	; 10
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 79 07 	call	0xef2	; 0xef2 <check_range>
    13d2:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <vars+0x2>
			disp_bar = vars.vent_nom_seg;
    13d6:	d0 90 60 01 	lds	r13, 0x0160	; 0x800160 <vars+0x2>
			time_cnt = 10;
			vent_enc = 0;
    13da:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <vent_enc>
		    }

		    if (vent_enc) {
			vars.vent_nom_seg = check_range(0, vars.vent_nom_seg + vent_enc, VENT_SEG + 2);
			disp_bar = vars.vent_nom_seg;
			time_cnt = 10;
    13de:	ca e0       	ldi	r28, 0x0A	; 10
			vent_enc = 0;
		    }

		    if (temp_enc) {
    13e0:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <temp_enc>
    13e4:	88 23       	and	r24, r24
    13e6:	b9 f1       	breq	.+110    	; 0x1456 <main+0x374>
			vars.setup_temp = check_range(15, vars.setup_temp + temp_enc, 30);
    13e8:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <vars+0x1>
    13ec:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <temp_enc>
    13f0:	06 2e       	mov	r0, r22
    13f2:	00 0c       	add	r0, r0
    13f4:	77 0b       	sbc	r23, r23
    13f6:	68 0f       	add	r22, r24
    13f8:	71 1d       	adc	r23, r1
    13fa:	87 fd       	sbrc	r24, 7
    13fc:	7a 95       	dec	r23
    13fe:	4e e1       	ldi	r20, 0x1E	; 30
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	8f e0       	ldi	r24, 0x0F	; 15
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 79 07 	call	0xef2	; 0xef2 <check_range>
    140a:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <vars+0x1>
			disp_num = vars.setup_temp;
    140e:	d0 91 5f 01 	lds	r29, 0x015F	; 0x80015f <vars+0x1>
			time_cnt = 0;
			temp_enc = 0;
    1412:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <temp_enc>
		    }

		    if (temp_enc) {
			vars.setup_temp = check_range(15, vars.setup_temp + temp_enc, 30);
			disp_num = vars.setup_temp;
			time_cnt = 0;
    1416:	c0 e0       	ldi	r28, 0x00	; 0
    1418:	1e c0       	rjmp	.+60     	; 0x1456 <main+0x374>
			temp_enc = 0;
		    }

		} else { // manual

		    if (time_cnt > 10) {
    141a:	cb 30       	cpi	r28, 0x0B	; 11
    141c:	18 f0       	brcs	.+6      	; 0x1424 <main+0x342>
			setup_display();
    141e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <setup_display>
			time_cnt = 0;
    1422:	c0 e0       	ldi	r28, 0x00	; 0
		    if (temp_enc) {
			vars.temp_seg = check_range(0, vars.temp_seg + temp_enc, TEMP_SEG);
			temp_enc = 0;
		    }
*/
		    disp_bar = vars.vent_nom_seg;
    1424:	d0 90 60 01 	lds	r13, 0x0160	; 0x800160 <vars+0x2>
		    disp_num = seg2Prc(TEMP_SEG, vars.temp_seg);
    1428:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <vars+0x3>
}

uint8_t seg2Prc(uint8_t segs, uint8_t seg)
{
    //seg = check_range(0, seg, segs);
    uint16_t tmp = (seg * 100) / segs;
    142c:	24 e6       	ldi	r18, 0x64	; 100
    142e:	82 9f       	mul	r24, r18
    1430:	c0 01       	movw	r24, r0
    1432:	11 24       	eor	r1, r1
    1434:	b8 01       	movw	r22, r16
    1436:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__divmodhi4>
    143a:	f6 2e       	mov	r15, r22
			vars.temp_seg = check_range(0, vars.temp_seg + temp_enc, TEMP_SEG);
			temp_enc = 0;
		    }
*/
		    disp_bar = vars.vent_nom_seg;
		    disp_num = seg2Prc(TEMP_SEG, vars.temp_seg);
    143c:	d6 2f       	mov	r29, r22
		    set_vent_seg(vars.vent_nom_seg, 0);
    143e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <vars+0x2>
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	0e 94 f7 02 	call	0x5ee	; 0x5ee <set_vent_seg>
		    set_temp(disp_num, 0);
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	8f 2d       	mov	r24, r15
    144c:	0e 94 77 02 	call	0x4ee	; 0x4ee <set_temp>
		    switch_cond(1);
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	0e 94 db 02 	call	0x5b6	; 0x5b6 <switch_cond>
		    }
		    bdelay = 0;
		}
*/
//дисплей
		Disp_Num(disp_num, TST_FLAG(f_num_dot));
    1456:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <flags>
    145a:	68 70       	andi	r22, 0x08	; 8
    145c:	8d 2f       	mov	r24, r29
    145e:	0e 94 13 07 	call	0xe26	; 0xe26 <Disp_Num>
		Disp_Bars(disp_bar);
    1462:	8d 2d       	mov	r24, r13
    1464:	0e 94 b6 06 	call	0xd6c	; 0xd6c <Disp_Bars>
	    }

	    if (TST_FLAG(f_e1sec)) {
    1468:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <flags>
    146c:	80 ff       	sbrs	r24, 0
    146e:	0a c0       	rjmp	.+20     	; 0x1484 <main+0x3a2>
		time_cnt++;
    1470:	cf 5f       	subi	r28, 0xFF	; 255
		if (bdelay) {
		    bdelay++;
		}
		CLR_FLAG(f_e1sec);
    1472:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <flags>
    1476:	8e 7f       	andi	r24, 0xFE	; 254
    1478:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <flags>

		if (TST_FLAG(f_cond_ind_flash)) {
    147c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <flags>
    1480:	85 fd       	sbrc	r24, 5
		    pin_low(OUT_FROST_IND);
    1482:	41 98       	cbi	0x08, 1	; 8
	    while (1) {
		delay_s(1);
	    }
	}

	delay_ms(100);
    1484:	84 e6       	ldi	r24, 0x64	; 100
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 63 07 	call	0xec6	; 0xec6 <delay_ms>

	if (vars.cond_enabled) {
    148c:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <vars+0x9>
    1490:	88 23       	and	r24, r24
    1492:	11 f0       	breq	.+4      	; 0x1498 <main+0x3b6>
	    pin_high(OUT_FROST_IND);
    1494:	41 9a       	sbi	0x08, 1	; 8
    1496:	04 c0       	rjmp	.+8      	; 0x14a0 <main+0x3be>
	} else {
	    pin_low(OUT_FROST_IND);
    1498:	41 98       	cbi	0x08, 1	; 8
	    switch_cond(0);
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <switch_cond>
	}

	wdt_reset();
    14a0:	a8 95       	wdr
    14a2:	1d cf       	rjmp	.-454    	; 0x12de <main+0x1fc>

000014a4 <__subsf3>:
    14a4:	50 58       	subi	r21, 0x80	; 128

000014a6 <__addsf3>:
    14a6:	bb 27       	eor	r27, r27
    14a8:	aa 27       	eor	r26, r26
    14aa:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__addsf3x>
    14ae:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__fp_round>
    14b2:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__fp_pscA>
    14b6:	38 f0       	brcs	.+14     	; 0x14c6 <__addsf3+0x20>
    14b8:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__fp_pscB>
    14bc:	20 f0       	brcs	.+8      	; 0x14c6 <__addsf3+0x20>
    14be:	39 f4       	brne	.+14     	; 0x14ce <__addsf3+0x28>
    14c0:	9f 3f       	cpi	r25, 0xFF	; 255
    14c2:	19 f4       	brne	.+6      	; 0x14ca <__addsf3+0x24>
    14c4:	26 f4       	brtc	.+8      	; 0x14ce <__addsf3+0x28>
    14c6:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__fp_nan>
    14ca:	0e f4       	brtc	.+2      	; 0x14ce <__addsf3+0x28>
    14cc:	e0 95       	com	r30
    14ce:	e7 fb       	bst	r30, 7
    14d0:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_inf>

000014d4 <__addsf3x>:
    14d4:	e9 2f       	mov	r30, r25
    14d6:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__fp_split3>
    14da:	58 f3       	brcs	.-42     	; 0x14b2 <__addsf3+0xc>
    14dc:	ba 17       	cp	r27, r26
    14de:	62 07       	cpc	r22, r18
    14e0:	73 07       	cpc	r23, r19
    14e2:	84 07       	cpc	r24, r20
    14e4:	95 07       	cpc	r25, r21
    14e6:	20 f0       	brcs	.+8      	; 0x14f0 <__addsf3x+0x1c>
    14e8:	79 f4       	brne	.+30     	; 0x1508 <__addsf3x+0x34>
    14ea:	a6 f5       	brtc	.+104    	; 0x1554 <__addsf3x+0x80>
    14ec:	0c 94 17 0c 	jmp	0x182e	; 0x182e <__fp_zero>
    14f0:	0e f4       	brtc	.+2      	; 0x14f4 <__addsf3x+0x20>
    14f2:	e0 95       	com	r30
    14f4:	0b 2e       	mov	r0, r27
    14f6:	ba 2f       	mov	r27, r26
    14f8:	a0 2d       	mov	r26, r0
    14fa:	0b 01       	movw	r0, r22
    14fc:	b9 01       	movw	r22, r18
    14fe:	90 01       	movw	r18, r0
    1500:	0c 01       	movw	r0, r24
    1502:	ca 01       	movw	r24, r20
    1504:	a0 01       	movw	r20, r0
    1506:	11 24       	eor	r1, r1
    1508:	ff 27       	eor	r31, r31
    150a:	59 1b       	sub	r21, r25
    150c:	99 f0       	breq	.+38     	; 0x1534 <__addsf3x+0x60>
    150e:	59 3f       	cpi	r21, 0xF9	; 249
    1510:	50 f4       	brcc	.+20     	; 0x1526 <__addsf3x+0x52>
    1512:	50 3e       	cpi	r21, 0xE0	; 224
    1514:	68 f1       	brcs	.+90     	; 0x1570 <__addsf3x+0x9c>
    1516:	1a 16       	cp	r1, r26
    1518:	f0 40       	sbci	r31, 0x00	; 0
    151a:	a2 2f       	mov	r26, r18
    151c:	23 2f       	mov	r18, r19
    151e:	34 2f       	mov	r19, r20
    1520:	44 27       	eor	r20, r20
    1522:	58 5f       	subi	r21, 0xF8	; 248
    1524:	f3 cf       	rjmp	.-26     	; 0x150c <__addsf3x+0x38>
    1526:	46 95       	lsr	r20
    1528:	37 95       	ror	r19
    152a:	27 95       	ror	r18
    152c:	a7 95       	ror	r26
    152e:	f0 40       	sbci	r31, 0x00	; 0
    1530:	53 95       	inc	r21
    1532:	c9 f7       	brne	.-14     	; 0x1526 <__addsf3x+0x52>
    1534:	7e f4       	brtc	.+30     	; 0x1554 <__addsf3x+0x80>
    1536:	1f 16       	cp	r1, r31
    1538:	ba 0b       	sbc	r27, r26
    153a:	62 0b       	sbc	r22, r18
    153c:	73 0b       	sbc	r23, r19
    153e:	84 0b       	sbc	r24, r20
    1540:	ba f0       	brmi	.+46     	; 0x1570 <__addsf3x+0x9c>
    1542:	91 50       	subi	r25, 0x01	; 1
    1544:	a1 f0       	breq	.+40     	; 0x156e <__addsf3x+0x9a>
    1546:	ff 0f       	add	r31, r31
    1548:	bb 1f       	adc	r27, r27
    154a:	66 1f       	adc	r22, r22
    154c:	77 1f       	adc	r23, r23
    154e:	88 1f       	adc	r24, r24
    1550:	c2 f7       	brpl	.-16     	; 0x1542 <__addsf3x+0x6e>
    1552:	0e c0       	rjmp	.+28     	; 0x1570 <__addsf3x+0x9c>
    1554:	ba 0f       	add	r27, r26
    1556:	62 1f       	adc	r22, r18
    1558:	73 1f       	adc	r23, r19
    155a:	84 1f       	adc	r24, r20
    155c:	48 f4       	brcc	.+18     	; 0x1570 <__addsf3x+0x9c>
    155e:	87 95       	ror	r24
    1560:	77 95       	ror	r23
    1562:	67 95       	ror	r22
    1564:	b7 95       	ror	r27
    1566:	f7 95       	ror	r31
    1568:	9e 3f       	cpi	r25, 0xFE	; 254
    156a:	08 f0       	brcs	.+2      	; 0x156e <__addsf3x+0x9a>
    156c:	b0 cf       	rjmp	.-160    	; 0x14ce <__addsf3+0x28>
    156e:	93 95       	inc	r25
    1570:	88 0f       	add	r24, r24
    1572:	08 f0       	brcs	.+2      	; 0x1576 <__addsf3x+0xa2>
    1574:	99 27       	eor	r25, r25
    1576:	ee 0f       	add	r30, r30
    1578:	97 95       	ror	r25
    157a:	87 95       	ror	r24
    157c:	08 95       	ret

0000157e <__cmpsf2>:
    157e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__fp_cmp>
    1582:	08 f4       	brcc	.+2      	; 0x1586 <__cmpsf2+0x8>
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	08 95       	ret

00001588 <__divsf3>:
    1588:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__divsf3x>
    158c:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__fp_round>
    1590:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__fp_pscB>
    1594:	58 f0       	brcs	.+22     	; 0x15ac <__divsf3+0x24>
    1596:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__fp_pscA>
    159a:	40 f0       	brcs	.+16     	; 0x15ac <__divsf3+0x24>
    159c:	29 f4       	brne	.+10     	; 0x15a8 <__divsf3+0x20>
    159e:	5f 3f       	cpi	r21, 0xFF	; 255
    15a0:	29 f0       	breq	.+10     	; 0x15ac <__divsf3+0x24>
    15a2:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_inf>
    15a6:	51 11       	cpse	r21, r1
    15a8:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__fp_szero>
    15ac:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__fp_nan>

000015b0 <__divsf3x>:
    15b0:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__fp_split3>
    15b4:	68 f3       	brcs	.-38     	; 0x1590 <__divsf3+0x8>

000015b6 <__divsf3_pse>:
    15b6:	99 23       	and	r25, r25
    15b8:	b1 f3       	breq	.-20     	; 0x15a6 <__divsf3+0x1e>
    15ba:	55 23       	and	r21, r21
    15bc:	91 f3       	breq	.-28     	; 0x15a2 <__divsf3+0x1a>
    15be:	95 1b       	sub	r25, r21
    15c0:	55 0b       	sbc	r21, r21
    15c2:	bb 27       	eor	r27, r27
    15c4:	aa 27       	eor	r26, r26
    15c6:	62 17       	cp	r22, r18
    15c8:	73 07       	cpc	r23, r19
    15ca:	84 07       	cpc	r24, r20
    15cc:	38 f0       	brcs	.+14     	; 0x15dc <__divsf3_pse+0x26>
    15ce:	9f 5f       	subi	r25, 0xFF	; 255
    15d0:	5f 4f       	sbci	r21, 0xFF	; 255
    15d2:	22 0f       	add	r18, r18
    15d4:	33 1f       	adc	r19, r19
    15d6:	44 1f       	adc	r20, r20
    15d8:	aa 1f       	adc	r26, r26
    15da:	a9 f3       	breq	.-22     	; 0x15c6 <__divsf3_pse+0x10>
    15dc:	35 d0       	rcall	.+106    	; 0x1648 <__divsf3_pse+0x92>
    15de:	0e 2e       	mov	r0, r30
    15e0:	3a f0       	brmi	.+14     	; 0x15f0 <__divsf3_pse+0x3a>
    15e2:	e0 e8       	ldi	r30, 0x80	; 128
    15e4:	32 d0       	rcall	.+100    	; 0x164a <__divsf3_pse+0x94>
    15e6:	91 50       	subi	r25, 0x01	; 1
    15e8:	50 40       	sbci	r21, 0x00	; 0
    15ea:	e6 95       	lsr	r30
    15ec:	00 1c       	adc	r0, r0
    15ee:	ca f7       	brpl	.-14     	; 0x15e2 <__divsf3_pse+0x2c>
    15f0:	2b d0       	rcall	.+86     	; 0x1648 <__divsf3_pse+0x92>
    15f2:	fe 2f       	mov	r31, r30
    15f4:	29 d0       	rcall	.+82     	; 0x1648 <__divsf3_pse+0x92>
    15f6:	66 0f       	add	r22, r22
    15f8:	77 1f       	adc	r23, r23
    15fa:	88 1f       	adc	r24, r24
    15fc:	bb 1f       	adc	r27, r27
    15fe:	26 17       	cp	r18, r22
    1600:	37 07       	cpc	r19, r23
    1602:	48 07       	cpc	r20, r24
    1604:	ab 07       	cpc	r26, r27
    1606:	b0 e8       	ldi	r27, 0x80	; 128
    1608:	09 f0       	breq	.+2      	; 0x160c <__divsf3_pse+0x56>
    160a:	bb 0b       	sbc	r27, r27
    160c:	80 2d       	mov	r24, r0
    160e:	bf 01       	movw	r22, r30
    1610:	ff 27       	eor	r31, r31
    1612:	93 58       	subi	r25, 0x83	; 131
    1614:	5f 4f       	sbci	r21, 0xFF	; 255
    1616:	3a f0       	brmi	.+14     	; 0x1626 <__divsf3_pse+0x70>
    1618:	9e 3f       	cpi	r25, 0xFE	; 254
    161a:	51 05       	cpc	r21, r1
    161c:	78 f0       	brcs	.+30     	; 0x163c <__divsf3_pse+0x86>
    161e:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_inf>
    1622:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__fp_szero>
    1626:	5f 3f       	cpi	r21, 0xFF	; 255
    1628:	e4 f3       	brlt	.-8      	; 0x1622 <__divsf3_pse+0x6c>
    162a:	98 3e       	cpi	r25, 0xE8	; 232
    162c:	d4 f3       	brlt	.-12     	; 0x1622 <__divsf3_pse+0x6c>
    162e:	86 95       	lsr	r24
    1630:	77 95       	ror	r23
    1632:	67 95       	ror	r22
    1634:	b7 95       	ror	r27
    1636:	f7 95       	ror	r31
    1638:	9f 5f       	subi	r25, 0xFF	; 255
    163a:	c9 f7       	brne	.-14     	; 0x162e <__divsf3_pse+0x78>
    163c:	88 0f       	add	r24, r24
    163e:	91 1d       	adc	r25, r1
    1640:	96 95       	lsr	r25
    1642:	87 95       	ror	r24
    1644:	97 f9       	bld	r25, 7
    1646:	08 95       	ret
    1648:	e1 e0       	ldi	r30, 0x01	; 1
    164a:	66 0f       	add	r22, r22
    164c:	77 1f       	adc	r23, r23
    164e:	88 1f       	adc	r24, r24
    1650:	bb 1f       	adc	r27, r27
    1652:	62 17       	cp	r22, r18
    1654:	73 07       	cpc	r23, r19
    1656:	84 07       	cpc	r24, r20
    1658:	ba 07       	cpc	r27, r26
    165a:	20 f0       	brcs	.+8      	; 0x1664 <__divsf3_pse+0xae>
    165c:	62 1b       	sub	r22, r18
    165e:	73 0b       	sbc	r23, r19
    1660:	84 0b       	sbc	r24, r20
    1662:	ba 0b       	sbc	r27, r26
    1664:	ee 1f       	adc	r30, r30
    1666:	88 f7       	brcc	.-30     	; 0x164a <__divsf3_pse+0x94>
    1668:	e0 95       	com	r30
    166a:	08 95       	ret

0000166c <__fixsfsi>:
    166c:	0e 94 3d 0b 	call	0x167a	; 0x167a <__fixunssfsi>
    1670:	68 94       	set
    1672:	b1 11       	cpse	r27, r1
    1674:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__fp_szero>
    1678:	08 95       	ret

0000167a <__fixunssfsi>:
    167a:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__fp_splitA>
    167e:	88 f0       	brcs	.+34     	; 0x16a2 <__fixunssfsi+0x28>
    1680:	9f 57       	subi	r25, 0x7F	; 127
    1682:	98 f0       	brcs	.+38     	; 0x16aa <__fixunssfsi+0x30>
    1684:	b9 2f       	mov	r27, r25
    1686:	99 27       	eor	r25, r25
    1688:	b7 51       	subi	r27, 0x17	; 23
    168a:	b0 f0       	brcs	.+44     	; 0x16b8 <__fixunssfsi+0x3e>
    168c:	e1 f0       	breq	.+56     	; 0x16c6 <__fixunssfsi+0x4c>
    168e:	66 0f       	add	r22, r22
    1690:	77 1f       	adc	r23, r23
    1692:	88 1f       	adc	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	1a f0       	brmi	.+6      	; 0x169e <__fixunssfsi+0x24>
    1698:	ba 95       	dec	r27
    169a:	c9 f7       	brne	.-14     	; 0x168e <__fixunssfsi+0x14>
    169c:	14 c0       	rjmp	.+40     	; 0x16c6 <__fixunssfsi+0x4c>
    169e:	b1 30       	cpi	r27, 0x01	; 1
    16a0:	91 f0       	breq	.+36     	; 0x16c6 <__fixunssfsi+0x4c>
    16a2:	0e 94 17 0c 	call	0x182e	; 0x182e <__fp_zero>
    16a6:	b1 e0       	ldi	r27, 0x01	; 1
    16a8:	08 95       	ret
    16aa:	0c 94 17 0c 	jmp	0x182e	; 0x182e <__fp_zero>
    16ae:	67 2f       	mov	r22, r23
    16b0:	78 2f       	mov	r23, r24
    16b2:	88 27       	eor	r24, r24
    16b4:	b8 5f       	subi	r27, 0xF8	; 248
    16b6:	39 f0       	breq	.+14     	; 0x16c6 <__fixunssfsi+0x4c>
    16b8:	b9 3f       	cpi	r27, 0xF9	; 249
    16ba:	cc f3       	brlt	.-14     	; 0x16ae <__fixunssfsi+0x34>
    16bc:	86 95       	lsr	r24
    16be:	77 95       	ror	r23
    16c0:	67 95       	ror	r22
    16c2:	b3 95       	inc	r27
    16c4:	d9 f7       	brne	.-10     	; 0x16bc <__fixunssfsi+0x42>
    16c6:	3e f4       	brtc	.+14     	; 0x16d6 <__fixunssfsi+0x5c>
    16c8:	90 95       	com	r25
    16ca:	80 95       	com	r24
    16cc:	70 95       	com	r23
    16ce:	61 95       	neg	r22
    16d0:	7f 4f       	sbci	r23, 0xFF	; 255
    16d2:	8f 4f       	sbci	r24, 0xFF	; 255
    16d4:	9f 4f       	sbci	r25, 0xFF	; 255
    16d6:	08 95       	ret

000016d8 <__floatunsisf>:
    16d8:	e8 94       	clt
    16da:	09 c0       	rjmp	.+18     	; 0x16ee <__floatsisf+0x12>

000016dc <__floatsisf>:
    16dc:	97 fb       	bst	r25, 7
    16de:	3e f4       	brtc	.+14     	; 0x16ee <__floatsisf+0x12>
    16e0:	90 95       	com	r25
    16e2:	80 95       	com	r24
    16e4:	70 95       	com	r23
    16e6:	61 95       	neg	r22
    16e8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ea:	8f 4f       	sbci	r24, 0xFF	; 255
    16ec:	9f 4f       	sbci	r25, 0xFF	; 255
    16ee:	99 23       	and	r25, r25
    16f0:	a9 f0       	breq	.+42     	; 0x171c <__floatsisf+0x40>
    16f2:	f9 2f       	mov	r31, r25
    16f4:	96 e9       	ldi	r25, 0x96	; 150
    16f6:	bb 27       	eor	r27, r27
    16f8:	93 95       	inc	r25
    16fa:	f6 95       	lsr	r31
    16fc:	87 95       	ror	r24
    16fe:	77 95       	ror	r23
    1700:	67 95       	ror	r22
    1702:	b7 95       	ror	r27
    1704:	f1 11       	cpse	r31, r1
    1706:	f8 cf       	rjmp	.-16     	; 0x16f8 <__floatsisf+0x1c>
    1708:	fa f4       	brpl	.+62     	; 0x1748 <__floatsisf+0x6c>
    170a:	bb 0f       	add	r27, r27
    170c:	11 f4       	brne	.+4      	; 0x1712 <__floatsisf+0x36>
    170e:	60 ff       	sbrs	r22, 0
    1710:	1b c0       	rjmp	.+54     	; 0x1748 <__floatsisf+0x6c>
    1712:	6f 5f       	subi	r22, 0xFF	; 255
    1714:	7f 4f       	sbci	r23, 0xFF	; 255
    1716:	8f 4f       	sbci	r24, 0xFF	; 255
    1718:	9f 4f       	sbci	r25, 0xFF	; 255
    171a:	16 c0       	rjmp	.+44     	; 0x1748 <__floatsisf+0x6c>
    171c:	88 23       	and	r24, r24
    171e:	11 f0       	breq	.+4      	; 0x1724 <__floatsisf+0x48>
    1720:	96 e9       	ldi	r25, 0x96	; 150
    1722:	11 c0       	rjmp	.+34     	; 0x1746 <__floatsisf+0x6a>
    1724:	77 23       	and	r23, r23
    1726:	21 f0       	breq	.+8      	; 0x1730 <__floatsisf+0x54>
    1728:	9e e8       	ldi	r25, 0x8E	; 142
    172a:	87 2f       	mov	r24, r23
    172c:	76 2f       	mov	r23, r22
    172e:	05 c0       	rjmp	.+10     	; 0x173a <__floatsisf+0x5e>
    1730:	66 23       	and	r22, r22
    1732:	71 f0       	breq	.+28     	; 0x1750 <__floatsisf+0x74>
    1734:	96 e8       	ldi	r25, 0x86	; 134
    1736:	86 2f       	mov	r24, r22
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	2a f0       	brmi	.+10     	; 0x1748 <__floatsisf+0x6c>
    173e:	9a 95       	dec	r25
    1740:	66 0f       	add	r22, r22
    1742:	77 1f       	adc	r23, r23
    1744:	88 1f       	adc	r24, r24
    1746:	da f7       	brpl	.-10     	; 0x173e <__floatsisf+0x62>
    1748:	88 0f       	add	r24, r24
    174a:	96 95       	lsr	r25
    174c:	87 95       	ror	r24
    174e:	97 f9       	bld	r25, 7
    1750:	08 95       	ret

00001752 <__fp_cmp>:
    1752:	99 0f       	add	r25, r25
    1754:	00 08       	sbc	r0, r0
    1756:	55 0f       	add	r21, r21
    1758:	aa 0b       	sbc	r26, r26
    175a:	e0 e8       	ldi	r30, 0x80	; 128
    175c:	fe ef       	ldi	r31, 0xFE	; 254
    175e:	16 16       	cp	r1, r22
    1760:	17 06       	cpc	r1, r23
    1762:	e8 07       	cpc	r30, r24
    1764:	f9 07       	cpc	r31, r25
    1766:	c0 f0       	brcs	.+48     	; 0x1798 <__fp_cmp+0x46>
    1768:	12 16       	cp	r1, r18
    176a:	13 06       	cpc	r1, r19
    176c:	e4 07       	cpc	r30, r20
    176e:	f5 07       	cpc	r31, r21
    1770:	98 f0       	brcs	.+38     	; 0x1798 <__fp_cmp+0x46>
    1772:	62 1b       	sub	r22, r18
    1774:	73 0b       	sbc	r23, r19
    1776:	84 0b       	sbc	r24, r20
    1778:	95 0b       	sbc	r25, r21
    177a:	39 f4       	brne	.+14     	; 0x178a <__fp_cmp+0x38>
    177c:	0a 26       	eor	r0, r26
    177e:	61 f0       	breq	.+24     	; 0x1798 <__fp_cmp+0x46>
    1780:	23 2b       	or	r18, r19
    1782:	24 2b       	or	r18, r20
    1784:	25 2b       	or	r18, r21
    1786:	21 f4       	brne	.+8      	; 0x1790 <__fp_cmp+0x3e>
    1788:	08 95       	ret
    178a:	0a 26       	eor	r0, r26
    178c:	09 f4       	brne	.+2      	; 0x1790 <__fp_cmp+0x3e>
    178e:	a1 40       	sbci	r26, 0x01	; 1
    1790:	a6 95       	lsr	r26
    1792:	8f ef       	ldi	r24, 0xFF	; 255
    1794:	81 1d       	adc	r24, r1
    1796:	81 1d       	adc	r24, r1
    1798:	08 95       	ret

0000179a <__fp_inf>:
    179a:	97 f9       	bld	r25, 7
    179c:	9f 67       	ori	r25, 0x7F	; 127
    179e:	80 e8       	ldi	r24, 0x80	; 128
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	08 95       	ret

000017a6 <__fp_nan>:
    17a6:	9f ef       	ldi	r25, 0xFF	; 255
    17a8:	80 ec       	ldi	r24, 0xC0	; 192
    17aa:	08 95       	ret

000017ac <__fp_pscA>:
    17ac:	00 24       	eor	r0, r0
    17ae:	0a 94       	dec	r0
    17b0:	16 16       	cp	r1, r22
    17b2:	17 06       	cpc	r1, r23
    17b4:	18 06       	cpc	r1, r24
    17b6:	09 06       	cpc	r0, r25
    17b8:	08 95       	ret

000017ba <__fp_pscB>:
    17ba:	00 24       	eor	r0, r0
    17bc:	0a 94       	dec	r0
    17be:	12 16       	cp	r1, r18
    17c0:	13 06       	cpc	r1, r19
    17c2:	14 06       	cpc	r1, r20
    17c4:	05 06       	cpc	r0, r21
    17c6:	08 95       	ret

000017c8 <__fp_round>:
    17c8:	09 2e       	mov	r0, r25
    17ca:	03 94       	inc	r0
    17cc:	00 0c       	add	r0, r0
    17ce:	11 f4       	brne	.+4      	; 0x17d4 <__fp_round+0xc>
    17d0:	88 23       	and	r24, r24
    17d2:	52 f0       	brmi	.+20     	; 0x17e8 <__fp_round+0x20>
    17d4:	bb 0f       	add	r27, r27
    17d6:	40 f4       	brcc	.+16     	; 0x17e8 <__fp_round+0x20>
    17d8:	bf 2b       	or	r27, r31
    17da:	11 f4       	brne	.+4      	; 0x17e0 <__fp_round+0x18>
    17dc:	60 ff       	sbrs	r22, 0
    17de:	04 c0       	rjmp	.+8      	; 0x17e8 <__fp_round+0x20>
    17e0:	6f 5f       	subi	r22, 0xFF	; 255
    17e2:	7f 4f       	sbci	r23, 0xFF	; 255
    17e4:	8f 4f       	sbci	r24, 0xFF	; 255
    17e6:	9f 4f       	sbci	r25, 0xFF	; 255
    17e8:	08 95       	ret

000017ea <__fp_split3>:
    17ea:	57 fd       	sbrc	r21, 7
    17ec:	90 58       	subi	r25, 0x80	; 128
    17ee:	44 0f       	add	r20, r20
    17f0:	55 1f       	adc	r21, r21
    17f2:	59 f0       	breq	.+22     	; 0x180a <__fp_splitA+0x10>
    17f4:	5f 3f       	cpi	r21, 0xFF	; 255
    17f6:	71 f0       	breq	.+28     	; 0x1814 <__fp_splitA+0x1a>
    17f8:	47 95       	ror	r20

000017fa <__fp_splitA>:
    17fa:	88 0f       	add	r24, r24
    17fc:	97 fb       	bst	r25, 7
    17fe:	99 1f       	adc	r25, r25
    1800:	61 f0       	breq	.+24     	; 0x181a <__fp_splitA+0x20>
    1802:	9f 3f       	cpi	r25, 0xFF	; 255
    1804:	79 f0       	breq	.+30     	; 0x1824 <__fp_splitA+0x2a>
    1806:	87 95       	ror	r24
    1808:	08 95       	ret
    180a:	12 16       	cp	r1, r18
    180c:	13 06       	cpc	r1, r19
    180e:	14 06       	cpc	r1, r20
    1810:	55 1f       	adc	r21, r21
    1812:	f2 cf       	rjmp	.-28     	; 0x17f8 <__fp_split3+0xe>
    1814:	46 95       	lsr	r20
    1816:	f1 df       	rcall	.-30     	; 0x17fa <__fp_splitA>
    1818:	08 c0       	rjmp	.+16     	; 0x182a <__fp_splitA+0x30>
    181a:	16 16       	cp	r1, r22
    181c:	17 06       	cpc	r1, r23
    181e:	18 06       	cpc	r1, r24
    1820:	99 1f       	adc	r25, r25
    1822:	f1 cf       	rjmp	.-30     	; 0x1806 <__fp_splitA+0xc>
    1824:	86 95       	lsr	r24
    1826:	71 05       	cpc	r23, r1
    1828:	61 05       	cpc	r22, r1
    182a:	08 94       	sec
    182c:	08 95       	ret

0000182e <__fp_zero>:
    182e:	e8 94       	clt

00001830 <__fp_szero>:
    1830:	bb 27       	eor	r27, r27
    1832:	66 27       	eor	r22, r22
    1834:	77 27       	eor	r23, r23
    1836:	cb 01       	movw	r24, r22
    1838:	97 f9       	bld	r25, 7
    183a:	08 95       	ret

0000183c <__gesf2>:
    183c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__fp_cmp>
    1840:	08 f4       	brcc	.+2      	; 0x1844 <__gesf2+0x8>
    1842:	8f ef       	ldi	r24, 0xFF	; 255
    1844:	08 95       	ret

00001846 <__mulsf3>:
    1846:	0e 94 36 0c 	call	0x186c	; 0x186c <__mulsf3x>
    184a:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__fp_round>
    184e:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__fp_pscA>
    1852:	38 f0       	brcs	.+14     	; 0x1862 <__mulsf3+0x1c>
    1854:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__fp_pscB>
    1858:	20 f0       	brcs	.+8      	; 0x1862 <__mulsf3+0x1c>
    185a:	95 23       	and	r25, r21
    185c:	11 f0       	breq	.+4      	; 0x1862 <__mulsf3+0x1c>
    185e:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_inf>
    1862:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__fp_nan>
    1866:	11 24       	eor	r1, r1
    1868:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__fp_szero>

0000186c <__mulsf3x>:
    186c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__fp_split3>
    1870:	70 f3       	brcs	.-36     	; 0x184e <__mulsf3+0x8>

00001872 <__mulsf3_pse>:
    1872:	95 9f       	mul	r25, r21
    1874:	c1 f3       	breq	.-16     	; 0x1866 <__mulsf3+0x20>
    1876:	95 0f       	add	r25, r21
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	55 1f       	adc	r21, r21
    187c:	62 9f       	mul	r22, r18
    187e:	f0 01       	movw	r30, r0
    1880:	72 9f       	mul	r23, r18
    1882:	bb 27       	eor	r27, r27
    1884:	f0 0d       	add	r31, r0
    1886:	b1 1d       	adc	r27, r1
    1888:	63 9f       	mul	r22, r19
    188a:	aa 27       	eor	r26, r26
    188c:	f0 0d       	add	r31, r0
    188e:	b1 1d       	adc	r27, r1
    1890:	aa 1f       	adc	r26, r26
    1892:	64 9f       	mul	r22, r20
    1894:	66 27       	eor	r22, r22
    1896:	b0 0d       	add	r27, r0
    1898:	a1 1d       	adc	r26, r1
    189a:	66 1f       	adc	r22, r22
    189c:	82 9f       	mul	r24, r18
    189e:	22 27       	eor	r18, r18
    18a0:	b0 0d       	add	r27, r0
    18a2:	a1 1d       	adc	r26, r1
    18a4:	62 1f       	adc	r22, r18
    18a6:	73 9f       	mul	r23, r19
    18a8:	b0 0d       	add	r27, r0
    18aa:	a1 1d       	adc	r26, r1
    18ac:	62 1f       	adc	r22, r18
    18ae:	83 9f       	mul	r24, r19
    18b0:	a0 0d       	add	r26, r0
    18b2:	61 1d       	adc	r22, r1
    18b4:	22 1f       	adc	r18, r18
    18b6:	74 9f       	mul	r23, r20
    18b8:	33 27       	eor	r19, r19
    18ba:	a0 0d       	add	r26, r0
    18bc:	61 1d       	adc	r22, r1
    18be:	23 1f       	adc	r18, r19
    18c0:	84 9f       	mul	r24, r20
    18c2:	60 0d       	add	r22, r0
    18c4:	21 1d       	adc	r18, r1
    18c6:	82 2f       	mov	r24, r18
    18c8:	76 2f       	mov	r23, r22
    18ca:	6a 2f       	mov	r22, r26
    18cc:	11 24       	eor	r1, r1
    18ce:	9f 57       	subi	r25, 0x7F	; 127
    18d0:	50 40       	sbci	r21, 0x00	; 0
    18d2:	9a f0       	brmi	.+38     	; 0x18fa <__mulsf3_pse+0x88>
    18d4:	f1 f0       	breq	.+60     	; 0x1912 <__mulsf3_pse+0xa0>
    18d6:	88 23       	and	r24, r24
    18d8:	4a f0       	brmi	.+18     	; 0x18ec <__mulsf3_pse+0x7a>
    18da:	ee 0f       	add	r30, r30
    18dc:	ff 1f       	adc	r31, r31
    18de:	bb 1f       	adc	r27, r27
    18e0:	66 1f       	adc	r22, r22
    18e2:	77 1f       	adc	r23, r23
    18e4:	88 1f       	adc	r24, r24
    18e6:	91 50       	subi	r25, 0x01	; 1
    18e8:	50 40       	sbci	r21, 0x00	; 0
    18ea:	a9 f7       	brne	.-22     	; 0x18d6 <__mulsf3_pse+0x64>
    18ec:	9e 3f       	cpi	r25, 0xFE	; 254
    18ee:	51 05       	cpc	r21, r1
    18f0:	80 f0       	brcs	.+32     	; 0x1912 <__mulsf3_pse+0xa0>
    18f2:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_inf>
    18f6:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__fp_szero>
    18fa:	5f 3f       	cpi	r21, 0xFF	; 255
    18fc:	e4 f3       	brlt	.-8      	; 0x18f6 <__mulsf3_pse+0x84>
    18fe:	98 3e       	cpi	r25, 0xE8	; 232
    1900:	d4 f3       	brlt	.-12     	; 0x18f6 <__mulsf3_pse+0x84>
    1902:	86 95       	lsr	r24
    1904:	77 95       	ror	r23
    1906:	67 95       	ror	r22
    1908:	b7 95       	ror	r27
    190a:	f7 95       	ror	r31
    190c:	e7 95       	ror	r30
    190e:	9f 5f       	subi	r25, 0xFF	; 255
    1910:	c1 f7       	brne	.-16     	; 0x1902 <__mulsf3_pse+0x90>
    1912:	fe 2b       	or	r31, r30
    1914:	88 0f       	add	r24, r24
    1916:	91 1d       	adc	r25, r1
    1918:	96 95       	lsr	r25
    191a:	87 95       	ror	r24
    191c:	97 f9       	bld	r25, 7
    191e:	08 95       	ret

00001920 <__udivmodqi4>:
    1920:	99 1b       	sub	r25, r25
    1922:	79 e0       	ldi	r23, 0x09	; 9
    1924:	04 c0       	rjmp	.+8      	; 0x192e <__udivmodqi4_ep>

00001926 <__udivmodqi4_loop>:
    1926:	99 1f       	adc	r25, r25
    1928:	96 17       	cp	r25, r22
    192a:	08 f0       	brcs	.+2      	; 0x192e <__udivmodqi4_ep>
    192c:	96 1b       	sub	r25, r22

0000192e <__udivmodqi4_ep>:
    192e:	88 1f       	adc	r24, r24
    1930:	7a 95       	dec	r23
    1932:	c9 f7       	brne	.-14     	; 0x1926 <__udivmodqi4_loop>
    1934:	80 95       	com	r24
    1936:	08 95       	ret

00001938 <__divmodqi4>:
    1938:	87 fb       	bst	r24, 7
    193a:	08 2e       	mov	r0, r24
    193c:	06 26       	eor	r0, r22
    193e:	87 fd       	sbrc	r24, 7
    1940:	81 95       	neg	r24
    1942:	67 fd       	sbrc	r22, 7
    1944:	61 95       	neg	r22
    1946:	0e 94 90 0c 	call	0x1920	; 0x1920 <__udivmodqi4>
    194a:	0e f4       	brtc	.+2      	; 0x194e <__divmodqi4_1>
    194c:	91 95       	neg	r25

0000194e <__divmodqi4_1>:
    194e:	07 fc       	sbrc	r0, 7
    1950:	81 95       	neg	r24

00001952 <__divmodqi4_exit>:
    1952:	08 95       	ret

00001954 <__divmodhi4>:
    1954:	97 fb       	bst	r25, 7
    1956:	07 2e       	mov	r0, r23
    1958:	16 f4       	brtc	.+4      	; 0x195e <__divmodhi4+0xa>
    195a:	00 94       	com	r0
    195c:	07 d0       	rcall	.+14     	; 0x196c <__divmodhi4_neg1>
    195e:	77 fd       	sbrc	r23, 7
    1960:	09 d0       	rcall	.+18     	; 0x1974 <__divmodhi4_neg2>
    1962:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__udivmodhi4>
    1966:	07 fc       	sbrc	r0, 7
    1968:	05 d0       	rcall	.+10     	; 0x1974 <__divmodhi4_neg2>
    196a:	3e f4       	brtc	.+14     	; 0x197a <__divmodhi4_exit>

0000196c <__divmodhi4_neg1>:
    196c:	90 95       	com	r25
    196e:	81 95       	neg	r24
    1970:	9f 4f       	sbci	r25, 0xFF	; 255
    1972:	08 95       	ret

00001974 <__divmodhi4_neg2>:
    1974:	70 95       	com	r23
    1976:	61 95       	neg	r22
    1978:	7f 4f       	sbci	r23, 0xFF	; 255

0000197a <__divmodhi4_exit>:
    197a:	08 95       	ret

0000197c <__tablejump2__>:
    197c:	ee 0f       	add	r30, r30
    197e:	ff 1f       	adc	r31, r31
    1980:	05 90       	lpm	r0, Z+
    1982:	f4 91       	lpm	r31, Z
    1984:	e0 2d       	mov	r30, r0
    1986:	09 94       	ijmp

00001988 <__udivmodhi4>:
    1988:	aa 1b       	sub	r26, r26
    198a:	bb 1b       	sub	r27, r27
    198c:	51 e1       	ldi	r21, 0x11	; 17
    198e:	07 c0       	rjmp	.+14     	; 0x199e <__udivmodhi4_ep>

00001990 <__udivmodhi4_loop>:
    1990:	aa 1f       	adc	r26, r26
    1992:	bb 1f       	adc	r27, r27
    1994:	a6 17       	cp	r26, r22
    1996:	b7 07       	cpc	r27, r23
    1998:	10 f0       	brcs	.+4      	; 0x199e <__udivmodhi4_ep>
    199a:	a6 1b       	sub	r26, r22
    199c:	b7 0b       	sbc	r27, r23

0000199e <__udivmodhi4_ep>:
    199e:	88 1f       	adc	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	5a 95       	dec	r21
    19a4:	a9 f7       	brne	.-22     	; 0x1990 <__udivmodhi4_loop>
    19a6:	80 95       	com	r24
    19a8:	90 95       	com	r25
    19aa:	bc 01       	movw	r22, r24
    19ac:	cd 01       	movw	r24, r26
    19ae:	08 95       	ret

000019b0 <snprintf>:
    19b0:	ae e0       	ldi	r26, 0x0E	; 14
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	ee ed       	ldi	r30, 0xDE	; 222
    19b6:	fc e0       	ldi	r31, 0x0C	; 12
    19b8:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__prologue_saves__+0x1c>
    19bc:	0d 89       	ldd	r16, Y+21	; 0x15
    19be:	1e 89       	ldd	r17, Y+22	; 0x16
    19c0:	8f 89       	ldd	r24, Y+23	; 0x17
    19c2:	98 8d       	ldd	r25, Y+24	; 0x18
    19c4:	26 e0       	ldi	r18, 0x06	; 6
    19c6:	2c 83       	std	Y+4, r18	; 0x04
    19c8:	1a 83       	std	Y+2, r17	; 0x02
    19ca:	09 83       	std	Y+1, r16	; 0x01
    19cc:	97 ff       	sbrs	r25, 7
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <snprintf+0x24>
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e8       	ldi	r25, 0x80	; 128
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	9e 83       	std	Y+6, r25	; 0x06
    19d8:	8d 83       	std	Y+5, r24	; 0x05
    19da:	ae 01       	movw	r20, r28
    19dc:	45 5e       	subi	r20, 0xE5	; 229
    19de:	5f 4f       	sbci	r21, 0xFF	; 255
    19e0:	69 8d       	ldd	r22, Y+25	; 0x19
    19e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19e4:	ce 01       	movw	r24, r28
    19e6:	01 96       	adiw	r24, 0x01	; 1
    19e8:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <vfprintf>
    19ec:	4d 81       	ldd	r20, Y+5	; 0x05
    19ee:	5e 81       	ldd	r21, Y+6	; 0x06
    19f0:	57 fd       	sbrc	r21, 7
    19f2:	0a c0       	rjmp	.+20     	; 0x1a08 <snprintf+0x58>
    19f4:	2f 81       	ldd	r18, Y+7	; 0x07
    19f6:	38 85       	ldd	r19, Y+8	; 0x08
    19f8:	42 17       	cp	r20, r18
    19fa:	53 07       	cpc	r21, r19
    19fc:	0c f4       	brge	.+2      	; 0x1a00 <snprintf+0x50>
    19fe:	9a 01       	movw	r18, r20
    1a00:	f8 01       	movw	r30, r16
    1a02:	e2 0f       	add	r30, r18
    1a04:	f3 1f       	adc	r31, r19
    1a06:	10 82       	st	Z, r1
    1a08:	2e 96       	adiw	r28, 0x0e	; 14
    1a0a:	e4 e0       	ldi	r30, 0x04	; 4
    1a0c:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__epilogue_restores__+0x1c>

00001a10 <vfprintf>:
    1a10:	ab e0       	ldi	r26, 0x0B	; 11
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	ee e0       	ldi	r30, 0x0E	; 14
    1a16:	fd e0       	ldi	r31, 0x0D	; 13
    1a18:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <__prologue_saves__>
    1a1c:	6c 01       	movw	r12, r24
    1a1e:	7b 01       	movw	r14, r22
    1a20:	8a 01       	movw	r16, r20
    1a22:	fc 01       	movw	r30, r24
    1a24:	17 82       	std	Z+7, r1	; 0x07
    1a26:	16 82       	std	Z+6, r1	; 0x06
    1a28:	83 81       	ldd	r24, Z+3	; 0x03
    1a2a:	81 ff       	sbrs	r24, 1
    1a2c:	cc c1       	rjmp	.+920    	; 0x1dc6 <vfprintf+0x3b6>
    1a2e:	ce 01       	movw	r24, r28
    1a30:	01 96       	adiw	r24, 0x01	; 1
    1a32:	3c 01       	movw	r6, r24
    1a34:	f6 01       	movw	r30, r12
    1a36:	93 81       	ldd	r25, Z+3	; 0x03
    1a38:	f7 01       	movw	r30, r14
    1a3a:	93 fd       	sbrc	r25, 3
    1a3c:	85 91       	lpm	r24, Z+
    1a3e:	93 ff       	sbrs	r25, 3
    1a40:	81 91       	ld	r24, Z+
    1a42:	7f 01       	movw	r14, r30
    1a44:	88 23       	and	r24, r24
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <vfprintf+0x3a>
    1a48:	ba c1       	rjmp	.+884    	; 0x1dbe <vfprintf+0x3ae>
    1a4a:	85 32       	cpi	r24, 0x25	; 37
    1a4c:	39 f4       	brne	.+14     	; 0x1a5c <vfprintf+0x4c>
    1a4e:	93 fd       	sbrc	r25, 3
    1a50:	85 91       	lpm	r24, Z+
    1a52:	93 ff       	sbrs	r25, 3
    1a54:	81 91       	ld	r24, Z+
    1a56:	7f 01       	movw	r14, r30
    1a58:	85 32       	cpi	r24, 0x25	; 37
    1a5a:	29 f4       	brne	.+10     	; 0x1a66 <vfprintf+0x56>
    1a5c:	b6 01       	movw	r22, r12
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <fputc>
    1a64:	e7 cf       	rjmp	.-50     	; 0x1a34 <vfprintf+0x24>
    1a66:	91 2c       	mov	r9, r1
    1a68:	21 2c       	mov	r2, r1
    1a6a:	31 2c       	mov	r3, r1
    1a6c:	ff e1       	ldi	r31, 0x1F	; 31
    1a6e:	f3 15       	cp	r31, r3
    1a70:	d8 f0       	brcs	.+54     	; 0x1aa8 <vfprintf+0x98>
    1a72:	8b 32       	cpi	r24, 0x2B	; 43
    1a74:	79 f0       	breq	.+30     	; 0x1a94 <vfprintf+0x84>
    1a76:	38 f4       	brcc	.+14     	; 0x1a86 <vfprintf+0x76>
    1a78:	80 32       	cpi	r24, 0x20	; 32
    1a7a:	79 f0       	breq	.+30     	; 0x1a9a <vfprintf+0x8a>
    1a7c:	83 32       	cpi	r24, 0x23	; 35
    1a7e:	a1 f4       	brne	.+40     	; 0x1aa8 <vfprintf+0x98>
    1a80:	23 2d       	mov	r18, r3
    1a82:	20 61       	ori	r18, 0x10	; 16
    1a84:	1d c0       	rjmp	.+58     	; 0x1ac0 <vfprintf+0xb0>
    1a86:	8d 32       	cpi	r24, 0x2D	; 45
    1a88:	61 f0       	breq	.+24     	; 0x1aa2 <vfprintf+0x92>
    1a8a:	80 33       	cpi	r24, 0x30	; 48
    1a8c:	69 f4       	brne	.+26     	; 0x1aa8 <vfprintf+0x98>
    1a8e:	23 2d       	mov	r18, r3
    1a90:	21 60       	ori	r18, 0x01	; 1
    1a92:	16 c0       	rjmp	.+44     	; 0x1ac0 <vfprintf+0xb0>
    1a94:	83 2d       	mov	r24, r3
    1a96:	82 60       	ori	r24, 0x02	; 2
    1a98:	38 2e       	mov	r3, r24
    1a9a:	e3 2d       	mov	r30, r3
    1a9c:	e4 60       	ori	r30, 0x04	; 4
    1a9e:	3e 2e       	mov	r3, r30
    1aa0:	2a c0       	rjmp	.+84     	; 0x1af6 <vfprintf+0xe6>
    1aa2:	f3 2d       	mov	r31, r3
    1aa4:	f8 60       	ori	r31, 0x08	; 8
    1aa6:	1d c0       	rjmp	.+58     	; 0x1ae2 <vfprintf+0xd2>
    1aa8:	37 fc       	sbrc	r3, 7
    1aaa:	2d c0       	rjmp	.+90     	; 0x1b06 <vfprintf+0xf6>
    1aac:	20 ed       	ldi	r18, 0xD0	; 208
    1aae:	28 0f       	add	r18, r24
    1ab0:	2a 30       	cpi	r18, 0x0A	; 10
    1ab2:	40 f0       	brcs	.+16     	; 0x1ac4 <vfprintf+0xb4>
    1ab4:	8e 32       	cpi	r24, 0x2E	; 46
    1ab6:	b9 f4       	brne	.+46     	; 0x1ae6 <vfprintf+0xd6>
    1ab8:	36 fc       	sbrc	r3, 6
    1aba:	81 c1       	rjmp	.+770    	; 0x1dbe <vfprintf+0x3ae>
    1abc:	23 2d       	mov	r18, r3
    1abe:	20 64       	ori	r18, 0x40	; 64
    1ac0:	32 2e       	mov	r3, r18
    1ac2:	19 c0       	rjmp	.+50     	; 0x1af6 <vfprintf+0xe6>
    1ac4:	36 fe       	sbrs	r3, 6
    1ac6:	06 c0       	rjmp	.+12     	; 0x1ad4 <vfprintf+0xc4>
    1ac8:	8a e0       	ldi	r24, 0x0A	; 10
    1aca:	98 9e       	mul	r9, r24
    1acc:	20 0d       	add	r18, r0
    1ace:	11 24       	eor	r1, r1
    1ad0:	92 2e       	mov	r9, r18
    1ad2:	11 c0       	rjmp	.+34     	; 0x1af6 <vfprintf+0xe6>
    1ad4:	ea e0       	ldi	r30, 0x0A	; 10
    1ad6:	2e 9e       	mul	r2, r30
    1ad8:	20 0d       	add	r18, r0
    1ada:	11 24       	eor	r1, r1
    1adc:	22 2e       	mov	r2, r18
    1ade:	f3 2d       	mov	r31, r3
    1ae0:	f0 62       	ori	r31, 0x20	; 32
    1ae2:	3f 2e       	mov	r3, r31
    1ae4:	08 c0       	rjmp	.+16     	; 0x1af6 <vfprintf+0xe6>
    1ae6:	8c 36       	cpi	r24, 0x6C	; 108
    1ae8:	21 f4       	brne	.+8      	; 0x1af2 <vfprintf+0xe2>
    1aea:	83 2d       	mov	r24, r3
    1aec:	80 68       	ori	r24, 0x80	; 128
    1aee:	38 2e       	mov	r3, r24
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <vfprintf+0xe6>
    1af2:	88 36       	cpi	r24, 0x68	; 104
    1af4:	41 f4       	brne	.+16     	; 0x1b06 <vfprintf+0xf6>
    1af6:	f7 01       	movw	r30, r14
    1af8:	93 fd       	sbrc	r25, 3
    1afa:	85 91       	lpm	r24, Z+
    1afc:	93 ff       	sbrs	r25, 3
    1afe:	81 91       	ld	r24, Z+
    1b00:	7f 01       	movw	r14, r30
    1b02:	81 11       	cpse	r24, r1
    1b04:	b3 cf       	rjmp	.-154    	; 0x1a6c <vfprintf+0x5c>
    1b06:	98 2f       	mov	r25, r24
    1b08:	9f 7d       	andi	r25, 0xDF	; 223
    1b0a:	95 54       	subi	r25, 0x45	; 69
    1b0c:	93 30       	cpi	r25, 0x03	; 3
    1b0e:	28 f4       	brcc	.+10     	; 0x1b1a <vfprintf+0x10a>
    1b10:	0c 5f       	subi	r16, 0xFC	; 252
    1b12:	1f 4f       	sbci	r17, 0xFF	; 255
    1b14:	9f e3       	ldi	r25, 0x3F	; 63
    1b16:	99 83       	std	Y+1, r25	; 0x01
    1b18:	0d c0       	rjmp	.+26     	; 0x1b34 <vfprintf+0x124>
    1b1a:	83 36       	cpi	r24, 0x63	; 99
    1b1c:	31 f0       	breq	.+12     	; 0x1b2a <vfprintf+0x11a>
    1b1e:	83 37       	cpi	r24, 0x73	; 115
    1b20:	71 f0       	breq	.+28     	; 0x1b3e <vfprintf+0x12e>
    1b22:	83 35       	cpi	r24, 0x53	; 83
    1b24:	09 f0       	breq	.+2      	; 0x1b28 <vfprintf+0x118>
    1b26:	59 c0       	rjmp	.+178    	; 0x1bda <vfprintf+0x1ca>
    1b28:	21 c0       	rjmp	.+66     	; 0x1b6c <vfprintf+0x15c>
    1b2a:	f8 01       	movw	r30, r16
    1b2c:	80 81       	ld	r24, Z
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	0e 5f       	subi	r16, 0xFE	; 254
    1b32:	1f 4f       	sbci	r17, 0xFF	; 255
    1b34:	88 24       	eor	r8, r8
    1b36:	83 94       	inc	r8
    1b38:	91 2c       	mov	r9, r1
    1b3a:	53 01       	movw	r10, r6
    1b3c:	13 c0       	rjmp	.+38     	; 0x1b64 <vfprintf+0x154>
    1b3e:	28 01       	movw	r4, r16
    1b40:	f2 e0       	ldi	r31, 0x02	; 2
    1b42:	4f 0e       	add	r4, r31
    1b44:	51 1c       	adc	r5, r1
    1b46:	f8 01       	movw	r30, r16
    1b48:	a0 80       	ld	r10, Z
    1b4a:	b1 80       	ldd	r11, Z+1	; 0x01
    1b4c:	36 fe       	sbrs	r3, 6
    1b4e:	03 c0       	rjmp	.+6      	; 0x1b56 <vfprintf+0x146>
    1b50:	69 2d       	mov	r22, r9
    1b52:	70 e0       	ldi	r23, 0x00	; 0
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <vfprintf+0x14a>
    1b56:	6f ef       	ldi	r22, 0xFF	; 255
    1b58:	7f ef       	ldi	r23, 0xFF	; 255
    1b5a:	c5 01       	movw	r24, r10
    1b5c:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <strnlen>
    1b60:	4c 01       	movw	r8, r24
    1b62:	82 01       	movw	r16, r4
    1b64:	f3 2d       	mov	r31, r3
    1b66:	ff 77       	andi	r31, 0x7F	; 127
    1b68:	3f 2e       	mov	r3, r31
    1b6a:	16 c0       	rjmp	.+44     	; 0x1b98 <vfprintf+0x188>
    1b6c:	28 01       	movw	r4, r16
    1b6e:	22 e0       	ldi	r18, 0x02	; 2
    1b70:	42 0e       	add	r4, r18
    1b72:	51 1c       	adc	r5, r1
    1b74:	f8 01       	movw	r30, r16
    1b76:	a0 80       	ld	r10, Z
    1b78:	b1 80       	ldd	r11, Z+1	; 0x01
    1b7a:	36 fe       	sbrs	r3, 6
    1b7c:	03 c0       	rjmp	.+6      	; 0x1b84 <vfprintf+0x174>
    1b7e:	69 2d       	mov	r22, r9
    1b80:	70 e0       	ldi	r23, 0x00	; 0
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <vfprintf+0x178>
    1b84:	6f ef       	ldi	r22, 0xFF	; 255
    1b86:	7f ef       	ldi	r23, 0xFF	; 255
    1b88:	c5 01       	movw	r24, r10
    1b8a:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <strnlen_P>
    1b8e:	4c 01       	movw	r8, r24
    1b90:	f3 2d       	mov	r31, r3
    1b92:	f0 68       	ori	r31, 0x80	; 128
    1b94:	3f 2e       	mov	r3, r31
    1b96:	82 01       	movw	r16, r4
    1b98:	33 fc       	sbrc	r3, 3
    1b9a:	1b c0       	rjmp	.+54     	; 0x1bd2 <vfprintf+0x1c2>
    1b9c:	82 2d       	mov	r24, r2
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	88 16       	cp	r8, r24
    1ba2:	99 06       	cpc	r9, r25
    1ba4:	b0 f4       	brcc	.+44     	; 0x1bd2 <vfprintf+0x1c2>
    1ba6:	b6 01       	movw	r22, r12
    1ba8:	80 e2       	ldi	r24, 0x20	; 32
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <fputc>
    1bb0:	2a 94       	dec	r2
    1bb2:	f4 cf       	rjmp	.-24     	; 0x1b9c <vfprintf+0x18c>
    1bb4:	f5 01       	movw	r30, r10
    1bb6:	37 fc       	sbrc	r3, 7
    1bb8:	85 91       	lpm	r24, Z+
    1bba:	37 fe       	sbrs	r3, 7
    1bbc:	81 91       	ld	r24, Z+
    1bbe:	5f 01       	movw	r10, r30
    1bc0:	b6 01       	movw	r22, r12
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <fputc>
    1bc8:	21 10       	cpse	r2, r1
    1bca:	2a 94       	dec	r2
    1bcc:	21 e0       	ldi	r18, 0x01	; 1
    1bce:	82 1a       	sub	r8, r18
    1bd0:	91 08       	sbc	r9, r1
    1bd2:	81 14       	cp	r8, r1
    1bd4:	91 04       	cpc	r9, r1
    1bd6:	71 f7       	brne	.-36     	; 0x1bb4 <vfprintf+0x1a4>
    1bd8:	e8 c0       	rjmp	.+464    	; 0x1daa <vfprintf+0x39a>
    1bda:	84 36       	cpi	r24, 0x64	; 100
    1bdc:	11 f0       	breq	.+4      	; 0x1be2 <vfprintf+0x1d2>
    1bde:	89 36       	cpi	r24, 0x69	; 105
    1be0:	41 f5       	brne	.+80     	; 0x1c32 <vfprintf+0x222>
    1be2:	f8 01       	movw	r30, r16
    1be4:	37 fe       	sbrs	r3, 7
    1be6:	07 c0       	rjmp	.+14     	; 0x1bf6 <vfprintf+0x1e6>
    1be8:	60 81       	ld	r22, Z
    1bea:	71 81       	ldd	r23, Z+1	; 0x01
    1bec:	82 81       	ldd	r24, Z+2	; 0x02
    1bee:	93 81       	ldd	r25, Z+3	; 0x03
    1bf0:	0c 5f       	subi	r16, 0xFC	; 252
    1bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf4:	08 c0       	rjmp	.+16     	; 0x1c06 <vfprintf+0x1f6>
    1bf6:	60 81       	ld	r22, Z
    1bf8:	71 81       	ldd	r23, Z+1	; 0x01
    1bfa:	07 2e       	mov	r0, r23
    1bfc:	00 0c       	add	r0, r0
    1bfe:	88 0b       	sbc	r24, r24
    1c00:	99 0b       	sbc	r25, r25
    1c02:	0e 5f       	subi	r16, 0xFE	; 254
    1c04:	1f 4f       	sbci	r17, 0xFF	; 255
    1c06:	f3 2d       	mov	r31, r3
    1c08:	ff 76       	andi	r31, 0x6F	; 111
    1c0a:	3f 2e       	mov	r3, r31
    1c0c:	97 ff       	sbrs	r25, 7
    1c0e:	09 c0       	rjmp	.+18     	; 0x1c22 <vfprintf+0x212>
    1c10:	90 95       	com	r25
    1c12:	80 95       	com	r24
    1c14:	70 95       	com	r23
    1c16:	61 95       	neg	r22
    1c18:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1e:	f0 68       	ori	r31, 0x80	; 128
    1c20:	3f 2e       	mov	r3, r31
    1c22:	2a e0       	ldi	r18, 0x0A	; 10
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	a3 01       	movw	r20, r6
    1c28:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__ultoa_invert>
    1c2c:	88 2e       	mov	r8, r24
    1c2e:	86 18       	sub	r8, r6
    1c30:	45 c0       	rjmp	.+138    	; 0x1cbc <vfprintf+0x2ac>
    1c32:	85 37       	cpi	r24, 0x75	; 117
    1c34:	31 f4       	brne	.+12     	; 0x1c42 <vfprintf+0x232>
    1c36:	23 2d       	mov	r18, r3
    1c38:	2f 7e       	andi	r18, 0xEF	; 239
    1c3a:	b2 2e       	mov	r11, r18
    1c3c:	2a e0       	ldi	r18, 0x0A	; 10
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	25 c0       	rjmp	.+74     	; 0x1c8c <vfprintf+0x27c>
    1c42:	93 2d       	mov	r25, r3
    1c44:	99 7f       	andi	r25, 0xF9	; 249
    1c46:	b9 2e       	mov	r11, r25
    1c48:	8f 36       	cpi	r24, 0x6F	; 111
    1c4a:	c1 f0       	breq	.+48     	; 0x1c7c <vfprintf+0x26c>
    1c4c:	18 f4       	brcc	.+6      	; 0x1c54 <vfprintf+0x244>
    1c4e:	88 35       	cpi	r24, 0x58	; 88
    1c50:	79 f0       	breq	.+30     	; 0x1c70 <vfprintf+0x260>
    1c52:	b5 c0       	rjmp	.+362    	; 0x1dbe <vfprintf+0x3ae>
    1c54:	80 37       	cpi	r24, 0x70	; 112
    1c56:	19 f0       	breq	.+6      	; 0x1c5e <vfprintf+0x24e>
    1c58:	88 37       	cpi	r24, 0x78	; 120
    1c5a:	21 f0       	breq	.+8      	; 0x1c64 <vfprintf+0x254>
    1c5c:	b0 c0       	rjmp	.+352    	; 0x1dbe <vfprintf+0x3ae>
    1c5e:	e9 2f       	mov	r30, r25
    1c60:	e0 61       	ori	r30, 0x10	; 16
    1c62:	be 2e       	mov	r11, r30
    1c64:	b4 fe       	sbrs	r11, 4
    1c66:	0d c0       	rjmp	.+26     	; 0x1c82 <vfprintf+0x272>
    1c68:	fb 2d       	mov	r31, r11
    1c6a:	f4 60       	ori	r31, 0x04	; 4
    1c6c:	bf 2e       	mov	r11, r31
    1c6e:	09 c0       	rjmp	.+18     	; 0x1c82 <vfprintf+0x272>
    1c70:	34 fe       	sbrs	r3, 4
    1c72:	0a c0       	rjmp	.+20     	; 0x1c88 <vfprintf+0x278>
    1c74:	29 2f       	mov	r18, r25
    1c76:	26 60       	ori	r18, 0x06	; 6
    1c78:	b2 2e       	mov	r11, r18
    1c7a:	06 c0       	rjmp	.+12     	; 0x1c88 <vfprintf+0x278>
    1c7c:	28 e0       	ldi	r18, 0x08	; 8
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	05 c0       	rjmp	.+10     	; 0x1c8c <vfprintf+0x27c>
    1c82:	20 e1       	ldi	r18, 0x10	; 16
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <vfprintf+0x27c>
    1c88:	20 e1       	ldi	r18, 0x10	; 16
    1c8a:	32 e0       	ldi	r19, 0x02	; 2
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	b7 fe       	sbrs	r11, 7
    1c90:	07 c0       	rjmp	.+14     	; 0x1ca0 <vfprintf+0x290>
    1c92:	60 81       	ld	r22, Z
    1c94:	71 81       	ldd	r23, Z+1	; 0x01
    1c96:	82 81       	ldd	r24, Z+2	; 0x02
    1c98:	93 81       	ldd	r25, Z+3	; 0x03
    1c9a:	0c 5f       	subi	r16, 0xFC	; 252
    1c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9e:	06 c0       	rjmp	.+12     	; 0x1cac <vfprintf+0x29c>
    1ca0:	60 81       	ld	r22, Z
    1ca2:	71 81       	ldd	r23, Z+1	; 0x01
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	0e 5f       	subi	r16, 0xFE	; 254
    1caa:	1f 4f       	sbci	r17, 0xFF	; 255
    1cac:	a3 01       	movw	r20, r6
    1cae:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__ultoa_invert>
    1cb2:	88 2e       	mov	r8, r24
    1cb4:	86 18       	sub	r8, r6
    1cb6:	fb 2d       	mov	r31, r11
    1cb8:	ff 77       	andi	r31, 0x7F	; 127
    1cba:	3f 2e       	mov	r3, r31
    1cbc:	36 fe       	sbrs	r3, 6
    1cbe:	0d c0       	rjmp	.+26     	; 0x1cda <vfprintf+0x2ca>
    1cc0:	23 2d       	mov	r18, r3
    1cc2:	2e 7f       	andi	r18, 0xFE	; 254
    1cc4:	a2 2e       	mov	r10, r18
    1cc6:	89 14       	cp	r8, r9
    1cc8:	58 f4       	brcc	.+22     	; 0x1ce0 <vfprintf+0x2d0>
    1cca:	34 fe       	sbrs	r3, 4
    1ccc:	0b c0       	rjmp	.+22     	; 0x1ce4 <vfprintf+0x2d4>
    1cce:	32 fc       	sbrc	r3, 2
    1cd0:	09 c0       	rjmp	.+18     	; 0x1ce4 <vfprintf+0x2d4>
    1cd2:	83 2d       	mov	r24, r3
    1cd4:	8e 7e       	andi	r24, 0xEE	; 238
    1cd6:	a8 2e       	mov	r10, r24
    1cd8:	05 c0       	rjmp	.+10     	; 0x1ce4 <vfprintf+0x2d4>
    1cda:	b8 2c       	mov	r11, r8
    1cdc:	a3 2c       	mov	r10, r3
    1cde:	03 c0       	rjmp	.+6      	; 0x1ce6 <vfprintf+0x2d6>
    1ce0:	b8 2c       	mov	r11, r8
    1ce2:	01 c0       	rjmp	.+2      	; 0x1ce6 <vfprintf+0x2d6>
    1ce4:	b9 2c       	mov	r11, r9
    1ce6:	a4 fe       	sbrs	r10, 4
    1ce8:	0f c0       	rjmp	.+30     	; 0x1d08 <vfprintf+0x2f8>
    1cea:	fe 01       	movw	r30, r28
    1cec:	e8 0d       	add	r30, r8
    1cee:	f1 1d       	adc	r31, r1
    1cf0:	80 81       	ld	r24, Z
    1cf2:	80 33       	cpi	r24, 0x30	; 48
    1cf4:	21 f4       	brne	.+8      	; 0x1cfe <vfprintf+0x2ee>
    1cf6:	9a 2d       	mov	r25, r10
    1cf8:	99 7e       	andi	r25, 0xE9	; 233
    1cfa:	a9 2e       	mov	r10, r25
    1cfc:	09 c0       	rjmp	.+18     	; 0x1d10 <vfprintf+0x300>
    1cfe:	a2 fe       	sbrs	r10, 2
    1d00:	06 c0       	rjmp	.+12     	; 0x1d0e <vfprintf+0x2fe>
    1d02:	b3 94       	inc	r11
    1d04:	b3 94       	inc	r11
    1d06:	04 c0       	rjmp	.+8      	; 0x1d10 <vfprintf+0x300>
    1d08:	8a 2d       	mov	r24, r10
    1d0a:	86 78       	andi	r24, 0x86	; 134
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <vfprintf+0x300>
    1d0e:	b3 94       	inc	r11
    1d10:	a3 fc       	sbrc	r10, 3
    1d12:	11 c0       	rjmp	.+34     	; 0x1d36 <vfprintf+0x326>
    1d14:	a0 fe       	sbrs	r10, 0
    1d16:	06 c0       	rjmp	.+12     	; 0x1d24 <vfprintf+0x314>
    1d18:	b2 14       	cp	r11, r2
    1d1a:	88 f4       	brcc	.+34     	; 0x1d3e <vfprintf+0x32e>
    1d1c:	28 0c       	add	r2, r8
    1d1e:	92 2c       	mov	r9, r2
    1d20:	9b 18       	sub	r9, r11
    1d22:	0e c0       	rjmp	.+28     	; 0x1d40 <vfprintf+0x330>
    1d24:	b2 14       	cp	r11, r2
    1d26:	60 f4       	brcc	.+24     	; 0x1d40 <vfprintf+0x330>
    1d28:	b6 01       	movw	r22, r12
    1d2a:	80 e2       	ldi	r24, 0x20	; 32
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <fputc>
    1d32:	b3 94       	inc	r11
    1d34:	f7 cf       	rjmp	.-18     	; 0x1d24 <vfprintf+0x314>
    1d36:	b2 14       	cp	r11, r2
    1d38:	18 f4       	brcc	.+6      	; 0x1d40 <vfprintf+0x330>
    1d3a:	2b 18       	sub	r2, r11
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <vfprintf+0x332>
    1d3e:	98 2c       	mov	r9, r8
    1d40:	21 2c       	mov	r2, r1
    1d42:	a4 fe       	sbrs	r10, 4
    1d44:	10 c0       	rjmp	.+32     	; 0x1d66 <vfprintf+0x356>
    1d46:	b6 01       	movw	r22, r12
    1d48:	80 e3       	ldi	r24, 0x30	; 48
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <fputc>
    1d50:	a2 fe       	sbrs	r10, 2
    1d52:	17 c0       	rjmp	.+46     	; 0x1d82 <vfprintf+0x372>
    1d54:	a1 fc       	sbrc	r10, 1
    1d56:	03 c0       	rjmp	.+6      	; 0x1d5e <vfprintf+0x34e>
    1d58:	88 e7       	ldi	r24, 0x78	; 120
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <vfprintf+0x352>
    1d5e:	88 e5       	ldi	r24, 0x58	; 88
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	b6 01       	movw	r22, r12
    1d64:	0c c0       	rjmp	.+24     	; 0x1d7e <vfprintf+0x36e>
    1d66:	8a 2d       	mov	r24, r10
    1d68:	86 78       	andi	r24, 0x86	; 134
    1d6a:	59 f0       	breq	.+22     	; 0x1d82 <vfprintf+0x372>
    1d6c:	a1 fe       	sbrs	r10, 1
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <vfprintf+0x364>
    1d70:	8b e2       	ldi	r24, 0x2B	; 43
    1d72:	01 c0       	rjmp	.+2      	; 0x1d76 <vfprintf+0x366>
    1d74:	80 e2       	ldi	r24, 0x20	; 32
    1d76:	a7 fc       	sbrc	r10, 7
    1d78:	8d e2       	ldi	r24, 0x2D	; 45
    1d7a:	b6 01       	movw	r22, r12
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <fputc>
    1d82:	89 14       	cp	r8, r9
    1d84:	38 f4       	brcc	.+14     	; 0x1d94 <vfprintf+0x384>
    1d86:	b6 01       	movw	r22, r12
    1d88:	80 e3       	ldi	r24, 0x30	; 48
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <fputc>
    1d90:	9a 94       	dec	r9
    1d92:	f7 cf       	rjmp	.-18     	; 0x1d82 <vfprintf+0x372>
    1d94:	8a 94       	dec	r8
    1d96:	f3 01       	movw	r30, r6
    1d98:	e8 0d       	add	r30, r8
    1d9a:	f1 1d       	adc	r31, r1
    1d9c:	80 81       	ld	r24, Z
    1d9e:	b6 01       	movw	r22, r12
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <fputc>
    1da6:	81 10       	cpse	r8, r1
    1da8:	f5 cf       	rjmp	.-22     	; 0x1d94 <vfprintf+0x384>
    1daa:	22 20       	and	r2, r2
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <vfprintf+0x3a0>
    1dae:	42 ce       	rjmp	.-892    	; 0x1a34 <vfprintf+0x24>
    1db0:	b6 01       	movw	r22, r12
    1db2:	80 e2       	ldi	r24, 0x20	; 32
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <fputc>
    1dba:	2a 94       	dec	r2
    1dbc:	f6 cf       	rjmp	.-20     	; 0x1daa <vfprintf+0x39a>
    1dbe:	f6 01       	movw	r30, r12
    1dc0:	86 81       	ldd	r24, Z+6	; 0x06
    1dc2:	97 81       	ldd	r25, Z+7	; 0x07
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <vfprintf+0x3ba>
    1dc6:	8f ef       	ldi	r24, 0xFF	; 255
    1dc8:	9f ef       	ldi	r25, 0xFF	; 255
    1dca:	2b 96       	adiw	r28, 0x0b	; 11
    1dcc:	e2 e1       	ldi	r30, 0x12	; 18
    1dce:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__epilogue_restores__>

00001dd2 <strnlen_P>:
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	05 90       	lpm	r0, Z+
    1dd6:	61 50       	subi	r22, 0x01	; 1
    1dd8:	70 40       	sbci	r23, 0x00	; 0
    1dda:	01 10       	cpse	r0, r1
    1ddc:	d8 f7       	brcc	.-10     	; 0x1dd4 <strnlen_P+0x2>
    1dde:	80 95       	com	r24
    1de0:	90 95       	com	r25
    1de2:	8e 0f       	add	r24, r30
    1de4:	9f 1f       	adc	r25, r31
    1de6:	08 95       	ret

00001de8 <strnlen>:
    1de8:	fc 01       	movw	r30, r24
    1dea:	61 50       	subi	r22, 0x01	; 1
    1dec:	70 40       	sbci	r23, 0x00	; 0
    1dee:	01 90       	ld	r0, Z+
    1df0:	01 10       	cpse	r0, r1
    1df2:	d8 f7       	brcc	.-10     	; 0x1dea <strnlen+0x2>
    1df4:	80 95       	com	r24
    1df6:	90 95       	com	r25
    1df8:	8e 0f       	add	r24, r30
    1dfa:	9f 1f       	adc	r25, r31
    1dfc:	08 95       	ret

00001dfe <fputc>:
    1dfe:	0f 93       	push	r16
    1e00:	1f 93       	push	r17
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	fb 01       	movw	r30, r22
    1e08:	23 81       	ldd	r18, Z+3	; 0x03
    1e0a:	21 fd       	sbrc	r18, 1
    1e0c:	03 c0       	rjmp	.+6      	; 0x1e14 <fputc+0x16>
    1e0e:	8f ef       	ldi	r24, 0xFF	; 255
    1e10:	9f ef       	ldi	r25, 0xFF	; 255
    1e12:	2c c0       	rjmp	.+88     	; 0x1e6c <fputc+0x6e>
    1e14:	22 ff       	sbrs	r18, 2
    1e16:	16 c0       	rjmp	.+44     	; 0x1e44 <fputc+0x46>
    1e18:	46 81       	ldd	r20, Z+6	; 0x06
    1e1a:	57 81       	ldd	r21, Z+7	; 0x07
    1e1c:	24 81       	ldd	r18, Z+4	; 0x04
    1e1e:	35 81       	ldd	r19, Z+5	; 0x05
    1e20:	42 17       	cp	r20, r18
    1e22:	53 07       	cpc	r21, r19
    1e24:	44 f4       	brge	.+16     	; 0x1e36 <fputc+0x38>
    1e26:	a0 81       	ld	r26, Z
    1e28:	b1 81       	ldd	r27, Z+1	; 0x01
    1e2a:	9d 01       	movw	r18, r26
    1e2c:	2f 5f       	subi	r18, 0xFF	; 255
    1e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e30:	31 83       	std	Z+1, r19	; 0x01
    1e32:	20 83       	st	Z, r18
    1e34:	8c 93       	st	X, r24
    1e36:	26 81       	ldd	r18, Z+6	; 0x06
    1e38:	37 81       	ldd	r19, Z+7	; 0x07
    1e3a:	2f 5f       	subi	r18, 0xFF	; 255
    1e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3e:	37 83       	std	Z+7, r19	; 0x07
    1e40:	26 83       	std	Z+6, r18	; 0x06
    1e42:	14 c0       	rjmp	.+40     	; 0x1e6c <fputc+0x6e>
    1e44:	8b 01       	movw	r16, r22
    1e46:	ec 01       	movw	r28, r24
    1e48:	fb 01       	movw	r30, r22
    1e4a:	00 84       	ldd	r0, Z+8	; 0x08
    1e4c:	f1 85       	ldd	r31, Z+9	; 0x09
    1e4e:	e0 2d       	mov	r30, r0
    1e50:	09 95       	icall
    1e52:	89 2b       	or	r24, r25
    1e54:	e1 f6       	brne	.-72     	; 0x1e0e <fputc+0x10>
    1e56:	d8 01       	movw	r26, r16
    1e58:	16 96       	adiw	r26, 0x06	; 6
    1e5a:	8d 91       	ld	r24, X+
    1e5c:	9c 91       	ld	r25, X
    1e5e:	17 97       	sbiw	r26, 0x07	; 7
    1e60:	01 96       	adiw	r24, 0x01	; 1
    1e62:	17 96       	adiw	r26, 0x07	; 7
    1e64:	9c 93       	st	X, r25
    1e66:	8e 93       	st	-X, r24
    1e68:	16 97       	sbiw	r26, 0x06	; 6
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	08 95       	ret

00001e76 <__ultoa_invert>:
    1e76:	fa 01       	movw	r30, r20
    1e78:	aa 27       	eor	r26, r26
    1e7a:	28 30       	cpi	r18, 0x08	; 8
    1e7c:	51 f1       	breq	.+84     	; 0x1ed2 <__ultoa_invert+0x5c>
    1e7e:	20 31       	cpi	r18, 0x10	; 16
    1e80:	81 f1       	breq	.+96     	; 0x1ee2 <__ultoa_invert+0x6c>
    1e82:	e8 94       	clt
    1e84:	6f 93       	push	r22
    1e86:	6e 7f       	andi	r22, 0xFE	; 254
    1e88:	6e 5f       	subi	r22, 0xFE	; 254
    1e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e90:	af 4f       	sbci	r26, 0xFF	; 255
    1e92:	b1 e0       	ldi	r27, 0x01	; 1
    1e94:	3e d0       	rcall	.+124    	; 0x1f12 <__ultoa_invert+0x9c>
    1e96:	b4 e0       	ldi	r27, 0x04	; 4
    1e98:	3c d0       	rcall	.+120    	; 0x1f12 <__ultoa_invert+0x9c>
    1e9a:	67 0f       	add	r22, r23
    1e9c:	78 1f       	adc	r23, r24
    1e9e:	89 1f       	adc	r24, r25
    1ea0:	9a 1f       	adc	r25, r26
    1ea2:	a1 1d       	adc	r26, r1
    1ea4:	68 0f       	add	r22, r24
    1ea6:	79 1f       	adc	r23, r25
    1ea8:	8a 1f       	adc	r24, r26
    1eaa:	91 1d       	adc	r25, r1
    1eac:	a1 1d       	adc	r26, r1
    1eae:	6a 0f       	add	r22, r26
    1eb0:	71 1d       	adc	r23, r1
    1eb2:	81 1d       	adc	r24, r1
    1eb4:	91 1d       	adc	r25, r1
    1eb6:	a1 1d       	adc	r26, r1
    1eb8:	20 d0       	rcall	.+64     	; 0x1efa <__ultoa_invert+0x84>
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <__ultoa_invert+0x48>
    1ebc:	68 94       	set
    1ebe:	3f 91       	pop	r19
    1ec0:	2a e0       	ldi	r18, 0x0A	; 10
    1ec2:	26 9f       	mul	r18, r22
    1ec4:	11 24       	eor	r1, r1
    1ec6:	30 19       	sub	r19, r0
    1ec8:	30 5d       	subi	r19, 0xD0	; 208
    1eca:	31 93       	st	Z+, r19
    1ecc:	de f6       	brtc	.-74     	; 0x1e84 <__ultoa_invert+0xe>
    1ece:	cf 01       	movw	r24, r30
    1ed0:	08 95       	ret
    1ed2:	46 2f       	mov	r20, r22
    1ed4:	47 70       	andi	r20, 0x07	; 7
    1ed6:	40 5d       	subi	r20, 0xD0	; 208
    1ed8:	41 93       	st	Z+, r20
    1eda:	b3 e0       	ldi	r27, 0x03	; 3
    1edc:	0f d0       	rcall	.+30     	; 0x1efc <__ultoa_invert+0x86>
    1ede:	c9 f7       	brne	.-14     	; 0x1ed2 <__ultoa_invert+0x5c>
    1ee0:	f6 cf       	rjmp	.-20     	; 0x1ece <__ultoa_invert+0x58>
    1ee2:	46 2f       	mov	r20, r22
    1ee4:	4f 70       	andi	r20, 0x0F	; 15
    1ee6:	40 5d       	subi	r20, 0xD0	; 208
    1ee8:	4a 33       	cpi	r20, 0x3A	; 58
    1eea:	18 f0       	brcs	.+6      	; 0x1ef2 <__ultoa_invert+0x7c>
    1eec:	49 5d       	subi	r20, 0xD9	; 217
    1eee:	31 fd       	sbrc	r19, 1
    1ef0:	40 52       	subi	r20, 0x20	; 32
    1ef2:	41 93       	st	Z+, r20
    1ef4:	02 d0       	rcall	.+4      	; 0x1efa <__ultoa_invert+0x84>
    1ef6:	a9 f7       	brne	.-22     	; 0x1ee2 <__ultoa_invert+0x6c>
    1ef8:	ea cf       	rjmp	.-44     	; 0x1ece <__ultoa_invert+0x58>
    1efa:	b4 e0       	ldi	r27, 0x04	; 4
    1efc:	a6 95       	lsr	r26
    1efe:	97 95       	ror	r25
    1f00:	87 95       	ror	r24
    1f02:	77 95       	ror	r23
    1f04:	67 95       	ror	r22
    1f06:	ba 95       	dec	r27
    1f08:	c9 f7       	brne	.-14     	; 0x1efc <__ultoa_invert+0x86>
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	61 05       	cpc	r22, r1
    1f0e:	71 05       	cpc	r23, r1
    1f10:	08 95       	ret
    1f12:	9b 01       	movw	r18, r22
    1f14:	ac 01       	movw	r20, r24
    1f16:	0a 2e       	mov	r0, r26
    1f18:	06 94       	lsr	r0
    1f1a:	57 95       	ror	r21
    1f1c:	47 95       	ror	r20
    1f1e:	37 95       	ror	r19
    1f20:	27 95       	ror	r18
    1f22:	ba 95       	dec	r27
    1f24:	c9 f7       	brne	.-14     	; 0x1f18 <__ultoa_invert+0xa2>
    1f26:	62 0f       	add	r22, r18
    1f28:	73 1f       	adc	r23, r19
    1f2a:	84 1f       	adc	r24, r20
    1f2c:	95 1f       	adc	r25, r21
    1f2e:	a0 1d       	adc	r26, r0
    1f30:	08 95       	ret

00001f32 <__prologue_saves__>:
    1f32:	2f 92       	push	r2
    1f34:	3f 92       	push	r3
    1f36:	4f 92       	push	r4
    1f38:	5f 92       	push	r5
    1f3a:	6f 92       	push	r6
    1f3c:	7f 92       	push	r7
    1f3e:	8f 92       	push	r8
    1f40:	9f 92       	push	r9
    1f42:	af 92       	push	r10
    1f44:	bf 92       	push	r11
    1f46:	cf 92       	push	r12
    1f48:	df 92       	push	r13
    1f4a:	ef 92       	push	r14
    1f4c:	ff 92       	push	r15
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	ca 1b       	sub	r28, r26
    1f5c:	db 0b       	sbc	r29, r27
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	09 94       	ijmp

00001f6a <__epilogue_restores__>:
    1f6a:	2a 88       	ldd	r2, Y+18	; 0x12
    1f6c:	39 88       	ldd	r3, Y+17	; 0x11
    1f6e:	48 88       	ldd	r4, Y+16	; 0x10
    1f70:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f72:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f74:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f76:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f78:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f7a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f7c:	b9 84       	ldd	r11, Y+9	; 0x09
    1f7e:	c8 84       	ldd	r12, Y+8	; 0x08
    1f80:	df 80       	ldd	r13, Y+7	; 0x07
    1f82:	ee 80       	ldd	r14, Y+6	; 0x06
    1f84:	fd 80       	ldd	r15, Y+5	; 0x05
    1f86:	0c 81       	ldd	r16, Y+4	; 0x04
    1f88:	1b 81       	ldd	r17, Y+3	; 0x03
    1f8a:	aa 81       	ldd	r26, Y+2	; 0x02
    1f8c:	b9 81       	ldd	r27, Y+1	; 0x01
    1f8e:	ce 0f       	add	r28, r30
    1f90:	d1 1d       	adc	r29, r1
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	ed 01       	movw	r28, r26
    1f9e:	08 95       	ret

00001fa0 <_exit>:
    1fa0:	f8 94       	cli

00001fa2 <__stop_program>:
    1fa2:	ff cf       	rjmp	.-2      	; 0x1fa2 <__stop_program>
